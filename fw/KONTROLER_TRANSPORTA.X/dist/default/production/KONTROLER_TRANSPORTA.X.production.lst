

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu May 17 03:47:02 2018

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F1517
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	swtext2,local,class=CONST,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	swtext3,local,class=CONST,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     	;# 
    42  0001                     	;# 
    43  0002                     	;# 
    44  0003                     	;# 
    45  0004                     	;# 
    46  0005                     	;# 
    47  0006                     	;# 
    48  0007                     	;# 
    49  0008                     	;# 
    50  0009                     	;# 
    51  000A                     	;# 
    52  000B                     	;# 
    53  000C                     	;# 
    54  000D                     	;# 
    55  000E                     	;# 
    56  000F                     	;# 
    57  0010                     	;# 
    58  0011                     	;# 
    59  0012                     	;# 
    60  0015                     	;# 
    61  0016                     	;# 
    62  0016                     	;# 
    63  0017                     	;# 
    64  0018                     	;# 
    65  0019                     	;# 
    66  001A                     	;# 
    67  001B                     	;# 
    68  001C                     	;# 
    69  008C                     	;# 
    70  008D                     	;# 
    71  008E                     	;# 
    72  008F                     	;# 
    73  0090                     	;# 
    74  0091                     	;# 
    75  0092                     	;# 
    76  0095                     	;# 
    77  0096                     	;# 
    78  0097                     	;# 
    79  0099                     	;# 
    80  009A                     	;# 
    81  009B                     	;# 
    82  009B                     	;# 
    83  009C                     	;# 
    84  009D                     	;# 
    85  009E                     	;# 
    86  010C                     	;# 
    87  010D                     	;# 
    88  010E                     	;# 
    89  010F                     	;# 
    90  0110                     	;# 
    91  0116                     	;# 
    92  0117                     	;# 
    93  011D                     	;# 
    94  018C                     	;# 
    95  018D                     	;# 
    96  018E                     	;# 
    97  018F                     	;# 
    98  0190                     	;# 
    99  0191                     	;# 
   100  0191                     	;# 
   101  0192                     	;# 
   102  0193                     	;# 
   103  0193                     	;# 
   104  0194                     	;# 
   105  0195                     	;# 
   106  0196                     	;# 
   107  0197                     	;# 
   108  0199                     	;# 
   109  019A                     	;# 
   110  019B                     	;# 
   111  019B                     	;# 
   112  019B                     	;# 
   113  019B                     	;# 
   114  019C                     	;# 
   115  019C                     	;# 
   116  019D                     	;# 
   117  019E                     	;# 
   118  019F                     	;# 
   119  020D                     	;# 
   120  0210                     	;# 
   121  0211                     	;# 
   122  0211                     	;# 
   123  0212                     	;# 
   124  0212                     	;# 
   125  0213                     	;# 
   126  0213                     	;# 
   127  0214                     	;# 
   128  0214                     	;# 
   129  0215                     	;# 
   130  0215                     	;# 
   131  0215                     	;# 
   132  0216                     	;# 
   133  0216                     	;# 
   134  0217                     	;# 
   135  0217                     	;# 
   136  0291                     	;# 
   137  0291                     	;# 
   138  0292                     	;# 
   139  0293                     	;# 
   140  0298                     	;# 
   141  0298                     	;# 
   142  0299                     	;# 
   143  029A                     	;# 
   144  0394                     	;# 
   145  0395                     	;# 
   146  0396                     	;# 
   147  0FE4                     	;# 
   148  0FE5                     	;# 
   149  0FE6                     	;# 
   150  0FE7                     	;# 
   151  0FE8                     	;# 
   152  0FE9                     	;# 
   153  0FEA                     	;# 
   154  0FEB                     	;# 
   155  0FED                     	;# 
   156  0FEE                     	;# 
   157  0FEF                     	;# 
   158                           
   159                           	psect	nvBANK0
   160  006E                     __pnvBANK0:	
   161  006E                     _hc595_shift:	
   162  006E                     	ds	1
   163  000F                     _PORTD	set	15
   164  001B                     _PR2	set	27
   165  0018                     _T1CON	set	24
   166  001C                     _T2CON	set	28
   167  0017                     _TMR1H	set	23
   168  0016                     _TMR1L	set	22
   169  005F                     _GIE	set	95
   170  005E                     _PEIE	set	94
   171  0064                     _RA4	set	100
   172  0069                     _RB1	set	105
   173  006A                     _RB2	set	106
   174  006D                     _RB5	set	109
   175  0073                     _RC3	set	115
   176  0074                     _RC4	set	116
   177  0075                     _RC5	set	117
   178  0082                     _RE2	set	130
   179  0088                     _TMR1IF	set	136
   180  009D                     _ADCON0	set	157
   181  009E                     _ADCON1	set	158
   182  009C                     _ADRESH	set	156
   183  009B                     _ADRESL	set	155
   184  008C                     _TRISA	set	140
   185  008D                     _TRISB	set	141
   186  008E                     _TRISC	set	142
   187  008F                     _TRISD	set	143
   188  0090                     _TRISE	set	144
   189  04E9                     _GO_nDONE	set	1257
   190  0488                     _TMR1IE	set	1160
   191  0117                     _FVRCON	set	279
   192  010C                     _LATA	set	268
   193  010D                     _LATB	set	269
   194  010E                     _LATC	set	270
   195  0110                     _LATE	set	272
   196  018C                     _ANSELA	set	396
   197  018D                     _ANSELB	set	397
   198  018E                     _ANSELC	set	398
   199  018F                     _ANSELD	set	399
   200  0190                     _ANSELE	set	400
   201  0293                     _CCP1CON	set	659
   202  029A                     _CCP2CON	set	666
   203  0291                     _CCPR1L	set	657
   204  0298                     _CCPR2L	set	664
   205  149C                     _DC1B0	set	5276
   206  149D                     _DC1B1	set	5277
   207  14D4                     _DC2B0	set	5332
   208  14D5                     _DC2B1	set	5333
   209                           
   210                           ; #config settings
   211  0000                     
   212                           	psect	cinit
   213  006C                     start_initialization:	
   214  006C                     __initialization:	
   215                           
   216                           ; Clear objects allocated to COMMON
   217  006C  01F9               	clrf	__pbssCOMMON& (0+127)
   218  006D  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   219  006E  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   220                           
   221                           ; Clear objects allocated to BANK0
   222  006F  3020               	movlw	low __pbssBANK0
   223  0070  0084               	movwf	4
   224  0071  3000               	movlw	high __pbssBANK0
   225  0072  0085               	movwf	5
   226  0073  304E               	movlw	78
   227  0074  3195  2503  3180   	fcall	clear_ram0
   228                           
   229                           ; Clear objects allocated to BANK1
   230  0077  30A0               	movlw	low __pbssBANK1
   231  0078  0084               	movwf	4
   232  0079  3000               	movlw	high __pbssBANK1
   233  007A  0085               	movwf	5
   234  007B  301A               	movlw	26
   235  007C  3195  2503         	fcall	clear_ram0
   236  007E                     end_of_initialization:	
   237                           ;End of C runtime variable initialization code
   238                           
   239  007E                     __end_of__initialization:	
   240  007E  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
   241  007F  0020               	movlb	0
   242  0080  3195  2D49         	ljmp	_main	;jump to C main() function
   243                           
   244                           	psect	bssCOMMON
   245  0079                     __pbssCOMMON:	
   246  0079                     _systeml_flags1:	
   247  0079                     	ds	1
   248  007A                     _timer_flags1:	
   249  007A                     	ds	1
   250  007B                     _vacum_pump1_flags1:	
   251  007B                     	ds	1
   252                           
   253                           	psect	bssBANK0
   254  0020                     __pbssBANK0:	
   255  0020                     _an0_out:	
   256  0020                     	ds	2
   257  0022                     _an1_out:	
   258  0022                     	ds	2
   259  0024                     _feeder4_charging_time:	
   260  0024                     	ds	2
   261  0026                     _max_charging_time:	
   262  0026                     	ds	2
   263  0028                     _mill_shutdown_delay:	
   264  0028                     	ds	2
   265  002A                     _mill_shutdown_delay_tmr:	
   266  002A                     	ds	2
   267  002C                     _piston_tmr:	
   268  002C                     	ds	2
   269  002E                     _vp1_cleaning_cycles:	
   270  002E                     	ds	2
   271  0030                     _vp1_delay_time:	
   272  0030                     	ds	2
   273  0032                     _vp1_idle_speed:	
   274  0032                     	ds	2
   275  0034                     _vp1_production_speed:	
   276  0034                     	ds	2
   277  0036                     _vp1_tmr:	
   278  0036                     	ds	2
   279  0038                     _activ_unit:	
   280  0038                     	ds	1
   281  0039                     _an_in_pcnt:	
   282  0039                     	ds	1
   283  003A                     _anin_tmr:	
   284  003A                     	ds	1
   285  003B                     _anout_tmr:	
   286  003B                     	ds	1
   287  003C                     _clock_tick_100ms:	
   288  003C                     	ds	1
   289  003D                     _clock_tick_1s:	
   290  003D                     	ds	1
   291  003E                     _clock_tick_2s:	
   292  003E                     	ds	1
   293  003F                     _clock_tick_500ms:	
   294  003F                     	ds	1
   295  0040                     _cyc1_pcnt:	
   296  0040                     	ds	1
   297  0041                     _cyclon_flags1:	
   298  0041                     	ds	1
   299  0042                     _delayus_variable:	
   300  0042                     	ds	1
   301  0043                     _dout_tmr:	
   302  0043                     	ds	1
   303  0044                     _error_display_pcnt:	
   304  0044                     	ds	1
   305  0045                     _feeder1_flags1:	
   306  0045                     	ds	1
   307  0046                     _feeder1_pcnt:	
   308  0046                     	ds	1
   309  0047                     _feeder1_state:	
   310  0047                     	ds	1
   311  0048                     _feeder2_flags1:	
   312  0048                     	ds	1
   313  0049                     _feeder2_pcnt:	
   314  0049                     	ds	1
   315  004A                     _feeder2_state:	
   316  004A                     	ds	1
   317  004B                     _feeder3_flags1:	
   318  004B                     	ds	1
   319  004C                     _feeder3_pcnt:	
   320  004C                     	ds	1
   321  004D                     _feeder3_state:	
   322  004D                     	ds	1
   323  004E                     _feeder4_flags1:	
   324  004E                     	ds	1
   325  004F                     _feeder4_pcnt:	
   326  004F                     	ds	1
   327  0050                     _feeder4_state:	
   328  0050                     	ds	1
   329  0051                     _feeder5_flags1:	
   330  0051                     	ds	1
   331  0052                     _feeder5_pcnt:	
   332  0052                     	ds	1
   333  0053                     _feeder5_state:	
   334  0053                     	ds	1
   335  0054                     _feeder_coex_flags1:	
   336  0054                     	ds	1
   337  0055                     _feeder_coex_pcnt:	
   338  0055                     	ds	1
   339  0056                     _feeder_coex_state:	
   340  0056                     	ds	1
   341  0057                     _input_0_7:	
   342  0057                     	ds	1
   343  0058                     _input_16_23:	
   344  0058                     	ds	1
   345  0059                     _input_24_31:	
   346  0059                     	ds	1
   347  005A                     _input_8_15:	
   348  005A                     	ds	1
   349  005B                     _output_0_7:	
   350  005B                     	ds	1
   351  005C                     _output_8_15:	
   352  005C                     	ds	1
   353  005D                     _relay_pcnt:	
   354  005D                     	ds	1
   355  005E                     _signal_0_7:	
   356  005E                     	ds	1
   357  005F                     _signal_8_15:	
   358  005F                     	ds	1
   359  0060                     _sigout_pcnt:	
   360  0060                     	ds	1
   361  0061                     _sigout_tmr:	
   362  0061                     	ds	1
   363  0062                     _system_flags2:	
   364  0062                     	ds	1
   365  0063                     _taster_flags1:	
   366  0063                     	ds	1
   367  0064                     _taster_flags2:	
   368  0064                     	ds	1
   369  0065                     _temp:	
   370  0065                     	ds	1
   371  0066                     _test_cnt:	
   372  0066                     	ds	1
   373  0067                     _timer:	
   374  0067                     	ds	1
   375  0068                     _timer_flags2:	
   376  0068                     	ds	1
   377  0069                     _timer_flags3:	
   378  0069                     	ds	1
   379  006A                     _vacum_pump1_flags2:	
   380  006A                     	ds	1
   381  006B                     _vacum_pump1_state:	
   382  006B                     	ds	1
   383  006C                     _vp1_cl_pcnt:	
   384  006C                     	ds	1
   385  006D                     _vp1_pcnt:	
   386  006D                     	ds	1
   387                           
   388                           	psect	bssBANK1
   389  00A0                     __pbssBANK1:	
   390  00A0                     _error_display_tmr:	
   391  00A0                     	ds	2
   392  00A2                     _feeder1_control_delay_tmr:	
   393  00A2                     	ds	2
   394  00A4                     _feeder2_cleaning_piston_tmr:	
   395  00A4                     	ds	2
   396  00A6                     _feeder2_control_delay_tmr:	
   397  00A6                     	ds	2
   398  00A8                     _feeder3_control_delay_tmr:	
   399  00A8                     	ds	2
   400  00AA                     _feeder4_charging_tmr:	
   401  00AA                     	ds	2
   402  00AC                     _feeder4_control_delay_tmr:	
   403  00AC                     	ds	2
   404  00AE                     _feeder5_control_delay_tmr:	
   405  00AE                     	ds	2
   406  00B0                     _feeder_coex_control_delay_tmr:	
   407  00B0                     	ds	2
   408  00B2                     _feeder_state_change_tmr:	
   409  00B2                     	ds	2
   410  00B4                     _max_charging_tmr:	
   411  00B4                     	ds	2
   412  00B6                     _vp1_cleaning_cnt:	
   413  00B6                     	ds	2
   414  00B8                     _vp1_control_delay_tmr:	
   415  00B8                     	ds	2
   416                           
   417                           	psect	clrtext
   418  1503                     clear_ram0:	
   419                           ;	Called with FSR0 containing the base address, and
   420                           ;	WREG with the size to clear
   421                           
   422  1503  0064               	clrwdt	;clear the watchdog before getting into this loop
   423  1504                     clrloop0:	
   424  1504  0180               	clrf	0	;clear RAM location pointed to by FSR
   425  1505  3101               	addfsr 0,1
   426  1506  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   427  1507  2D04               	goto	clrloop0	;have we reached the end yet?
   428  1508  3400               	retlw	0	;all done for this memory range, return
   429                           
   430                           	psect	cstackBANK1
   431  00BA                     __pcstackBANK1:	
   432  00BA                     ??_CheckAnalogInput:	
   433                           
   434                           ; 0 bytes @ 0x0
   435  00BA                     	ds	2
   436                           
   437                           	psect	cstackCOMMON
   438  0070                     __pcstackCOMMON:	
   439  0070                     ?_HC595_Shift:	
   440  0070                     ?_InitRAM:	
   441                           ; 0 bytes @ 0x0
   442                           
   443  0070                     ?_InitSYS:	
   444                           ; 0 bytes @ 0x0
   445                           
   446  0070                     ?_CheckTimer:	
   447                           ; 0 bytes @ 0x0
   448                           
   449  0070                     ?_CheckSafety:	
   450                           ; 0 bytes @ 0x0
   451                           
   452  0070                     ?_CheckDigitalInput:	
   453                           ; 0 bytes @ 0x0
   454                           
   455  0070                     ?_CheckAnalogInput:	
   456                           ; 0 bytes @ 0x0
   457                           
   458  0070                     ?_ProcessFeeder1:	
   459                           ; 0 bytes @ 0x0
   460                           
   461  0070                     ?_ProcessFeeder2:	
   462                           ; 0 bytes @ 0x0
   463                           
   464  0070                     ?_ProcessFeeder3:	
   465                           ; 0 bytes @ 0x0
   466                           
   467  0070                     ?_ProcessFeeder4:	
   468                           ; 0 bytes @ 0x0
   469                           
   470  0070                     ?_ProcessFeeder5:	
   471                           ; 0 bytes @ 0x0
   472                           
   473  0070                     ?_ProcessFeederCoex:	
   474                           ; 0 bytes @ 0x0
   475                           
   476  0070                     ?_ProcessCyclon1:	
   477                           ; 0 bytes @ 0x0
   478                           
   479  0070                     ?_ProcessVacumPump1:	
   480                           ; 0 bytes @ 0x0
   481                           
   482  0070                     ?_SetRelayOutput:	
   483                           ; 0 bytes @ 0x0
   484                           
   485  0070                     ?_SetAnalogOutput:	
   486                           ; 0 bytes @ 0x0
   487                           
   488  0070                     ?_SetSignalOutput:	
   489                           ; 0 bytes @ 0x0
   490                           
   491  0070                     ?_DelayMs:	
   492                           ; 0 bytes @ 0x0
   493                           
   494  0070                     ?_DelayS:	
   495                           ; 0 bytes @ 0x0
   496                           
   497  0070                     ?_timer_int:	
   498                           ; 0 bytes @ 0x0
   499                           
   500  0070                     ??_timer_int:	
   501                           ; 0 bytes @ 0x0
   502                           
   503  0070                     ?_main:	
   504                           ; 0 bytes @ 0x0
   505                           
   506  0070                     ?i1_HC595_Shift:	
   507                           ; 0 bytes @ 0x0
   508                           
   509  0070                     ??i1_HC595_Shift:	
   510                           ; 0 bytes @ 0x0
   511                           
   512                           
   513                           ; 0 bytes @ 0x0
   514  0070                     	ds	2
   515  0072                     ??_HC595_Shift:	
   516  0072                     ??_InitRAM:	
   517                           ; 0 bytes @ 0x2
   518                           
   519  0072                     ??_CheckTimer:	
   520                           ; 0 bytes @ 0x2
   521                           
   522  0072                     ??_CheckSafety:	
   523                           ; 0 bytes @ 0x2
   524                           
   525  0072                     ??_CheckDigitalInput:	
   526                           ; 0 bytes @ 0x2
   527                           
   528  0072                     ??_SetRelayOutput:	
   529                           ; 0 bytes @ 0x2
   530                           
   531  0072                     ??_SetAnalogOutput:	
   532                           ; 0 bytes @ 0x2
   533                           
   534  0072                     ?_SetTimer:	
   535                           ; 0 bytes @ 0x2
   536                           
   537  0072                     ??_DelayMs:	
   538                           ; 0 bytes @ 0x2
   539                           
   540  0072                     ?___wmul:	
   541                           ; 0 bytes @ 0x2
   542                           
   543  0072                     SetTimer@timer_for_setup:	
   544                           ; 2 bytes @ 0x2
   545                           
   546  0072                     ___wmul@multiplier:	
   547                           ; 2 bytes @ 0x2
   548                           
   549                           
   550                           ; 2 bytes @ 0x2
   551  0072                     	ds	1
   552  0073                     DelayMs@cnt:	
   553                           
   554                           ; 1 bytes @ 0x3
   555  0073                     	ds	1
   556  0074                     DelayMs@i:	
   557  0074                     SetTimer@period:	
   558                           ; 1 bytes @ 0x4
   559                           
   560  0074                     ___wmul@multiplicand:	
   561                           ; 2 bytes @ 0x4
   562                           
   563                           
   564                           ; 2 bytes @ 0x4
   565  0074                     	ds	1
   566  0075                     ??_DelayS:	
   567                           
   568                           ; 0 bytes @ 0x5
   569  0075                     	ds	1
   570  0076                     ??_ProcessFeeder1:	
   571  0076                     ??_ProcessFeeder2:	
   572                           ; 0 bytes @ 0x6
   573                           
   574  0076                     ??_ProcessFeeder3:	
   575                           ; 0 bytes @ 0x6
   576                           
   577  0076                     ??_ProcessFeeder4:	
   578                           ; 0 bytes @ 0x6
   579                           
   580  0076                     ??_ProcessFeeder5:	
   581                           ; 0 bytes @ 0x6
   582                           
   583  0076                     ??_ProcessFeederCoex:	
   584                           ; 0 bytes @ 0x6
   585                           
   586  0076                     ??_ProcessCyclon1:	
   587                           ; 0 bytes @ 0x6
   588                           
   589  0076                     ??_ProcessVacumPump1:	
   590                           ; 0 bytes @ 0x6
   591                           
   592  0076                     ??_SetSignalOutput:	
   593                           ; 0 bytes @ 0x6
   594                           
   595  0076                     ??_SetTimer:	
   596                           ; 0 bytes @ 0x6
   597                           
   598  0076                     ??___wmul:	
   599                           ; 0 bytes @ 0x6
   600                           
   601  0076                     DelayS@cnt:	
   602                           ; 0 bytes @ 0x6
   603                           
   604  0076                     ___wmul@product:	
   605                           ; 1 bytes @ 0x6
   606                           
   607                           
   608                           ; 2 bytes @ 0x6
   609  0076                     	ds	1
   610  0077                     DelayS@i:	
   611                           
   612                           ; 1 bytes @ 0x7
   613  0077                     	ds	1
   614  0078                     ??_InitSYS:	
   615                           
   616                           ; 0 bytes @ 0x8
   617  0078                     	ds	1
   618  0079                     ??_main:	
   619                           
   620                           	psect	maintext
   621  1549                     __pmaintext:	
   622                           ; 0 bytes @ 0x9
   623 ;;
   624 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   625 ;;
   626 ;; *************** function _main *****************
   627 ;; Defined at:
   628 ;;		line 92 in file "trans_ctrl.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;		None
   633 ;; Return value:  Size  Location     Type
   634 ;;		None               void
   635 ;; Registers used:
   636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   637 ;; Tracked objects:
   638 ;;		On entry : 17F/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   642 ;;      Params:         0       0       0       0       0       0       0       0
   643 ;;      Locals:         0       0       0       0       0       0       0       0
   644 ;;      Temps:          0       0       0       0       0       0       0       0
   645 ;;      Totals:         0       0       0       0       0       0       0       0
   646 ;;Total ram usage:        0 bytes
   647 ;; Hardware stack levels required when called:    5
   648 ;; This function calls:
   649 ;;		_CheckAnalogInput
   650 ;;		_CheckDigitalInput
   651 ;;		_CheckSafety
   652 ;;		_CheckTimer
   653 ;;		_InitRAM
   654 ;;		_InitSYS
   655 ;;		_ProcessCyclon1
   656 ;;		_ProcessFeeder1
   657 ;;		_ProcessFeeder2
   658 ;;		_ProcessFeeder3
   659 ;;		_ProcessFeeder4
   660 ;;		_ProcessFeeder5
   661 ;;		_ProcessFeederCoex
   662 ;;		_ProcessVacumPump1
   663 ;;		_SetAnalogOutput
   664 ;;		_SetRelayOutput
   665 ;;		_SetSignalOutput
   666 ;; This function is called by:
   667 ;;		Startup code after reset
   668 ;; This function uses a non-reentrant model
   669 ;;
   670                           
   671                           
   672                           ;psect for function _main
   673  1549                     _main:	
   674                           
   675                           ;trans_ctrl.c: 94: InitRAM();
   676                           
   677                           ;incstack = 0
   678                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   679  1549  3195  251C  3195   	fcall	_InitRAM
   680                           
   681                           ;trans_ctrl.c: 95: InitSYS();
   682  154C  3196  26CA  3195   	fcall	_InitSYS
   683  154F                     l364:	
   684                           ;trans_ctrl.c: 97: while (1) {
   685                           
   686                           
   687                           ;trans_ctrl.c: 98: CheckTimer();
   688  154F  3197  273D  3195   	fcall	_CheckTimer
   689                           
   690                           ;trans_ctrl.c: 99: CheckSafety();
   691  1552  3196  2675  3195   	fcall	_CheckSafety
   692                           
   693                           ;trans_ctrl.c: 100: CheckDigitalInput();
   694  1555  3189  2112  3195   	fcall	_CheckDigitalInput
   695                           
   696                           ;trans_ctrl.c: 101: CheckAnalogInput();
   697  1558  3183  237A  3195   	fcall	_CheckAnalogInput
   698                           
   699                           ;trans_ctrl.c: 102: ProcessFeeder1();
   700  155B  3188  2033  3195   	fcall	_ProcessFeeder1
   701                           
   702                           ;trans_ctrl.c: 103: ProcessFeeder2();
   703  155E  3186  2602  3195   	fcall	_ProcessFeeder2
   704                           
   705                           ;trans_ctrl.c: 104: ProcessFeeder3();
   706  1561  318A  22DA  3195   	fcall	_ProcessFeeder3
   707                           
   708                           ;trans_ctrl.c: 105: ProcessFeeder4();
   709  1564  3189  21F3  3195   	fcall	_ProcessFeeder4
   710                           
   711                           ;trans_ctrl.c: 106: ProcessFeeder5();
   712  1567  318B  23C3  3195   	fcall	_ProcessFeeder5
   713                           
   714                           ;trans_ctrl.c: 107: ProcessFeederCoex();
   715  156A  318C  24AC  3195   	fcall	_ProcessFeederCoex
   716                           
   717                           ;trans_ctrl.c: 108: ProcessCyclon1();
   718  156D  3188  200B  3195   	fcall	_ProcessCyclon1
   719                           
   720                           ;trans_ctrl.c: 109: ProcessVacumPump1();
   721  1570  3180  2082  3195   	fcall	_ProcessVacumPump1
   722                           
   723                           ;trans_ctrl.c: 110: SetRelayOutput();
   724  1573  3196  2632  3195   	fcall	_SetRelayOutput
   725                           
   726                           ;trans_ctrl.c: 111: SetAnalogOutput();
   727  1576  3195  257D  3195   	fcall	_SetAnalogOutput
   728                           
   729                           ;trans_ctrl.c: 112: SetSignalOutput();
   730  1579  318D  2595  3195   	fcall	_SetSignalOutput
   731  157C  2D4F               	goto	l364
   732  157D                     __end_of_main:	
   733                           
   734                           	psect	text1
   735  0D95                     __ptext1:	
   736 ;; *************** function _SetSignalOutput *****************
   737 ;; Defined at:
   738 ;;		line 446 in file "trans_ctrl.c"
   739 ;; Parameters:    Size  Location     Type
   740 ;;		None
   741 ;; Auto vars:     Size  Location     Type
   742 ;;		None
   743 ;; Return value:  Size  Location     Type
   744 ;;		None               void
   745 ;; Registers used:
   746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
   752 ;;      Params:         0       0       0       0       0       0       0       0
   753 ;;      Locals:         0       0       0       0       0       0       0       0
   754 ;;      Temps:          1       0       0       0       0       0       0       0
   755 ;;      Totals:         1       0       0       0       0       0       0       0
   756 ;;Total ram usage:        1 bytes
   757 ;; Hardware stack levels used:    1
   758 ;; Hardware stack levels required when called:    3
   759 ;; This function calls:
   760 ;;		_HC595_Shift
   761 ;;		_SetTimer
   762 ;; This function is called by:
   763 ;;		_main
   764 ;; This function uses a non-reentrant model
   765 ;;
   766                           
   767                           
   768                           ;psect for function _SetSignalOutput
   769  0D95                     _SetSignalOutput:	
   770                           
   771                           ;trans_ctrl.c: 448: if (!(timer_flags2.b4 == 1)) return;
   772                           
   773                           ;incstack = 0
   774                           ; Regs used in _SetSignalOutput: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   775  0D95  0020               	movlb	0	; select bank0
   776  0D96  1E68               	btfss	_timer_flags2,4
   777  0D97  0008               	return
   778                           
   779                           ;trans_ctrl.c: 449: else ++sigout_pcnt;
   780  0D98  3001               	movlw	1
   781  0D99  00F6               	movwf	??_SetSignalOutput
   782  0D9A  0876               	movf	??_SetSignalOutput,w
   783  0D9B  07E0               	addwf	_sigout_pcnt,f
   784                           
   785                           ;trans_ctrl.c: 450: if(sigout_pcnt != 5) return;
   786  0D9C  0860               	movf	_sigout_pcnt,w
   787  0D9D  3A05               	xorlw	5
   788  0D9E  1D03               	btfss	3,2
   789  0D9F  0008               	return
   790                           
   791                           ;trans_ctrl.c: 451: else sigout_pcnt = 0;
   792  0DA0  01E0               	clrf	_sigout_pcnt
   793                           
   794                           ;trans_ctrl.c: 455: switch (feeder1_state) {
   795  0DA1  2DB7               	goto	l5910
   796  0DA2                     l517:	
   797                           ;trans_ctrl.c: 457: case FEEDER1_OFF:
   798                           
   799  0DA2  2DB5               	goto	l532
   800  0DA3                     l519:	
   801                           ;trans_ctrl.c: 461: case FEEDER1_DISCHARGING:
   802                           
   803                           ;trans_ctrl.c: 459: break;
   804                           
   805                           ;trans_ctrl.c: 458: (signal_0_7.b0 = 0);
   806                           
   807  0DA3  2DB3               	goto	l5906
   808  0DA4                     l5898:	
   809                           ;trans_ctrl.c: 465: case FEEDER1_CHARGING:
   810                           
   811                           ;trans_ctrl.c: 463: break;
   812                           
   813                           ;trans_ctrl.c: 462: (signal_0_7.b0 = 1);
   814                           
   815                           
   816                           ;trans_ctrl.c: 466: if ((activ_unit != FEEDER1) || !(vacum_pump1_flags1.b3 == 1)) {
   817  0DA4  08B8               	movf	_activ_unit,f
   818  0DA5  1D03               	skipz
   819  0DA6  2DA9               	goto	l523
   820  0DA7  19FB               	btfsc	_vacum_pump1_flags1,3
   821  0DA8  2DAC               	goto	l521
   822  0DA9                     l523:	
   823                           
   824                           ;trans_ctrl.c: 467: if (systeml_flags1.b2) (signal_0_7.b0 = 1);
   825  0DA9  1D79               	btfss	_systeml_flags1,2
   826  0DAA  2DB5               	goto	l532
   827  0DAB  2DB3               	goto	l5906
   828  0DAC                     l521:	
   829                           ;trans_ctrl.c: 469: } else {
   830                           
   831                           ;trans_ctrl.c: 468: else (signal_0_7.b0 = 0);
   832                           
   833                           
   834                           ;trans_ctrl.c: 470: if (systeml_flags1.b2 || systeml_flags1.b1) (signal_0_7.b0 = 1);
   835  0DAC  1979               	btfsc	_systeml_flags1,2
   836  0DAD  2DB3               	goto	l5906
   837  0DAE  1CF9               	btfss	_systeml_flags1,1
   838  0DAF  2DB5               	goto	l532
   839  0DB0  2DB3               	goto	l5906
   840  0DB1                     l531:	
   841                           ;trans_ctrl.c: 475: case FEEDER1_ERROR:
   842                           
   843                           ;trans_ctrl.c: 472: }
   844                           ;trans_ctrl.c: 473: break;
   845                           
   846                           ;trans_ctrl.c: 471: else (signal_0_7.b0 = 0);
   847                           
   848                           
   849                           ;trans_ctrl.c: 476: if (systeml_flags1.b0) (signal_0_7.b0 = 1);
   850  0DB1  1C79               	btfss	_systeml_flags1,0
   851  0DB2  2DB5               	goto	l532
   852  0DB3                     l5906:	
   853  0DB3  145E               	bsf	_signal_0_7,0
   854  0DB4  2DDC               	goto	l5924
   855  0DB5                     l532:	
   856                           
   857                           ;trans_ctrl.c: 477: else (signal_0_7.b0 = 0);
   858  0DB5  105E               	bcf	_signal_0_7,0
   859                           
   860                           ;trans_ctrl.c: 479: }
   861                           
   862                           ;trans_ctrl.c: 478: break;
   863  0DB6  2DDC               	goto	l5924
   864  0DB7                     l5910:	
   865  0DB7  0847               	movf	_feeder1_state,w
   866                           
   867                           ; Switch size 1, requested type "space"
   868                           ; Number of cases is 4, Range of values is 0 to 3
   869                           ; switch strategies available:
   870                           ; Name         Instructions Cycles
   871                           ; simple_byte           13     7 (average)
   872                           ; direct_byte           14     6 (fixed)
   873                           ; jumptable            260     6 (fixed)
   874                           ;	Chosen strategy is simple_byte
   875  0DB8  3A00               	xorlw	0	; case 0
   876  0DB9  1903               	skipnz
   877  0DBA  2DA2               	goto	l517
   878  0DBB  3A01               	xorlw	1	; case 1
   879  0DBC  1903               	skipnz
   880  0DBD  2DA3               	goto	l519
   881  0DBE  3A03               	xorlw	3	; case 2
   882  0DBF  1903               	skipnz
   883  0DC0  2DA4               	goto	l5898
   884  0DC1  3A01               	xorlw	1	; case 3
   885  0DC2  1903               	skipnz
   886  0DC3  2DB1               	goto	l531
   887  0DC4  2DDC               	goto	l5924
   888                           
   889                           ;trans_ctrl.c: 483: switch (feeder2_state) {
   890  0DC5  2DDC               	goto	l5924
   891  0DC6                     l535:	
   892                           ;trans_ctrl.c: 485: case FEEDER2_OFF:
   893                           
   894  0DC6  2DDA               	goto	l550
   895  0DC7                     l537:	
   896                           ;trans_ctrl.c: 489: case FEEDER2_DISCHARGING:
   897                           
   898                           ;trans_ctrl.c: 487: break;
   899                           
   900                           ;trans_ctrl.c: 486: (signal_0_7.b1 = 0);
   901                           
   902  0DC7  2DD8               	goto	l5920
   903  0DC8                     l5912:	
   904                           ;trans_ctrl.c: 493: case FEEDER2_CHARGING:
   905                           
   906                           ;trans_ctrl.c: 491: break;
   907                           
   908                           ;trans_ctrl.c: 490: (signal_0_7.b1 = 1);
   909                           
   910                           
   911                           ;trans_ctrl.c: 494: if ((activ_unit != FEEDER2) || !(vacum_pump1_flags1.b3 == 1)) {
   912  0DC8  0838               	movf	_activ_unit,w
   913  0DC9  3A01               	xorlw	1
   914  0DCA  1D03               	skipz
   915  0DCB  2DCE               	goto	l541
   916  0DCC  19FB               	btfsc	_vacum_pump1_flags1,3
   917  0DCD  2DD1               	goto	l539
   918  0DCE                     l541:	
   919                           
   920                           ;trans_ctrl.c: 495: if (systeml_flags1.b2) (signal_0_7.b1 = 1);
   921  0DCE  1D79               	btfss	_systeml_flags1,2
   922  0DCF  2DDA               	goto	l550
   923  0DD0  2DD8               	goto	l5920
   924  0DD1                     l539:	
   925                           ;trans_ctrl.c: 497: } else {
   926                           
   927                           ;trans_ctrl.c: 496: else (signal_0_7.b1 = 0);
   928                           
   929                           
   930                           ;trans_ctrl.c: 498: if (systeml_flags1.b2 || systeml_flags1.b1) (signal_0_7.b1 = 1);
   931  0DD1  1979               	btfsc	_systeml_flags1,2
   932  0DD2  2DD8               	goto	l5920
   933  0DD3  1CF9               	btfss	_systeml_flags1,1
   934  0DD4  2DDA               	goto	l550
   935  0DD5  2DD8               	goto	l5920
   936  0DD6                     l549:	
   937                           ;trans_ctrl.c: 503: case FEEDER2_ERROR:
   938                           
   939                           ;trans_ctrl.c: 500: }
   940                           ;trans_ctrl.c: 501: break;
   941                           
   942                           ;trans_ctrl.c: 499: else (signal_0_7.b1 = 0);
   943                           
   944                           
   945                           ;trans_ctrl.c: 504: if (systeml_flags1.b0) (signal_0_7.b1 = 1);
   946  0DD6  1C79               	btfss	_systeml_flags1,0
   947  0DD7  2DDA               	goto	l550
   948  0DD8                     l5920:	
   949  0DD8  14DE               	bsf	_signal_0_7,1
   950  0DD9  2E01               	goto	l5938
   951  0DDA                     l550:	
   952                           
   953                           ;trans_ctrl.c: 505: else (signal_0_7.b1 = 0);
   954  0DDA  10DE               	bcf	_signal_0_7,1
   955                           
   956                           ;trans_ctrl.c: 507: }
   957                           
   958                           ;trans_ctrl.c: 506: break;
   959  0DDB  2E01               	goto	l5938
   960  0DDC                     l5924:	
   961  0DDC  084A               	movf	_feeder2_state,w
   962                           
   963                           ; Switch size 1, requested type "space"
   964                           ; Number of cases is 4, Range of values is 0 to 3
   965                           ; switch strategies available:
   966                           ; Name         Instructions Cycles
   967                           ; simple_byte           13     7 (average)
   968                           ; direct_byte           14     6 (fixed)
   969                           ; jumptable            260     6 (fixed)
   970                           ;	Chosen strategy is simple_byte
   971  0DDD  3A00               	xorlw	0	; case 0
   972  0DDE  1903               	skipnz
   973  0DDF  2DC6               	goto	l535
   974  0DE0  3A01               	xorlw	1	; case 1
   975  0DE1  1903               	skipnz
   976  0DE2  2DC7               	goto	l537
   977  0DE3  3A03               	xorlw	3	; case 2
   978  0DE4  1903               	skipnz
   979  0DE5  2DC8               	goto	l5912
   980  0DE6  3A01               	xorlw	1	; case 3
   981  0DE7  1903               	skipnz
   982  0DE8  2DD6               	goto	l549
   983  0DE9  2E01               	goto	l5938
   984                           
   985                           ;trans_ctrl.c: 511: switch (feeder3_state) {
   986  0DEA  2E01               	goto	l5938
   987  0DEB                     l553:	
   988                           ;trans_ctrl.c: 513: case FEEDER3_OFF:
   989                           
   990  0DEB  2DFF               	goto	l568
   991  0DEC                     l555:	
   992                           ;trans_ctrl.c: 517: case FEEDER3_DISCHARGING:
   993                           
   994                           ;trans_ctrl.c: 515: break;
   995                           
   996                           ;trans_ctrl.c: 514: (signal_0_7.b2 = 0);
   997                           
   998  0DEC  2DFD               	goto	l5934
   999  0DED                     l5926:	
  1000                           ;trans_ctrl.c: 521: case FEEDER3_CHARGING:
  1001                           
  1002                           ;trans_ctrl.c: 519: break;
  1003                           
  1004                           ;trans_ctrl.c: 518: (signal_0_7.b2 = 1);
  1005                           
  1006                           
  1007                           ;trans_ctrl.c: 522: if ((activ_unit != FEEDER3) || !(vacum_pump1_flags1.b3 == 1)) {
  1008  0DED  0838               	movf	_activ_unit,w
  1009  0DEE  3A02               	xorlw	2
  1010  0DEF  1D03               	skipz
  1011  0DF0  2DF3               	goto	l559
  1012  0DF1  19FB               	btfsc	_vacum_pump1_flags1,3
  1013  0DF2  2DF6               	goto	l557
  1014  0DF3                     l559:	
  1015                           
  1016                           ;trans_ctrl.c: 523: if (systeml_flags1.b2) (signal_0_7.b2 = 1);
  1017  0DF3  1D79               	btfss	_systeml_flags1,2
  1018  0DF4  2DFF               	goto	l568
  1019  0DF5  2DFD               	goto	l5934
  1020  0DF6                     l557:	
  1021                           ;trans_ctrl.c: 525: } else {
  1022                           
  1023                           ;trans_ctrl.c: 524: else (signal_0_7.b2 = 0);
  1024                           
  1025                           
  1026                           ;trans_ctrl.c: 526: if (systeml_flags1.b2 || systeml_flags1.b1) (signal_0_7.b2 = 1);
  1027  0DF6  1979               	btfsc	_systeml_flags1,2
  1028  0DF7  2DFD               	goto	l5934
  1029  0DF8  1CF9               	btfss	_systeml_flags1,1
  1030  0DF9  2DFF               	goto	l568
  1031  0DFA  2DFD               	goto	l5934
  1032  0DFB                     l567:	
  1033                           ;trans_ctrl.c: 531: case FEEDER3_ERROR:
  1034                           
  1035                           ;trans_ctrl.c: 528: }
  1036                           ;trans_ctrl.c: 529: break;
  1037                           
  1038                           ;trans_ctrl.c: 527: else (signal_0_7.b2 = 0);
  1039                           
  1040                           
  1041                           ;trans_ctrl.c: 532: if (systeml_flags1.b0) (signal_0_7.b2 = 1);
  1042  0DFB  1C79               	btfss	_systeml_flags1,0
  1043  0DFC  2DFF               	goto	l568
  1044  0DFD                     l5934:	
  1045  0DFD  155E               	bsf	_signal_0_7,2
  1046  0DFE  2E26               	goto	l5952
  1047  0DFF                     l568:	
  1048                           
  1049                           ;trans_ctrl.c: 533: else (signal_0_7.b2 = 0);
  1050  0DFF  115E               	bcf	_signal_0_7,2
  1051                           
  1052                           ;trans_ctrl.c: 535: }
  1053                           
  1054                           ;trans_ctrl.c: 534: break;
  1055  0E00  2E26               	goto	l5952
  1056  0E01                     l5938:	
  1057  0E01  084D               	movf	_feeder3_state,w
  1058                           
  1059                           ; Switch size 1, requested type "space"
  1060                           ; Number of cases is 4, Range of values is 0 to 3
  1061                           ; switch strategies available:
  1062                           ; Name         Instructions Cycles
  1063                           ; simple_byte           13     7 (average)
  1064                           ; direct_byte           14     6 (fixed)
  1065                           ; jumptable            260     6 (fixed)
  1066                           ;	Chosen strategy is simple_byte
  1067  0E02  3A00               	xorlw	0	; case 0
  1068  0E03  1903               	skipnz
  1069  0E04  2DEB               	goto	l553
  1070  0E05  3A01               	xorlw	1	; case 1
  1071  0E06  1903               	skipnz
  1072  0E07  2DEC               	goto	l555
  1073  0E08  3A03               	xorlw	3	; case 2
  1074  0E09  1903               	skipnz
  1075  0E0A  2DED               	goto	l5926
  1076  0E0B  3A01               	xorlw	1	; case 3
  1077  0E0C  1903               	skipnz
  1078  0E0D  2DFB               	goto	l567
  1079  0E0E  2E26               	goto	l5952
  1080                           
  1081                           ;trans_ctrl.c: 539: switch (feeder4_state) {
  1082  0E0F  2E26               	goto	l5952
  1083  0E10                     l571:	
  1084                           ;trans_ctrl.c: 541: case FEEDER4_OFF:
  1085                           
  1086  0E10  2E24               	goto	l586
  1087  0E11                     l573:	
  1088                           ;trans_ctrl.c: 545: case FEEDER4_DISCHARGING:
  1089                           
  1090                           ;trans_ctrl.c: 543: break;
  1091                           
  1092                           ;trans_ctrl.c: 542: (signal_0_7.b3 = 0);
  1093                           
  1094  0E11  2E22               	goto	l5948
  1095  0E12                     l5940:	
  1096                           ;trans_ctrl.c: 549: case FEEDER4_CHARGING:
  1097                           
  1098                           ;trans_ctrl.c: 547: break;
  1099                           
  1100                           ;trans_ctrl.c: 546: (signal_0_7.b3 = 1);
  1101                           
  1102                           
  1103                           ;trans_ctrl.c: 550: if ((activ_unit != FEEDER4) || !(vacum_pump1_flags1.b3 == 1)) {
  1104  0E12  0838               	movf	_activ_unit,w
  1105  0E13  3A03               	xorlw	3
  1106  0E14  1D03               	skipz
  1107  0E15  2E18               	goto	l577
  1108  0E16  19FB               	btfsc	_vacum_pump1_flags1,3
  1109  0E17  2E1B               	goto	l575
  1110  0E18                     l577:	
  1111                           
  1112                           ;trans_ctrl.c: 551: if (systeml_flags1.b2) (signal_0_7.b3 = 1);
  1113  0E18  1D79               	btfss	_systeml_flags1,2
  1114  0E19  2E24               	goto	l586
  1115  0E1A  2E22               	goto	l5948
  1116  0E1B                     l575:	
  1117                           ;trans_ctrl.c: 553: } else {
  1118                           
  1119                           ;trans_ctrl.c: 552: else (signal_0_7.b3 = 0);
  1120                           
  1121                           
  1122                           ;trans_ctrl.c: 554: if (systeml_flags1.b2 || systeml_flags1.b1) (signal_0_7.b3 = 1);
  1123  0E1B  1979               	btfsc	_systeml_flags1,2
  1124  0E1C  2E22               	goto	l5948
  1125  0E1D  1CF9               	btfss	_systeml_flags1,1
  1126  0E1E  2E24               	goto	l586
  1127  0E1F  2E22               	goto	l5948
  1128  0E20                     l585:	
  1129                           ;trans_ctrl.c: 559: case FEEDER4_ERROR:
  1130                           
  1131                           ;trans_ctrl.c: 556: }
  1132                           ;trans_ctrl.c: 557: break;
  1133                           
  1134                           ;trans_ctrl.c: 555: else (signal_0_7.b3 = 0);
  1135                           
  1136                           
  1137                           ;trans_ctrl.c: 560: if (systeml_flags1.b0) (signal_0_7.b3 = 1);
  1138  0E20  1C79               	btfss	_systeml_flags1,0
  1139  0E21  2E24               	goto	l586
  1140  0E22                     l5948:	
  1141  0E22  15DE               	bsf	_signal_0_7,3
  1142  0E23  2E4B               	goto	l5966
  1143  0E24                     l586:	
  1144                           
  1145                           ;trans_ctrl.c: 561: else (signal_0_7.b3 = 0);
  1146  0E24  11DE               	bcf	_signal_0_7,3
  1147                           
  1148                           ;trans_ctrl.c: 563: }
  1149                           
  1150                           ;trans_ctrl.c: 562: break;
  1151  0E25  2E4B               	goto	l5966
  1152  0E26                     l5952:	
  1153  0E26  0850               	movf	_feeder4_state,w
  1154                           
  1155                           ; Switch size 1, requested type "space"
  1156                           ; Number of cases is 4, Range of values is 0 to 3
  1157                           ; switch strategies available:
  1158                           ; Name         Instructions Cycles
  1159                           ; simple_byte           13     7 (average)
  1160                           ; direct_byte           14     6 (fixed)
  1161                           ; jumptable            260     6 (fixed)
  1162                           ;	Chosen strategy is simple_byte
  1163  0E27  3A00               	xorlw	0	; case 0
  1164  0E28  1903               	skipnz
  1165  0E29  2E10               	goto	l571
  1166  0E2A  3A01               	xorlw	1	; case 1
  1167  0E2B  1903               	skipnz
  1168  0E2C  2E11               	goto	l573
  1169  0E2D  3A03               	xorlw	3	; case 2
  1170  0E2E  1903               	skipnz
  1171  0E2F  2E12               	goto	l5940
  1172  0E30  3A01               	xorlw	1	; case 3
  1173  0E31  1903               	skipnz
  1174  0E32  2E20               	goto	l585
  1175  0E33  2E4B               	goto	l5966
  1176                           
  1177                           ;trans_ctrl.c: 567: switch (feeder5_state) {
  1178  0E34  2E4B               	goto	l5966
  1179  0E35                     l589:	
  1180                           ;trans_ctrl.c: 569: case FEEDER5_OFF:
  1181                           
  1182  0E35  2E49               	goto	l604
  1183  0E36                     l591:	
  1184                           ;trans_ctrl.c: 573: case FEEDER5_DISCHARGING:
  1185                           
  1186                           ;trans_ctrl.c: 571: break;
  1187                           
  1188                           ;trans_ctrl.c: 570: (signal_0_7.b4 = 0);
  1189                           
  1190  0E36  2E47               	goto	l5962
  1191  0E37                     l5954:	
  1192                           ;trans_ctrl.c: 577: case FEEDER5_CHARGING:
  1193                           
  1194                           ;trans_ctrl.c: 575: break;
  1195                           
  1196                           ;trans_ctrl.c: 574: (signal_0_7.b4 = 1);
  1197                           
  1198                           
  1199                           ;trans_ctrl.c: 578: if ((activ_unit != FEEDER5) || !(vacum_pump1_flags1.b3 == 1)) {
  1200  0E37  0838               	movf	_activ_unit,w
  1201  0E38  3A04               	xorlw	4
  1202  0E39  1D03               	skipz
  1203  0E3A  2E3D               	goto	l595
  1204  0E3B  19FB               	btfsc	_vacum_pump1_flags1,3
  1205  0E3C  2E40               	goto	l593
  1206  0E3D                     l595:	
  1207                           
  1208                           ;trans_ctrl.c: 579: if (systeml_flags1.b2) (signal_0_7.b4 = 1);
  1209  0E3D  1D79               	btfss	_systeml_flags1,2
  1210  0E3E  2E49               	goto	l604
  1211  0E3F  2E47               	goto	l5962
  1212  0E40                     l593:	
  1213                           ;trans_ctrl.c: 581: } else {
  1214                           
  1215                           ;trans_ctrl.c: 580: else (signal_0_7.b4 = 0);
  1216                           
  1217                           
  1218                           ;trans_ctrl.c: 582: if (systeml_flags1.b2 || systeml_flags1.b1) (signal_0_7.b4 = 1);
  1219  0E40  1979               	btfsc	_systeml_flags1,2
  1220  0E41  2E47               	goto	l5962
  1221  0E42  1CF9               	btfss	_systeml_flags1,1
  1222  0E43  2E49               	goto	l604
  1223  0E44  2E47               	goto	l5962
  1224  0E45                     l603:	
  1225                           ;trans_ctrl.c: 587: case FEEDER5_ERROR:
  1226                           
  1227                           ;trans_ctrl.c: 584: }
  1228                           ;trans_ctrl.c: 585: break;
  1229                           
  1230                           ;trans_ctrl.c: 583: else (signal_0_7.b4 = 0);
  1231                           
  1232                           
  1233                           ;trans_ctrl.c: 588: if (systeml_flags1.b0) (signal_0_7.b4 = 1);
  1234  0E45  1C79               	btfss	_systeml_flags1,0
  1235  0E46  2E49               	goto	l604
  1236  0E47                     l5962:	
  1237  0E47  165E               	bsf	_signal_0_7,4
  1238  0E48  2E70               	goto	l5980
  1239  0E49                     l604:	
  1240                           
  1241                           ;trans_ctrl.c: 589: else (signal_0_7.b4 = 0);
  1242  0E49  125E               	bcf	_signal_0_7,4
  1243                           
  1244                           ;trans_ctrl.c: 591: }
  1245                           
  1246                           ;trans_ctrl.c: 590: break;
  1247  0E4A  2E70               	goto	l5980
  1248  0E4B                     l5966:	
  1249  0E4B  0853               	movf	_feeder5_state,w
  1250                           
  1251                           ; Switch size 1, requested type "space"
  1252                           ; Number of cases is 4, Range of values is 0 to 3
  1253                           ; switch strategies available:
  1254                           ; Name         Instructions Cycles
  1255                           ; simple_byte           13     7 (average)
  1256                           ; direct_byte           14     6 (fixed)
  1257                           ; jumptable            260     6 (fixed)
  1258                           ;	Chosen strategy is simple_byte
  1259  0E4C  3A00               	xorlw	0	; case 0
  1260  0E4D  1903               	skipnz
  1261  0E4E  2E35               	goto	l589
  1262  0E4F  3A01               	xorlw	1	; case 1
  1263  0E50  1903               	skipnz
  1264  0E51  2E36               	goto	l591
  1265  0E52  3A03               	xorlw	3	; case 2
  1266  0E53  1903               	skipnz
  1267  0E54  2E37               	goto	l5954
  1268  0E55  3A01               	xorlw	1	; case 3
  1269  0E56  1903               	skipnz
  1270  0E57  2E45               	goto	l603
  1271  0E58  2E70               	goto	l5980
  1272                           
  1273                           ;trans_ctrl.c: 595: switch (feeder_coex_state) {
  1274  0E59  2E70               	goto	l5980
  1275  0E5A                     l607:	
  1276                           ;trans_ctrl.c: 597: case FEEDER_COEX_OFF:
  1277                           
  1278  0E5A  2E6E               	goto	l622
  1279  0E5B                     l609:	
  1280                           ;trans_ctrl.c: 601: case FEEDER_COEX_DISCHARGING:
  1281                           
  1282                           ;trans_ctrl.c: 599: break;
  1283                           
  1284                           ;trans_ctrl.c: 598: (signal_0_7.b5 = 0);
  1285                           
  1286  0E5B  2E6C               	goto	l5976
  1287  0E5C                     l5968:	
  1288                           ;trans_ctrl.c: 605: case FEEDER_COEX_CHARGING:
  1289                           
  1290                           ;trans_ctrl.c: 603: break;
  1291                           
  1292                           ;trans_ctrl.c: 602: (signal_0_7.b5 = 1);
  1293                           
  1294                           
  1295                           ;trans_ctrl.c: 606: if ((activ_unit != FEEDER_COEX) || !(vacum_pump1_flags1.b3 == 1)) {
  1296  0E5C  0838               	movf	_activ_unit,w
  1297  0E5D  3A05               	xorlw	5
  1298  0E5E  1D03               	skipz
  1299  0E5F  2E62               	goto	l613
  1300  0E60  19FB               	btfsc	_vacum_pump1_flags1,3
  1301  0E61  2E65               	goto	l611
  1302  0E62                     l613:	
  1303                           
  1304                           ;trans_ctrl.c: 607: if (systeml_flags1.b2) (signal_0_7.b5 = 1);
  1305  0E62  1D79               	btfss	_systeml_flags1,2
  1306  0E63  2E6E               	goto	l622
  1307  0E64  2E6C               	goto	l5976
  1308  0E65                     l611:	
  1309                           ;trans_ctrl.c: 609: } else {
  1310                           
  1311                           ;trans_ctrl.c: 608: else (signal_0_7.b5 = 0);
  1312                           
  1313                           
  1314                           ;trans_ctrl.c: 610: if (systeml_flags1.b2 || systeml_flags1.b1) (signal_0_7.b5 = 1);
  1315  0E65  1979               	btfsc	_systeml_flags1,2
  1316  0E66  2E6C               	goto	l5976
  1317  0E67  1CF9               	btfss	_systeml_flags1,1
  1318  0E68  2E6E               	goto	l622
  1319  0E69  2E6C               	goto	l5976
  1320  0E6A                     l621:	
  1321                           ;trans_ctrl.c: 615: case FEEDER_COEX_ERROR:
  1322                           
  1323                           ;trans_ctrl.c: 612: }
  1324                           ;trans_ctrl.c: 613: break;
  1325                           
  1326                           ;trans_ctrl.c: 611: else (signal_0_7.b5 = 0);
  1327                           
  1328                           
  1329                           ;trans_ctrl.c: 616: if (systeml_flags1.b0) (signal_0_7.b5 = 1);
  1330  0E6A  1C79               	btfss	_systeml_flags1,0
  1331  0E6B  2E6E               	goto	l622
  1332  0E6C                     l5976:	
  1333  0E6C  16DE               	bsf	_signal_0_7,5
  1334  0E6D  2E8E               	goto	l5994
  1335  0E6E                     l622:	
  1336                           
  1337                           ;trans_ctrl.c: 617: else (signal_0_7.b5 = 0);
  1338  0E6E  12DE               	bcf	_signal_0_7,5
  1339                           
  1340                           ;trans_ctrl.c: 619: }
  1341                           
  1342                           ;trans_ctrl.c: 618: break;
  1343  0E6F  2E8E               	goto	l5994
  1344  0E70                     l5980:	
  1345  0E70  0856               	movf	_feeder_coex_state,w
  1346                           
  1347                           ; Switch size 1, requested type "space"
  1348                           ; Number of cases is 4, Range of values is 0 to 3
  1349                           ; switch strategies available:
  1350                           ; Name         Instructions Cycles
  1351                           ; simple_byte           13     7 (average)
  1352                           ; direct_byte           14     6 (fixed)
  1353                           ; jumptable            260     6 (fixed)
  1354                           ;	Chosen strategy is simple_byte
  1355  0E71  3A00               	xorlw	0	; case 0
  1356  0E72  1903               	skipnz
  1357  0E73  2E5A               	goto	l607
  1358  0E74  3A01               	xorlw	1	; case 1
  1359  0E75  1903               	skipnz
  1360  0E76  2E5B               	goto	l609
  1361  0E77  3A03               	xorlw	3	; case 2
  1362  0E78  1903               	skipnz
  1363  0E79  2E5C               	goto	l5968
  1364  0E7A  3A01               	xorlw	1	; case 3
  1365  0E7B  1903               	skipnz
  1366  0E7C  2E6A               	goto	l621
  1367  0E7D  2E8E               	goto	l5994
  1368                           
  1369                           ;trans_ctrl.c: 622: switch (vacum_pump1_state) {
  1370  0E7E  2E8E               	goto	l5994
  1371  0E7F                     l625:	
  1372                           ;trans_ctrl.c: 624: case VP1_OFF:
  1373                           
  1374  0E7F  2E8C               	goto	l639
  1375  0E80                     l627:	
  1376                           ;trans_ctrl.c: 628: case VP1_START:
  1377                           
  1378                           ;trans_ctrl.c: 626: break;
  1379                           
  1380                           ;trans_ctrl.c: 625: (signal_0_7.b6 = 0);
  1381                           
  1382  0E80                     l630:	
  1383                           ;trans_ctrl.c: 633: case VP1_IDLE:
  1384                           
  1385                           ;trans_ctrl.c: 631: break;
  1386                           
  1387                           ;trans_ctrl.c: 630: else (signal_0_7.b6 = 0);
  1388                           
  1389                           ;trans_ctrl.c: 629: if (systeml_flags1.b2) (signal_0_7.b6 = 1);
  1390                           
  1391                           
  1392                           ;trans_ctrl.c: 634: if (systeml_flags1.b2) (signal_0_7.b6 = 1);
  1393  0E80  1979               	btfsc	_systeml_flags1,2
  1394  0E81  2E8A               	goto	l5990
  1395  0E82  2E8C               	goto	l639
  1396  0E83                     l633:	
  1397                           ;trans_ctrl.c: 638: case VP1_RUN:
  1398                           
  1399                           ;trans_ctrl.c: 636: break;
  1400                           
  1401                           ;trans_ctrl.c: 635: else (signal_0_7.b6 = 0);
  1402                           
  1403                           
  1404                           ;trans_ctrl.c: 639: if (!(vacum_pump1_flags1.b3 == 1)) {
  1405  0E83  19FB               	btfsc	_vacum_pump1_flags1,3
  1406  0E84  2E8A               	goto	l5990
  1407                           
  1408                           ;trans_ctrl.c: 640: if (systeml_flags1.b2) (signal_0_7.b6 = 1);
  1409  0E85  1D79               	btfss	_systeml_flags1,2
  1410  0E86  2E8C               	goto	l639
  1411  0E87  2E8A               	goto	l5990
  1412  0E88                     l638:	
  1413                           ;trans_ctrl.c: 645: case VP1_ERROR:
  1414                           
  1415                           ;trans_ctrl.c: 643: break;
  1416                           
  1417                           ;trans_ctrl.c: 642: } else (signal_0_7.b6 = 1);
  1418                           
  1419                           ;trans_ctrl.c: 641: else (signal_0_7.b6 = 0);
  1420                           
  1421                           
  1422                           ;trans_ctrl.c: 646: if (systeml_flags1.b0) (signal_0_7.b6 = 1);
  1423  0E88  1C79               	btfss	_systeml_flags1,0
  1424  0E89  2E8C               	goto	l639
  1425  0E8A                     l5990:	
  1426  0E8A  175E               	bsf	_signal_0_7,6
  1427  0E8B  2E98               	goto	l626
  1428  0E8C                     l639:	
  1429                           
  1430                           ;trans_ctrl.c: 647: else (signal_0_7.b6 = 0);
  1431  0E8C  135E               	bcf	_signal_0_7,6
  1432                           
  1433                           ;trans_ctrl.c: 649: }
  1434                           
  1435                           ;trans_ctrl.c: 648: break;
  1436  0E8D  2E98               	goto	l626
  1437  0E8E                     l5994:	
  1438  0E8E  086B               	movf	_vacum_pump1_state,w
  1439                           
  1440                           ; Switch size 1, requested type "space"
  1441                           ; Number of cases is 5, Range of values is 0 to 4
  1442                           ; switch strategies available:
  1443                           ; Name         Instructions Cycles
  1444                           ; direct_byte           16     6 (fixed)
  1445                           ; simple_byte           16     9 (average)
  1446                           ; jumptable            260     6 (fixed)
  1447                           ;	Chosen strategy is direct_byte
  1448  0E8F  0084               	movwf	4
  1449  0E90  3005               	movlw	5
  1450  0E91  0204               	subwf	4,w
  1451  0E92  1803               	skipnc
  1452  0E93  2E98               	goto	l626
  1453  0E94  3188               	movlp	high S6934
  1454  0E95  3504               	lslf	4,w
  1455  0E96  3E00               	addlw	low S6934
  1456  0E97  0082               	movwf	2
  1457  0E98                     l626:	
  1458                           
  1459                           ;trans_ctrl.c: 652: if (!(input_0_7.b4 == 0)) {
  1460  0E98  1A57               	btfsc	_input_0_7,4
  1461                           
  1462                           ;trans_ctrl.c: 653: if (systeml_flags1.b0) (signal_0_7.b7 = 1);
  1463  0E99  1879               	btfsc	_systeml_flags1,0
  1464  0E9A  2E9D               	goto	l641
  1465                           
  1466                           ;trans_ctrl.c: 654: else (signal_0_7.b7 = 0);
  1467  0E9B  13DE               	bcf	_signal_0_7,7
  1468                           
  1469                           ;trans_ctrl.c: 655: } else (signal_0_7.b7 = 1);
  1470  0E9C  2E9E               	goto	l644
  1471  0E9D                     l641:	
  1472  0E9D  17DE               	bsf	_signal_0_7,7
  1473  0E9E                     l644:	
  1474                           
  1475                           ;trans_ctrl.c: 686: if (!(vacum_pump1_flags2.b0 == 1) && !(vacum_pump1_flags2.b2 == 1) &
      +                          & !(vacum_pump1_flags2.b1 == 1) && !(feeder1_flags1.b0 == 1) && !(feeder1_flags1.b1 == 1
      +                          ) && !(feeder2_flags1.b0 == 1) && !(feeder2_flags1.b1 == 1) && !(feeder3_flags1.b0 == 1)
      +                           && !(
  1476  0E9E  1C6A               	btfss	_vacum_pump1_flags2,0
  1477  0E9F  196A               	btfsc	_vacum_pump1_flags2,2
  1478  0EA0  2EBA               	goto	l6036
  1479  0EA1  1CEA               	btfss	_vacum_pump1_flags2,1
  1480  0EA2  1845               	btfsc	_feeder1_flags1,0
  1481  0EA3  2EBA               	goto	l6036
  1482  0EA4  1CC5               	btfss	_feeder1_flags1,1
  1483  0EA5  1848               	btfsc	_feeder2_flags1,0
  1484  0EA6  2EBA               	goto	l6036
  1485  0EA7  1CC8               	btfss	_feeder2_flags1,1
  1486  0EA8  184B               	btfsc	_feeder3_flags1,0
  1487  0EA9  2EBA               	goto	l6036
  1488  0EAA  1CCB               	btfss	_feeder3_flags1,1
  1489  0EAB  184E               	btfsc	_feeder4_flags1,0
  1490  0EAC  2EBA               	goto	l6036
  1491  0EAD  1C51               	btfss	_feeder5_flags1,0
  1492  0EAE  18D1               	btfsc	_feeder5_flags1,1
  1493  0EAF  2EBA               	goto	l6036
  1494  0EB0  1C54               	btfss	_feeder_coex_flags1,0
  1495  0EB1  18D4               	btfsc	_feeder_coex_flags1,1
  1496  0EB2  2EBA               	goto	l6036
  1497  0EB3  1CCE               	btfss	_feeder4_flags1,1
  1498  0EB4  1841               	btfsc	_cyclon_flags1,0
  1499  0EB5  2EBA               	goto	l6036
  1500  0EB6  1ADC               	btfsc	_output_8_15,5
  1501  0EB7  1A57               	btfsc	_input_0_7,4
  1502  0EB8  2EBA               	goto	l6036
  1503                           
  1504                           ;trans_ctrl.c: 692: (signal_8_15._byte = 0x00);
  1505  0EB9  01DF               	clrf	_signal_8_15
  1506  0EBA                     l6036:	
  1507                           
  1508                           ;trans_ctrl.c: 693: }
  1509                           ;trans_ctrl.c: 694: if (!(timer_flags1.b5 == 1)) {
  1510  0EBA  1EFA               	btfss	_timer_flags1,5
  1511  0EBB  2FDD               	goto	l6328
  1512                           
  1513                           ;trans_ctrl.c: 697: if (error_display_pcnt == 0) {
  1514                           
  1515                           ;trans_ctrl.c: 696: } else {
  1516  0EBC  08C4               	movf	_error_display_pcnt,f
  1517  0EBD  1D03               	skipz
  1518  0EBE  2EC7               	goto	l6058
  1519                           
  1520                           ;trans_ctrl.c: 698: if ((vacum_pump1_flags2.b0 == 1)) {
  1521  0EBF  1C6A               	btfss	_vacum_pump1_flags2,0
  1522  0EC0  2FB9               	goto	l6310
  1523                           
  1524                           ;trans_ctrl.c: 699: ((signal_8_15._byte &= 0xf0), (signal_8_15.b0 = 1),(signal_8_15.b1 =
      +                           1),(signal_8_15.b2 = 1));
  1525  0EC1  30F0               	movlw	240
  1526  0EC2  00F6               	movwf	??_SetSignalOutput
  1527  0EC3  0876               	movf	??_SetSignalOutput,w
  1528  0EC4  05DF               	andwf	_signal_8_15,f
  1529  0EC5  145F               	bsf	_signal_8_15,0
  1530  0EC6  2F73               	goto	L17
  1531  0EC7                     l6058:	
  1532                           ;trans_ctrl.c: 704: } else if (error_display_pcnt == 1) {
  1533                           
  1534                           ;trans_ctrl.c: 702: }
  1535                           ;trans_ctrl.c: 703: ++error_display_pcnt;
  1536                           
  1537                           ;trans_ctrl.c: 701: SetTimer(ERROR_DISPLAY_TMR, 500);
  1538                           
  1539                           ;trans_ctrl.c: 700: ((signal_8_15._byte &= 0x0f), (signal_8_15.b5 = 1));
  1540                           
  1541  0EC7  0844               	movf	_error_display_pcnt,w
  1542  0EC8  3A01               	xorlw	1
  1543  0EC9  1D03               	skipz
  1544  0ECA  2ED9               	goto	l6076
  1545                           
  1546                           ;trans_ctrl.c: 705: if ((vacum_pump1_flags2.b2 == 1)) {
  1547  0ECB  1D6A               	btfss	_vacum_pump1_flags2,2
  1548  0ECC  2FB9               	goto	l6310
  1549                           
  1550                           ;trans_ctrl.c: 706: ((signal_8_15._byte &= 0xf0), (signal_8_15.b0 = 1),(signal_8_15.b1 =
      +                           1),(signal_8_15.b2 = 1));
  1551  0ECD  30F0               	movlw	240
  1552  0ECE  00F6               	movwf	??_SetSignalOutput
  1553  0ECF  0876               	movf	??_SetSignalOutput,w
  1554  0ED0  05DF               	andwf	_signal_8_15,f
  1555  0ED1  145F               	bsf	_signal_8_15,0
  1556  0ED2  14DF               	bsf	_signal_8_15,1
  1557  0ED3  155F               	bsf	_signal_8_15,2
  1558                           
  1559                           ;trans_ctrl.c: 707: ((signal_8_15._byte &= 0x0f), (signal_8_15.b6 = 1));
  1560  0ED4  300F               	movlw	15
  1561  0ED5  00F6               	movwf	??_SetSignalOutput
  1562  0ED6  0876               	movf	??_SetSignalOutput,w
  1563  0ED7  05DF               	andwf	_signal_8_15,f
  1564  0ED8  2FAD               	goto	L8
  1565  0ED9                     l6076:	
  1566                           ;trans_ctrl.c: 711: } else if (error_display_pcnt == 2) {
  1567                           
  1568                           ;trans_ctrl.c: 709: }
  1569                           ;trans_ctrl.c: 710: ++error_display_pcnt;
  1570                           
  1571                           ;trans_ctrl.c: 708: SetTimer(ERROR_DISPLAY_TMR, 500);
  1572                           
  1573  0ED9  0844               	movf	_error_display_pcnt,w
  1574  0EDA  3A02               	xorlw	2
  1575  0EDB  1D03               	skipz
  1576  0EDC  2EEC               	goto	l6096
  1577                           
  1578                           ;trans_ctrl.c: 712: if ((vacum_pump1_flags2.b1 == 1)) {
  1579  0EDD  1CEA               	btfss	_vacum_pump1_flags2,1
  1580  0EDE  2FB9               	goto	l6310
  1581                           
  1582                           ;trans_ctrl.c: 713: ((signal_8_15._byte &= 0xf0), (signal_8_15.b0 = 1),(signal_8_15.b1 =
      +                           1),(signal_8_15.b2 = 1));
  1583  0EDF  30F0               	movlw	240
  1584  0EE0  00F6               	movwf	??_SetSignalOutput
  1585  0EE1  0876               	movf	??_SetSignalOutput,w
  1586  0EE2  05DF               	andwf	_signal_8_15,f
  1587  0EE3  145F               	bsf	_signal_8_15,0
  1588  0EE4  14DF               	bsf	_signal_8_15,1
  1589  0EE5  155F               	bsf	_signal_8_15,2
  1590                           
  1591                           ;trans_ctrl.c: 714: ((signal_8_15._byte &= 0x0f), (signal_8_15.b4 = 1),(signal_8_15.b6 =
      +                           1));
  1592  0EE6  300F               	movlw	15
  1593  0EE7  00F6               	movwf	??_SetSignalOutput
  1594  0EE8  0876               	movf	??_SetSignalOutput,w
  1595  0EE9  05DF               	andwf	_signal_8_15,f
  1596  0EEA  165F               	bsf	_signal_8_15,4
  1597  0EEB  2FAD               	goto	L8
  1598  0EEC                     l6096:	
  1599                           ;trans_ctrl.c: 718: } else if (error_display_pcnt == 3) {
  1600                           
  1601                           ;trans_ctrl.c: 716: }
  1602                           ;trans_ctrl.c: 717: ++error_display_pcnt;
  1603                           
  1604                           ;trans_ctrl.c: 715: SetTimer(ERROR_DISPLAY_TMR, 500);
  1605                           
  1606  0EEC  0844               	movf	_error_display_pcnt,w
  1607  0EED  3A03               	xorlw	3
  1608  0EEE  1D03               	skipz
  1609  0EEF  2EF8               	goto	l6110
  1610                           
  1611                           ;trans_ctrl.c: 719: if ((feeder1_flags1.b0 == 1)) {
  1612  0EF0  1C45               	btfss	_feeder1_flags1,0
  1613  0EF1  2FB9               	goto	l6310
  1614                           
  1615                           ;trans_ctrl.c: 720: ((signal_8_15._byte &= 0xf0), (signal_8_15.b0 = 1));
  1616  0EF2  30F0               	movlw	240
  1617  0EF3  00F6               	movwf	??_SetSignalOutput
  1618  0EF4  0876               	movf	??_SetSignalOutput,w
  1619  0EF5  05DF               	andwf	_signal_8_15,f
  1620  0EF6  145F               	bsf	_signal_8_15,0
  1621  0EF7  2F63               	goto	L12
  1622  0EF8                     l6110:	
  1623                           ;trans_ctrl.c: 725: } else if (error_display_pcnt == 4) {
  1624                           
  1625                           ;trans_ctrl.c: 723: }
  1626                           ;trans_ctrl.c: 724: ++error_display_pcnt;
  1627                           
  1628                           ;trans_ctrl.c: 722: SetTimer(ERROR_DISPLAY_TMR, 500);
  1629                           
  1630                           ;trans_ctrl.c: 721: ((signal_8_15._byte &= 0x0f), (signal_8_15.b4 = 1));
  1631                           
  1632  0EF8  0844               	movf	_error_display_pcnt,w
  1633  0EF9  3A04               	xorlw	4
  1634  0EFA  1D03               	skipz
  1635  0EFB  2F04               	goto	l6124
  1636                           
  1637                           ;trans_ctrl.c: 726: if ((feeder1_flags1.b1 == 1)) {
  1638  0EFC  1CC5               	btfss	_feeder1_flags1,1
  1639  0EFD  2FB9               	goto	l6310
  1640                           
  1641                           ;trans_ctrl.c: 727: ((signal_8_15._byte &= 0xf0), (signal_8_15.b0 = 1));
  1642  0EFE  30F0               	movlw	240
  1643  0EFF  00F6               	movwf	??_SetSignalOutput
  1644  0F00  0876               	movf	??_SetSignalOutput,w
  1645  0F01  05DF               	andwf	_signal_8_15,f
  1646  0F02  145F               	bsf	_signal_8_15,0
  1647  0F03  2F75               	goto	L5
  1648  0F04                     l6124:	
  1649                           ;trans_ctrl.c: 732: } else if (error_display_pcnt == 5) {
  1650                           
  1651                           ;trans_ctrl.c: 730: }
  1652                           ;trans_ctrl.c: 731: ++error_display_pcnt;
  1653                           
  1654                           ;trans_ctrl.c: 729: SetTimer(ERROR_DISPLAY_TMR, 500);
  1655                           
  1656                           ;trans_ctrl.c: 728: ((signal_8_15._byte &= 0x0f), (signal_8_15.b5 = 1));
  1657                           
  1658  0F04  0844               	movf	_error_display_pcnt,w
  1659  0F05  3A05               	xorlw	5
  1660  0F06  1D03               	skipz
  1661  0F07  2F0F               	goto	l6138
  1662                           
  1663                           ;trans_ctrl.c: 733: if ((feeder2_flags1.b0 == 1)) {
  1664  0F08  1C48               	btfss	_feeder2_flags1,0
  1665  0F09  2FB9               	goto	l6310
  1666                           
  1667                           ;trans_ctrl.c: 734: ((signal_8_15._byte &= 0xf0), (signal_8_15.b1 = 1));
  1668  0F0A  30F0               	movlw	240
  1669  0F0B  00F6               	movwf	??_SetSignalOutput
  1670  0F0C  0876               	movf	??_SetSignalOutput,w
  1671  0F0D  05DF               	andwf	_signal_8_15,f
  1672  0F0E  2F25               	goto	L15
  1673  0F0F                     l6138:	
  1674                           ;trans_ctrl.c: 739: } else if (error_display_pcnt == 6) {
  1675                           
  1676                           ;trans_ctrl.c: 737: }
  1677                           ;trans_ctrl.c: 738: ++error_display_pcnt;
  1678                           
  1679                           ;trans_ctrl.c: 736: SetTimer(ERROR_DISPLAY_TMR, 500);
  1680                           
  1681                           ;trans_ctrl.c: 735: ((signal_8_15._byte &= 0x0f), (signal_8_15.b4 = 1));
  1682                           
  1683  0F0F  0844               	movf	_error_display_pcnt,w
  1684  0F10  3A06               	xorlw	6
  1685  0F11  1D03               	skipz
  1686  0F12  2F1A               	goto	l6152
  1687                           
  1688                           ;trans_ctrl.c: 740: if ((feeder2_flags1.b1 == 1)) {
  1689  0F13  1CC8               	btfss	_feeder2_flags1,1
  1690  0F14  2FB9               	goto	l6310
  1691                           
  1692                           ;trans_ctrl.c: 741: ((signal_8_15._byte &= 0xf0), (signal_8_15.b1 = 1));
  1693  0F15  30F0               	movlw	240
  1694  0F16  00F6               	movwf	??_SetSignalOutput
  1695  0F17  0876               	movf	??_SetSignalOutput,w
  1696  0F18  05DF               	andwf	_signal_8_15,f
  1697  0F19  2F32               	goto	L16
  1698  0F1A                     l6152:	
  1699                           ;trans_ctrl.c: 746: } else if (error_display_pcnt == 7) {
  1700                           
  1701                           ;trans_ctrl.c: 744: }
  1702                           ;trans_ctrl.c: 745: ++error_display_pcnt;
  1703                           
  1704                           ;trans_ctrl.c: 743: SetTimer(ERROR_DISPLAY_TMR, 500);
  1705                           
  1706                           ;trans_ctrl.c: 742: ((signal_8_15._byte &= 0x0f), (signal_8_15.b5 = 1));
  1707                           
  1708  0F1A  0844               	movf	_error_display_pcnt,w
  1709  0F1B  3A07               	xorlw	7
  1710  0F1C  1D03               	skipz
  1711  0F1D  2F27               	goto	l6168
  1712                           
  1713                           ;trans_ctrl.c: 747: if ((feeder3_flags1.b0 == 1)) {
  1714  0F1E  1C4B               	btfss	_feeder3_flags1,0
  1715  0F1F  2FB9               	goto	l6310
  1716                           
  1717                           ;trans_ctrl.c: 748: ((signal_8_15._byte &= 0xf0), (signal_8_15.b0 = 1),(signal_8_15.b1 =
      +                           1));
  1718  0F20  30F0               	movlw	240
  1719  0F21  00F6               	movwf	??_SetSignalOutput
  1720  0F22  0876               	movf	??_SetSignalOutput,w
  1721  0F23  05DF               	andwf	_signal_8_15,f
  1722  0F24  145F               	bsf	_signal_8_15,0
  1723  0F25                     L15:	
  1724  0F25  14DF               	bsf	_signal_8_15,1
  1725  0F26  2F63               	goto	L12
  1726  0F27                     l6168:	
  1727                           ;trans_ctrl.c: 753: } else if (error_display_pcnt == 8) {
  1728                           
  1729                           ;trans_ctrl.c: 751: }
  1730                           ;trans_ctrl.c: 752: ++error_display_pcnt;
  1731                           
  1732                           ;trans_ctrl.c: 750: SetTimer(ERROR_DISPLAY_TMR, 500);
  1733                           
  1734                           ;trans_ctrl.c: 749: ((signal_8_15._byte &= 0x0f), (signal_8_15.b4 = 1));
  1735                           
  1736  0F27  0844               	movf	_error_display_pcnt,w
  1737  0F28  3A08               	xorlw	8
  1738  0F29  1D03               	skipz
  1739  0F2A  2F34               	goto	l6184
  1740                           
  1741                           ;trans_ctrl.c: 754: if ((feeder3_flags1.b1 == 1)) {
  1742  0F2B  1CCB               	btfss	_feeder3_flags1,1
  1743  0F2C  2FB9               	goto	l6310
  1744                           
  1745                           ;trans_ctrl.c: 755: ((signal_8_15._byte &= 0xf0), (signal_8_15.b0 = 1),(signal_8_15.b1 =
      +                           1));
  1746  0F2D  30F0               	movlw	240
  1747  0F2E  00F6               	movwf	??_SetSignalOutput
  1748  0F2F  0876               	movf	??_SetSignalOutput,w
  1749  0F30  05DF               	andwf	_signal_8_15,f
  1750  0F31  145F               	bsf	_signal_8_15,0
  1751  0F32                     L16:	
  1752  0F32  14DF               	bsf	_signal_8_15,1
  1753  0F33  2F75               	goto	L5
  1754  0F34                     l6184:	
  1755                           ;trans_ctrl.c: 760: } else if (error_display_pcnt == 9) {
  1756                           
  1757                           ;trans_ctrl.c: 758: }
  1758                           ;trans_ctrl.c: 759: ++error_display_pcnt;
  1759                           
  1760                           ;trans_ctrl.c: 757: SetTimer(ERROR_DISPLAY_TMR, 500);
  1761                           
  1762                           ;trans_ctrl.c: 756: ((signal_8_15._byte &= 0x0f), (signal_8_15.b5 = 1));
  1763                           
  1764  0F34  0844               	movf	_error_display_pcnt,w
  1765  0F35  3A09               	xorlw	9
  1766  0F36  1D03               	skipz
  1767  0F37  2F3F               	goto	l6198
  1768                           
  1769                           ;trans_ctrl.c: 761: if ((feeder4_flags1.b0 == 1)) {
  1770  0F38  1C4E               	btfss	_feeder4_flags1,0
  1771  0F39  2FB9               	goto	l6310
  1772                           
  1773                           ;trans_ctrl.c: 762: ((signal_8_15._byte &= 0xf0), (signal_8_15.b2 = 1));
  1774  0F3A  30F0               	movlw	240
  1775  0F3B  00F6               	movwf	??_SetSignalOutput
  1776  0F3C  0876               	movf	??_SetSignalOutput,w
  1777  0F3D  05DF               	andwf	_signal_8_15,f
  1778  0F3E  2F74               	goto	L14
  1779  0F3F                     l6198:	
  1780                           ;trans_ctrl.c: 767: } else if (error_display_pcnt == 10) {
  1781                           
  1782                           ;trans_ctrl.c: 765: }
  1783                           ;trans_ctrl.c: 766: ++error_display_pcnt;
  1784                           
  1785                           ;trans_ctrl.c: 764: SetTimer(ERROR_DISPLAY_TMR, 500);
  1786                           
  1787                           ;trans_ctrl.c: 763: ((signal_8_15._byte &= 0x0f), (signal_8_15.b5 = 1));
  1788                           
  1789  0F3F  0844               	movf	_error_display_pcnt,w
  1790  0F40  3A0A               	xorlw	10
  1791  0F41  1D03               	skipz
  1792  0F42  2F4B               	goto	l6214
  1793                           
  1794                           ;trans_ctrl.c: 768: if ((feeder5_flags1.b0 == 1)) {
  1795  0F43  1C51               	btfss	_feeder5_flags1,0
  1796  0F44  2FB9               	goto	l6310
  1797                           
  1798                           ;trans_ctrl.c: 769: ((signal_8_15._byte &= 0xf0), (signal_8_15.b0 = 1),(signal_8_15.b2 =
      +                           1));
  1799  0F45  30F0               	movlw	240
  1800  0F46  00F6               	movwf	??_SetSignalOutput
  1801  0F47  0876               	movf	??_SetSignalOutput,w
  1802  0F48  05DF               	andwf	_signal_8_15,f
  1803  0F49  145F               	bsf	_signal_8_15,0
  1804  0F4A  2F62               	goto	L4
  1805  0F4B                     l6214:	
  1806                           ;trans_ctrl.c: 774: } else if (error_display_pcnt == 11) {
  1807                           
  1808                           ;trans_ctrl.c: 772: }
  1809                           ;trans_ctrl.c: 773: ++error_display_pcnt;
  1810                           
  1811                           ;trans_ctrl.c: 771: SetTimer(ERROR_DISPLAY_TMR, 500);
  1812                           
  1813                           ;trans_ctrl.c: 770: ((signal_8_15._byte &= 0x0f), (signal_8_15.b4 = 1));
  1814                           
  1815  0F4B  0844               	movf	_error_display_pcnt,w
  1816  0F4C  3A0B               	xorlw	11
  1817  0F4D  1D03               	skipz
  1818  0F4E  2F57               	goto	l6230
  1819                           
  1820                           ;trans_ctrl.c: 775: if ((feeder5_flags1.b1 == 1)) {
  1821  0F4F  1CD1               	btfss	_feeder5_flags1,1
  1822  0F50  2FB9               	goto	l6310
  1823                           
  1824                           ;trans_ctrl.c: 776: ((signal_8_15._byte &= 0xf0), (signal_8_15.b0 = 1),(signal_8_15.b2 =
      +                           1));
  1825  0F51  30F0               	movlw	240
  1826  0F52  00F6               	movwf	??_SetSignalOutput
  1827  0F53  0876               	movf	??_SetSignalOutput,w
  1828  0F54  05DF               	andwf	_signal_8_15,f
  1829  0F55  145F               	bsf	_signal_8_15,0
  1830  0F56  2F74               	goto	L14
  1831  0F57                     l6230:	
  1832                           ;trans_ctrl.c: 781: } else if (error_display_pcnt == 12) {
  1833                           
  1834                           ;trans_ctrl.c: 779: }
  1835                           ;trans_ctrl.c: 780: ++error_display_pcnt;
  1836                           
  1837                           ;trans_ctrl.c: 778: SetTimer(ERROR_DISPLAY_TMR, 500);
  1838                           
  1839                           ;trans_ctrl.c: 777: ((signal_8_15._byte &= 0x0f), (signal_8_15.b5 = 1));
  1840                           
  1841  0F57  0844               	movf	_error_display_pcnt,w
  1842  0F58  3A0C               	xorlw	12
  1843  0F59  1D03               	skipz
  1844  0F5A  2F69               	goto	l6246
  1845                           
  1846                           ;trans_ctrl.c: 782: if ((feeder_coex_flags1.b0 == 1)) {
  1847  0F5B  1C54               	btfss	_feeder_coex_flags1,0
  1848  0F5C  2FB9               	goto	l6310
  1849                           
  1850                           ;trans_ctrl.c: 783: ((signal_8_15._byte &= 0xf0), (signal_8_15.b1 = 1),(signal_8_15.b2 =
      +                           1));
  1851  0F5D  30F0               	movlw	240
  1852  0F5E  00F6               	movwf	??_SetSignalOutput
  1853  0F5F  0876               	movf	??_SetSignalOutput,w
  1854  0F60  05DF               	andwf	_signal_8_15,f
  1855  0F61  14DF               	bsf	_signal_8_15,1
  1856  0F62                     L4:	
  1857  0F62  155F               	bsf	_signal_8_15,2
  1858  0F63                     L12:	
  1859                           
  1860                           ;trans_ctrl.c: 784: ((signal_8_15._byte &= 0x0f), (signal_8_15.b4 = 1));
  1861  0F63  300F               	movlw	15
  1862  0F64  00F6               	movwf	??_SetSignalOutput
  1863  0F65  0876               	movf	??_SetSignalOutput,w
  1864  0F66  05DF               	andwf	_signal_8_15,f
  1865  0F67  165F               	bsf	_signal_8_15,4
  1866  0F68  2FAE               	goto	L1
  1867  0F69                     l6246:	
  1868                           ;trans_ctrl.c: 788: } else if (error_display_pcnt == 13) {
  1869                           
  1870                           ;trans_ctrl.c: 786: }
  1871                           ;trans_ctrl.c: 787: ++error_display_pcnt;
  1872                           
  1873                           ;trans_ctrl.c: 785: SetTimer(ERROR_DISPLAY_TMR, 500);
  1874                           
  1875  0F69  0844               	movf	_error_display_pcnt,w
  1876  0F6A  3A0D               	xorlw	13
  1877  0F6B  1D03               	skipz
  1878  0F6C  2F7A               	goto	l6262
  1879                           
  1880                           ;trans_ctrl.c: 789: if ((feeder_coex_flags1.b1 == 1)) {
  1881  0F6D  1CD4               	btfss	_feeder_coex_flags1,1
  1882  0F6E  2FB9               	goto	l6310
  1883                           
  1884                           ;trans_ctrl.c: 790: ((signal_8_15._byte &= 0xf0), (signal_8_15.b1 = 1),(signal_8_15.b2 =
      +                           1));
  1885  0F6F  30F0               	movlw	240
  1886  0F70  00F6               	movwf	??_SetSignalOutput
  1887  0F71  0876               	movf	??_SetSignalOutput,w
  1888  0F72  05DF               	andwf	_signal_8_15,f
  1889  0F73                     L17:	
  1890  0F73  14DF               	bsf	_signal_8_15,1
  1891  0F74                     L14:	
  1892  0F74  155F               	bsf	_signal_8_15,2
  1893  0F75                     L5:	
  1894                           
  1895                           ;trans_ctrl.c: 791: ((signal_8_15._byte &= 0x0f), (signal_8_15.b5 = 1));
  1896  0F75  300F               	movlw	15
  1897  0F76  00F6               	movwf	??_SetSignalOutput
  1898  0F77  0876               	movf	??_SetSignalOutput,w
  1899  0F78  05DF               	andwf	_signal_8_15,f
  1900  0F79  2F9A               	goto	L13
  1901  0F7A                     l6262:	
  1902                           ;trans_ctrl.c: 795: } else if (error_display_pcnt == 14) {
  1903                           
  1904                           ;trans_ctrl.c: 793: }
  1905                           ;trans_ctrl.c: 794: ++error_display_pcnt;
  1906                           
  1907                           ;trans_ctrl.c: 792: SetTimer(ERROR_DISPLAY_TMR, 500);
  1908                           
  1909  0F7A  0844               	movf	_error_display_pcnt,w
  1910  0F7B  3A0E               	xorlw	14
  1911  0F7C  1D03               	skipz
  1912  0F7D  2F8A               	goto	l6278
  1913                           
  1914                           ;trans_ctrl.c: 796: if ((feeder4_flags1.b1 == 1)) {
  1915  0F7E  1CCE               	btfss	_feeder4_flags1,1
  1916  0F7F  2FB9               	goto	l6310
  1917                           
  1918                           ;trans_ctrl.c: 797: ((signal_8_15._byte &= 0xf0), (signal_8_15.b2 = 1));
  1919  0F80  30F0               	movlw	240
  1920  0F81  00F6               	movwf	??_SetSignalOutput
  1921  0F82  0876               	movf	??_SetSignalOutput,w
  1922  0F83  05DF               	andwf	_signal_8_15,f
  1923  0F84  155F               	bsf	_signal_8_15,2
  1924                           
  1925                           ;trans_ctrl.c: 798: ((signal_8_15._byte &= 0x0f), (signal_8_15.b5 = 1),(signal_8_15.b6 =
      +                           1));
  1926  0F85  300F               	movlw	15
  1927  0F86  00F6               	movwf	??_SetSignalOutput
  1928  0F87  0876               	movf	??_SetSignalOutput,w
  1929  0F88  05DF               	andwf	_signal_8_15,f
  1930  0F89  2FAC               	goto	L6
  1931  0F8A                     l6278:	
  1932                           ;trans_ctrl.c: 802: } else if (error_display_pcnt == 15) {
  1933                           
  1934                           ;trans_ctrl.c: 800: }
  1935                           ;trans_ctrl.c: 801: ++error_display_pcnt;
  1936                           
  1937                           ;trans_ctrl.c: 799: SetTimer(ERROR_DISPLAY_TMR, 500);
  1938                           
  1939  0F8A  0844               	movf	_error_display_pcnt,w
  1940  0F8B  3A0F               	xorlw	15
  1941  0F8C  1D03               	skipz
  1942  0F8D  2F9C               	goto	l6294
  1943                           
  1944                           ;trans_ctrl.c: 803: if ((cyclon_flags1.b0 == 1)) {
  1945  0F8E  1C41               	btfss	_cyclon_flags1,0
  1946  0F8F  2FB9               	goto	l6310
  1947                           
  1948                           ;trans_ctrl.c: 804: ((signal_8_15._byte &= 0xf0), (signal_8_15.b3 = 1));
  1949  0F90  30F0               	movlw	240
  1950  0F91  00F6               	movwf	??_SetSignalOutput
  1951  0F92  0876               	movf	??_SetSignalOutput,w
  1952  0F93  05DF               	andwf	_signal_8_15,f
  1953  0F94  15DF               	bsf	_signal_8_15,3
  1954                           
  1955                           ;trans_ctrl.c: 805: ((signal_8_15._byte &= 0x0f), (signal_8_15.b4 = 1),(signal_8_15.b5 =
      +                           1));
  1956  0F95  300F               	movlw	15
  1957  0F96  00F6               	movwf	??_SetSignalOutput
  1958  0F97  0876               	movf	??_SetSignalOutput,w
  1959  0F98  05DF               	andwf	_signal_8_15,f
  1960  0F99  165F               	bsf	_signal_8_15,4
  1961  0F9A                     L13:	
  1962  0F9A  16DF               	bsf	_signal_8_15,5
  1963  0F9B  2FAE               	goto	L1
  1964  0F9C                     l6294:	
  1965                           ;trans_ctrl.c: 809: } else if (error_display_pcnt == 16) {
  1966                           
  1967                           ;trans_ctrl.c: 807: }
  1968                           ;trans_ctrl.c: 808: ++error_display_pcnt;
  1969                           
  1970                           ;trans_ctrl.c: 806: SetTimer(ERROR_DISPLAY_TMR, 500);
  1971                           
  1972  0F9C  0844               	movf	_error_display_pcnt,w
  1973  0F9D  3A10               	xorlw	16
  1974  0F9E  1D03               	skipz
  1975  0F9F  2FBF               	goto	l6312
  1976                           
  1977                           ;trans_ctrl.c: 810: if ((output_8_15.b5 == 0)) {
  1978  0FA0  1ADC               	btfsc	_output_8_15,5
  1979  0FA1  2FB9               	goto	l6310
  1980                           
  1981                           ;trans_ctrl.c: 811: ((signal_8_15._byte &= 0xf0), (signal_8_15.b3 = 1));
  1982  0FA2  30F0               	movlw	240
  1983  0FA3  00F6               	movwf	??_SetSignalOutput
  1984  0FA4  0876               	movf	??_SetSignalOutput,w
  1985  0FA5  05DF               	andwf	_signal_8_15,f
  1986  0FA6  15DF               	bsf	_signal_8_15,3
  1987                           
  1988                           ;trans_ctrl.c: 812: ((signal_8_15._byte &= 0x0f), (signal_8_15.b4 = 1),(signal_8_15.b5 =
      +                           1),(signal_8_15.b6 = 1));
  1989  0FA7  300F               	movlw	15
  1990  0FA8  00F6               	movwf	??_SetSignalOutput
  1991  0FA9  0876               	movf	??_SetSignalOutput,w
  1992  0FAA  05DF               	andwf	_signal_8_15,f
  1993  0FAB  165F               	bsf	_signal_8_15,4
  1994  0FAC                     L6:	
  1995  0FAC  16DF               	bsf	_signal_8_15,5
  1996  0FAD                     L8:	
  1997  0FAD  175F               	bsf	_signal_8_15,6
  1998  0FAE                     L1:	
  1999                           
  2000                           ;trans_ctrl.c: 813: SetTimer(ERROR_DISPLAY_TMR, 500);
  2001  0FAE  3004               	movlw	4
  2002  0FAF  00F2               	movwf	SetTimer@timer_for_setup
  2003  0FB0  3000               	movlw	0
  2004  0FB1  00F3               	movwf	SetTimer@timer_for_setup+1
  2005  0FB2  30F4               	movlw	244
  2006  0FB3  00F4               	movwf	SetTimer@period
  2007  0FB4  3001               	movlw	1
  2008  0FB5  00F5               	movwf	SetTimer@period+1
  2009  0FB6  3187  2744  318D   	fcall	_SetTimer
  2010  0FB9                     l6310:	
  2011                           
  2012                           ;trans_ctrl.c: 814: }
  2013                           ;trans_ctrl.c: 815: ++error_display_pcnt;
  2014  0FB9  3001               	movlw	1
  2015  0FBA  00F6               	movwf	??_SetSignalOutput
  2016  0FBB  0876               	movf	??_SetSignalOutput,w
  2017  0FBC  0020               	movlb	0	; select bank0
  2018  0FBD  07C4               	addwf	_error_display_pcnt,f
  2019                           
  2020                           ;trans_ctrl.c: 816: } else if (error_display_pcnt == 17) {
  2021  0FBE  2FDD               	goto	l6328
  2022  0FBF                     l6312:	
  2023  0FBF  0844               	movf	_error_display_pcnt,w
  2024  0FC0  3A11               	xorlw	17
  2025  0FC1  1D03               	skipz
  2026  0FC2  2FDD               	goto	l6328
  2027                           
  2028                           ;trans_ctrl.c: 817: if (!(input_0_7.b4 == 0)) {
  2029  0FC3  1E57               	btfss	_input_0_7,4
  2030  0FC4  2FDB               	goto	l6326
  2031                           
  2032                           ;trans_ctrl.c: 818: ((signal_8_15._byte &= 0xf0), (signal_8_15.b0 = 1),(signal_8_15.b3 =
      +                           1));
  2033  0FC5  30F0               	movlw	240
  2034  0FC6  00F6               	movwf	??_SetSignalOutput
  2035  0FC7  0876               	movf	??_SetSignalOutput,w
  2036  0FC8  05DF               	andwf	_signal_8_15,f
  2037  0FC9  145F               	bsf	_signal_8_15,0
  2038  0FCA  15DF               	bsf	_signal_8_15,3
  2039                           
  2040                           ;trans_ctrl.c: 819: ((signal_8_15._byte &= 0x0f), (signal_8_15.b7 = 1));
  2041  0FCB  300F               	movlw	15
  2042  0FCC  00F6               	movwf	??_SetSignalOutput
  2043  0FCD  0876               	movf	??_SetSignalOutput,w
  2044  0FCE  05DF               	andwf	_signal_8_15,f
  2045  0FCF  17DF               	bsf	_signal_8_15,7
  2046                           
  2047                           ;trans_ctrl.c: 820: SetTimer(ERROR_DISPLAY_TMR, 500);
  2048  0FD0  3004               	movlw	4
  2049  0FD1  00F2               	movwf	SetTimer@timer_for_setup
  2050  0FD2  3000               	movlw	0
  2051  0FD3  00F3               	movwf	SetTimer@timer_for_setup+1
  2052  0FD4  30F4               	movlw	244
  2053  0FD5  00F4               	movwf	SetTimer@period
  2054  0FD6  3001               	movlw	1
  2055  0FD7  00F5               	movwf	SetTimer@period+1
  2056  0FD8  3187  2744  318D   	fcall	_SetTimer
  2057  0FDB                     l6326:	
  2058                           
  2059                           ;trans_ctrl.c: 821: }
  2060                           ;trans_ctrl.c: 822: error_display_pcnt = 0;
  2061  0FDB  0020               	movlb	0	; select bank0
  2062  0FDC  01C4               	clrf	_error_display_pcnt
  2063  0FDD                     l6328:	
  2064                           
  2065                           ;trans_ctrl.c: 823: }
  2066                           ;trans_ctrl.c: 824: }
  2067                           ;trans_ctrl.c: 828: (hc595_shift.b0 = 1, HC595_Shift());
  2068  0FDD  146E               	bsf	_hc595_shift,0
  2069  0FDE  3195  25F5  318D   	fcall	_HC595_Shift
  2070                           
  2071                           ;trans_ctrl.c: 829: (hc595_shift.b1 = 1, HC595_Shift());
  2072  0FE1  0020               	movlb	0	; select bank0
  2073  0FE2  14EE               	bsf	_hc595_shift,1
  2074  0FE3  3195  25F5  318D   	fcall	_HC595_Shift
  2075                           
  2076                           ;trans_ctrl.c: 830: (hc595_shift.b2 = 1, HC595_Shift());
  2077  0FE6  0020               	movlb	0	; select bank0
  2078  0FE7  156E               	bsf	_hc595_shift,2
  2079  0FE8  3195  25F5  318D   	fcall	_HC595_Shift
  2080                           
  2081                           ;trans_ctrl.c: 831: (hc595_shift.b3 = 1, HC595_Shift());
  2082  0FEB  0020               	movlb	0	; select bank0
  2083  0FEC  15EE               	bsf	_hc595_shift,3
  2084  0FED  3195  25F5         	fcall	_HC595_Shift
  2085                           
  2086                           ;trans_ctrl.c: 832: (TRISD = 0x00);
  2087  0FEF  0021               	movlb	1	; select bank1
  2088  0FF0  018F               	clrf	15	;volatile
  2089                           
  2090                           ;trans_ctrl.c: 833: (RB1 = 0);
  2091  0FF1  0020               	movlb	0	; select bank0
  2092  0FF2  108D               	bcf	13,1	;volatile
  2093                           
  2094                           ;trans_ctrl.c: 834: (RB2 = 0);
  2095  0FF3  110D               	bcf	13,2	;volatile
  2096                           
  2097                           ;trans_ctrl.c: 835: PORTD = signal_0_7._byte;
  2098  0FF4  085E               	movf	_signal_0_7,w
  2099  0FF5  008F               	movwf	15	;volatile
  2100                           
  2101                           ;trans_ctrl.c: 836: (RB1 = 1);
  2102  0FF6  148D               	bsf	13,1	;volatile
  2103                           
  2104                           ;trans_ctrl.c: 837: (RB1 = 0);
  2105  0FF7  108D               	bcf	13,1	;volatile
  2106                           
  2107                           ;trans_ctrl.c: 838: PORTD = signal_8_15._byte;
  2108  0FF8  085F               	movf	_signal_8_15,w
  2109  0FF9  008F               	movwf	15	;volatile
  2110                           
  2111                           ;trans_ctrl.c: 839: (RB2 = 1);
  2112  0FFA  150D               	bsf	13,2	;volatile
  2113                           
  2114                           ;trans_ctrl.c: 840: (RB2 = 0);
  2115  0FFB  110D               	bcf	13,2	;volatile
  2116                           
  2117                           ;trans_ctrl.c: 841: (TRISD = 0xff);
  2118  0FFC  30FF               	movlw	255
  2119  0FFD  0021               	movlb	1	; select bank1
  2120  0FFE  008F               	movwf	15	;volatile
  2121  0FFF  0008               	return
  2122  1000                     __end_of_SetSignalOutput:	
  2123                           
  2124                           	psect	swtext1
  2125  0800                     __pswtext1:	
  2126  0800                     S6934:	
  2127  0800  318E  2E7F         	ljmp	l625
  2128  0802  318E  2E80         	ljmp	l627
  2129  0804  318E  2E83         	ljmp	l633
  2130  0806  318E  2E80         	ljmp	l630
  2131  0808  318E  2E88         	ljmp	l638
  2132                           
  2133                           	psect	text2
  2134  1632                     __ptext2:	
  2135 ;; *************** function _SetRelayOutput *****************
  2136 ;; Defined at:
  2137 ;;		line 404 in file "trans_ctrl.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;		None
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;		None
  2142 ;; Return value:  Size  Location     Type
  2143 ;;		None               void
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, status,0, pclath, cstack
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2151 ;;      Params:         0       0       0       0       0       0       0       0
  2152 ;;      Locals:         0       0       0       0       0       0       0       0
  2153 ;;      Temps:          1       0       0       0       0       0       0       0
  2154 ;;      Totals:         1       0       0       0       0       0       0       0
  2155 ;;Total ram usage:        1 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    3
  2158 ;; This function calls:
  2159 ;;		_HC595_Shift
  2160 ;; This function is called by:
  2161 ;;		_main
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           
  2166                           ;psect for function _SetRelayOutput
  2167  1632                     _SetRelayOutput:	
  2168                           
  2169                           ;trans_ctrl.c: 406: if (!(timer_flags2.b4 == 1)) return;
  2170                           
  2171                           ;incstack = 0
  2172                           ; Regs used in _SetRelayOutput: [wreg+status,2+status,0+pclath+cstack]
  2173  1632  0020               	movlb	0	; select bank0
  2174  1633  1E68               	btfss	_timer_flags2,4
  2175  1634  0008               	return
  2176                           
  2177                           ;trans_ctrl.c: 407: else ++relay_pcnt;
  2178  1635  3001               	movlw	1
  2179  1636  00F2               	movwf	??_SetRelayOutput
  2180  1637  0872               	movf	??_SetRelayOutput,w
  2181  1638  07DD               	addwf	_relay_pcnt,f
  2182                           
  2183                           ;trans_ctrl.c: 408: if(relay_pcnt != 5) return;
  2184  1639  085D               	movf	_relay_pcnt,w
  2185  163A  3A05               	xorlw	5
  2186  163B  1D03               	btfss	3,2
  2187  163C  0008               	return
  2188                           
  2189                           ;trans_ctrl.c: 409: else relay_pcnt = 0;
  2190  163D  01DD               	clrf	_relay_pcnt
  2191                           
  2192                           ;trans_ctrl.c: 411: (PEIE = 0);
  2193  163E  130B               	bcf	11,6	;volatile
  2194                           
  2195                           ;trans_ctrl.c: 412: (hc595_shift.b0 = 1, HC595_Shift());
  2196  163F  146E               	bsf	_hc595_shift,0
  2197  1640  3195  25F5  3196   	fcall	_HC595_Shift
  2198                           
  2199                           ;trans_ctrl.c: 413: (hc595_shift.b1 = 1, HC595_Shift());
  2200  1643  0020               	movlb	0	; select bank0
  2201  1644  14EE               	bsf	_hc595_shift,1
  2202  1645  3195  25F5  3196   	fcall	_HC595_Shift
  2203                           
  2204                           ;trans_ctrl.c: 414: (hc595_shift.b2 = 1, HC595_Shift());
  2205  1648  0020               	movlb	0	; select bank0
  2206  1649  156E               	bsf	_hc595_shift,2
  2207  164A  3195  25F5  3196   	fcall	_HC595_Shift
  2208                           
  2209                           ;trans_ctrl.c: 415: (hc595_shift.b3 = 1, HC595_Shift());
  2210  164D  0020               	movlb	0	; select bank0
  2211  164E  15EE               	bsf	_hc595_shift,3
  2212  164F  3195  25F5  3196   	fcall	_HC595_Shift
  2213                           
  2214                           ;trans_ctrl.c: 416: (TRISD = 0x00);
  2215  1652  0021               	movlb	1	; select bank1
  2216  1653  018F               	clrf	15	;volatile
  2217                           
  2218                           ;trans_ctrl.c: 417: PORTD = output_0_7._byte;
  2219  1654  0020               	movlb	0	; select bank0
  2220  1655  085B               	movf	_output_0_7,w
  2221  1656  008F               	movwf	15	;volatile
  2222                           
  2223                           ;trans_ctrl.c: 418: (hc595_shift.b4 = 1, HC595_Shift(), hc595_shift.b4 = 0, HC595_Shift(
      +                          ));
  2224  1657  166E               	bsf	_hc595_shift,4
  2225  1658  3195  25F5  3196   	fcall	_HC595_Shift
  2226  165B  0020               	movlb	0	; select bank0
  2227  165C  126E               	bcf	_hc595_shift,4
  2228  165D  3195  25F5  3196   	fcall	_HC595_Shift
  2229                           
  2230                           ;trans_ctrl.c: 419: PORTD = output_8_15._byte;
  2231  1660  0020               	movlb	0	; select bank0
  2232  1661  085C               	movf	_output_8_15,w
  2233  1662  008F               	movwf	15	;volatile
  2234                           
  2235                           ;trans_ctrl.c: 420: (hc595_shift.b5 = 1, HC595_Shift(), hc595_shift.b5 = 0, HC595_Shift(
      +                          ));
  2236  1663  16EE               	bsf	_hc595_shift,5
  2237  1664  3195  25F5  3196   	fcall	_HC595_Shift
  2238  1667  0020               	movlb	0	; select bank0
  2239  1668  12EE               	bcf	_hc595_shift,5
  2240  1669  3195  25F5  3196   	fcall	_HC595_Shift
  2241                           
  2242                           ;trans_ctrl.c: 421: (hc595_shift.b6 = 0, HC595_Shift());
  2243  166C  0020               	movlb	0	; select bank0
  2244  166D  136E               	bcf	_hc595_shift,6
  2245  166E  3195  25F5         	fcall	_HC595_Shift
  2246                           
  2247                           ;trans_ctrl.c: 422: (TRISD = 0xff);
  2248  1670  30FF               	movlw	255
  2249  1671  0021               	movlb	1	; select bank1
  2250  1672  008F               	movwf	15	;volatile
  2251                           
  2252                           ;trans_ctrl.c: 423: (PEIE = 1);
  2253  1673  170B               	bsf	11,6	;volatile
  2254  1674  0008               	return
  2255  1675                     __end_of_SetRelayOutput:	
  2256                           
  2257                           	psect	text3
  2258  157D                     __ptext3:	
  2259 ;; *************** function _SetAnalogOutput *****************
  2260 ;; Defined at:
  2261 ;;		line 428 in file "trans_ctrl.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;		None
  2266 ;; Return value:  Size  Location     Type
  2267 ;;		None               void
  2268 ;; Registers used:
  2269 ;;		wreg, status,2, status,0
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2275 ;;      Params:         0       0       0       0       0       0       0       0
  2276 ;;      Locals:         0       0       0       0       0       0       0       0
  2277 ;;      Temps:          2       0       0       0       0       0       0       0
  2278 ;;      Totals:         2       0       0       0       0       0       0       0
  2279 ;;Total ram usage:        2 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    2
  2282 ;; This function calls:
  2283 ;;		Nothing
  2284 ;; This function is called by:
  2285 ;;		_main
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           
  2290                           ;psect for function _SetAnalogOutput
  2291  157D                     _SetAnalogOutput:	
  2292                           
  2293                           ;trans_ctrl.c: 430: if (!(timer_flags2.b4 == 1)) return;
  2294                           
  2295                           ;incstack = 0
  2296                           ; Regs used in _SetAnalogOutput: [wreg+status,2+status,0]
  2297  157D  0020               	movlb	0	; select bank0
  2298  157E  1E68               	btfss	_timer_flags2,4
  2299  157F  0008               	return
  2300                           
  2301                           ;trans_ctrl.c: 432: CCPR1L = (an0_out >> 2);
  2302  1580  0821               	movf	_an0_out+1,w
  2303  1581  00F3               	movwf	??_SetAnalogOutput+1
  2304  1582  0820               	movf	_an0_out,w
  2305  1583  00F2               	movwf	??_SetAnalogOutput
  2306  1584  36F3               	lsrf	??_SetAnalogOutput+1,f
  2307  1585  0CF2               	rrf	??_SetAnalogOutput,f
  2308  1586  36F3               	lsrf	??_SetAnalogOutput+1,f
  2309  1587  0CF2               	rrf	??_SetAnalogOutput,f
  2310  1588  0872               	movf	??_SetAnalogOutput,w
  2311  1589  0025               	movlb	5	; select bank5
  2312  158A  0091               	movwf	17	;volatile
  2313                           
  2314                           ;trans_ctrl.c: 433: if (an0_out & 0x0001) DC1B0 = 1;
  2315  158B  0020               	movlb	0	; select bank0
  2316  158C  1C20               	btfss	_an0_out,0
  2317  158D  2D91               	goto	l501
  2318  158E  0025               	movlb	5	; select bank5
  2319  158F  1613               	bsf	19,4	;volatile
  2320  1590  2D93               	goto	l502
  2321  1591                     l501:	
  2322                           
  2323                           ;trans_ctrl.c: 434: else DC1B0 = 0;
  2324  1591  0025               	movlb	5	; select bank5
  2325  1592  1213               	bcf	19,4	;volatile
  2326  1593                     l502:	
  2327                           
  2328                           ;trans_ctrl.c: 435: if (an0_out & 0x0002) DC1B1 = 1;
  2329  1593  0020               	movlb	0	; select bank0
  2330  1594  1CA0               	btfss	_an0_out,1
  2331  1595  2D99               	goto	l503
  2332  1596  0025               	movlb	5	; select bank5
  2333  1597  1693               	bsf	19,5	;volatile
  2334  1598  2D9B               	goto	l5874
  2335  1599                     l503:	
  2336                           
  2337                           ;trans_ctrl.c: 436: else DC1B1 = 0;
  2338  1599  0025               	movlb	5	; select bank5
  2339  159A  1293               	bcf	19,5	;volatile
  2340  159B                     l5874:	
  2341                           
  2342                           ;trans_ctrl.c: 437: CCPR2L = (an1_out >> 2);
  2343  159B  0020               	movlb	0	; select bank0
  2344  159C  0823               	movf	_an1_out+1,w
  2345  159D  00F3               	movwf	??_SetAnalogOutput+1
  2346  159E  0822               	movf	_an1_out,w
  2347  159F  00F2               	movwf	??_SetAnalogOutput
  2348  15A0  36F3               	lsrf	??_SetAnalogOutput+1,f
  2349  15A1  0CF2               	rrf	??_SetAnalogOutput,f
  2350  15A2  36F3               	lsrf	??_SetAnalogOutput+1,f
  2351  15A3  0CF2               	rrf	??_SetAnalogOutput,f
  2352  15A4  0872               	movf	??_SetAnalogOutput,w
  2353  15A5  0025               	movlb	5	; select bank5
  2354  15A6  0098               	movwf	24	;volatile
  2355                           
  2356                           ;trans_ctrl.c: 438: if (an1_out & 0x0001) DC2B0 = 1;
  2357  15A7  0020               	movlb	0	; select bank0
  2358  15A8  1C22               	btfss	_an1_out,0
  2359  15A9  2DAD               	goto	l505
  2360  15AA  0025               	movlb	5	; select bank5
  2361  15AB  161A               	bsf	26,4	;volatile
  2362  15AC  2DAF               	goto	l506
  2363  15AD                     l505:	
  2364                           
  2365                           ;trans_ctrl.c: 439: else DC2B0 = 0;
  2366  15AD  0025               	movlb	5	; select bank5
  2367  15AE  121A               	bcf	26,4	;volatile
  2368  15AF                     l506:	
  2369                           
  2370                           ;trans_ctrl.c: 440: if (an1_out & 0x0002) DC2B1 = 1;
  2371  15AF  0020               	movlb	0	; select bank0
  2372  15B0  1CA2               	btfss	_an1_out,1
  2373  15B1  2DB5               	goto	l507
  2374  15B2  0025               	movlb	5	; select bank5
  2375  15B3  169A               	bsf	26,5	;volatile
  2376  15B4  0008               	return
  2377  15B5                     l507:	
  2378                           
  2379                           ;trans_ctrl.c: 441: else DC2B1 = 0;
  2380  15B5  0025               	movlb	5	; select bank5
  2381  15B6  129A               	bcf	26,5	;volatile
  2382  15B7  0008               	return
  2383  15B8                     __end_of_SetAnalogOutput:	
  2384                           
  2385                           	psect	text4
  2386  0082                     __ptext4:	
  2387 ;; *************** function _ProcessVacumPump1 *****************
  2388 ;; Defined at:
  2389 ;;		line 1492 in file "trans_ctrl.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;		None
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;		None               void
  2396 ;; Registers used:
  2397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2403 ;;      Params:         0       0       0       0       0       0       0       0
  2404 ;;      Locals:         0       0       0       0       0       0       0       0
  2405 ;;      Temps:          1       0       0       0       0       0       0       0
  2406 ;;      Totals:         1       0       0       0       0       0       0       0
  2407 ;;Total ram usage:        1 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    3
  2410 ;; This function calls:
  2411 ;;		_SetTimer
  2412 ;; This function is called by:
  2413 ;;		_main
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           
  2418                           ;psect for function _ProcessVacumPump1
  2419  0082                     _ProcessVacumPump1:	
  2420                           
  2421                           ;trans_ctrl.c: 1494: switch (vacum_pump1_state) {
  2422                           
  2423                           ;incstack = 0
  2424                           ; Regs used in _ProcessVacumPump1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2425  0082  2B00               	goto	l5742
  2426  0083                     l5362:	
  2427                           ;trans_ctrl.c: 1496: case VP1_OFF:
  2428                           
  2429                           
  2430                           ;trans_ctrl.c: 1497: if (activ_unit == VACUM_PUMP1) activ_unit = FEEDER1;
  2431  0083  0020               	movlb	0	; select bank0
  2432  0084  0838               	movf	_activ_unit,w
  2433  0085  3A06               	xorlw	6
  2434  0086  1903               	btfsc	3,2
  2435  0087  01B8               	clrf	_activ_unit
  2436                           
  2437                           ;trans_ctrl.c: 1498: if (((taster_flags1.b0 == 1) || (system_flags2.b0 == 1)) && (timer_
      +                          flags2.b5 == 1)) {
  2438  0088  1863               	btfsc	_taster_flags1,0
  2439  0089  288C               	goto	l1003
  2440  008A  1C62               	btfss	_system_flags2,0
  2441  008B  289B               	goto	l5374
  2442  008C                     l1003:	
  2443  008C  1EE8               	btfss	_timer_flags2,5
  2444  008D  289B               	goto	l5374
  2445                           
  2446                           ;trans_ctrl.c: 1499: vacum_pump1_state = VP1_START;
  2447  008E  01EB               	clrf	_vacum_pump1_state
  2448  008F  0AEB               	incf	_vacum_pump1_state,f
  2449                           
  2450                           ;trans_ctrl.c: 1500: SetTimer(VP1_CONTROL_DELAY_TMR, 500);
  2451  0090  3008               	movlw	8
  2452  0091  00F2               	movwf	SetTimer@timer_for_setup
  2453  0092  3000               	movlw	0
  2454  0093  00F3               	movwf	SetTimer@timer_for_setup+1
  2455  0094  30F4               	movlw	244
  2456  0095  00F4               	movwf	SetTimer@period
  2457  0096  3001               	movlw	1
  2458  0097  00F5               	movwf	SetTimer@period+1
  2459  0098  3187  2744  3180   	fcall	_SetTimer
  2460  009B                     l5374:	
  2461                           
  2462                           ;trans_ctrl.c: 1501: }
  2463                           ;trans_ctrl.c: 1502: (output_0_7.b0 = 0);
  2464  009B  0020               	movlb	0	; select bank0
  2465  009C  105B               	bcf	_output_0_7,0
  2466                           
  2467                           ;trans_ctrl.c: 1503: (output_0_7.b7 = 0);
  2468  009D  13DB               	bcf	_output_0_7,7
  2469                           
  2470                           ;trans_ctrl.c: 1504: (output_8_15.b1 = 0);
  2471  009E  10DC               	bcf	_output_8_15,1
  2472                           
  2473                           ;trans_ctrl.c: 1505: (output_8_15.b2 = 0);
  2474  009F  115C               	bcf	_output_8_15,2
  2475                           
  2476                           ;trans_ctrl.c: 1506: (output_8_15.b3 = 0);
  2477  00A0  11DC               	bcf	_output_8_15,3
  2478                           
  2479                           ;trans_ctrl.c: 1507: (vacum_pump1_flags1._byte &= 0xf0);
  2480  00A1  30F0               	movlw	240
  2481  00A2  00F6               	movwf	??_ProcessVacumPump1
  2482  00A3  0876               	movf	??_ProcessVacumPump1,w
  2483  00A4  05FB               	andwf	_vacum_pump1_flags1,f
  2484                           
  2485                           ;trans_ctrl.c: 1508: (vacum_pump1_flags2._byte = 0x00);
  2486  00A5  01EA               	clrf	_vacum_pump1_flags2
  2487                           
  2488                           ;trans_ctrl.c: 1509: an0_out = 0;
  2489  00A6  01A0               	clrf	_an0_out
  2490  00A7  01A1               	clrf	_an0_out+1
  2491  00A8  2ADD               	goto	l5718
  2492  00A9                     l5392:	
  2493                           ;trans_ctrl.c: 1513: case VP1_START:
  2494                           
  2495                           ;trans_ctrl.c: 1511: break;
  2496                           
  2497                           ;trans_ctrl.c: 1510: vp1_pcnt = 0;
  2498                           
  2499                           
  2500                           ;trans_ctrl.c: 1514: if ((activ_unit == VACUM_PUMP1) && !(vacum_pump1_flags1.b1 == 1)) a
      +                          ctiv_unit = FEEDER1;
  2501  00A9  0838               	movf	_activ_unit,w
  2502  00AA  3A06               	xorlw	6
  2503  00AB  1903               	btfsc	3,2
  2504  00AC  18FB               	btfsc	_vacum_pump1_flags1,1
  2505  00AD  28AF               	goto	l5398
  2506  00AE  01B8               	clrf	_activ_unit
  2507  00AF                     l5398:	
  2508                           
  2509                           ;trans_ctrl.c: 1515: if ((taster_flags1.b0 == 1) && (timer_flags2.b5 == 1)) {
  2510  00AF  1863               	btfsc	_taster_flags1,0
  2511  00B0  1EE8               	btfss	_timer_flags2,5
  2512  00B1  28BE               	goto	l5406
  2513                           
  2514                           ;trans_ctrl.c: 1516: vacum_pump1_state = VP1_OFF;
  2515  00B2  01EB               	clrf	_vacum_pump1_state
  2516                           
  2517                           ;trans_ctrl.c: 1517: SetTimer(VP1_CONTROL_DELAY_TMR, 500);
  2518  00B3  3008               	movlw	8
  2519  00B4  00F2               	movwf	SetTimer@timer_for_setup
  2520  00B5  3000               	movlw	0
  2521  00B6  00F3               	movwf	SetTimer@timer_for_setup+1
  2522  00B7  30F4               	movlw	244
  2523  00B8  00F4               	movwf	SetTimer@period
  2524  00B9  3001               	movlw	1
  2525  00BA  00F5               	movwf	SetTimer@period+1
  2526  00BB  3187  2744  3180   	fcall	_SetTimer
  2527  00BE                     l5406:	
  2528                           
  2529                           ;trans_ctrl.c: 1518: }
  2530                           ;trans_ctrl.c: 1519: if ((input_0_7.b0 == 1) || (input_0_7.b1 == 1)) {
  2531  00BE  0020               	movlb	0	; select bank0
  2532  00BF  1C57               	btfss	_input_0_7,0
  2533  00C0  18D7               	btfsc	_input_0_7,1
  2534  00C1  2A6F               	goto	l1077
  2535                           
  2536                           ;trans_ctrl.c: 1524: } else if (vp1_pcnt == 0) {
  2537                           
  2538                           ;trans_ctrl.c: 1523: break;
  2539                           
  2540                           ;trans_ctrl.c: 1522: vacum_pump1_state = VP1_ERROR;
  2541                           
  2542                           ;trans_ctrl.c: 1521: if ((input_0_7.b1 == 1)) (vacum_pump1_flags2.b1 = 1);
  2543                           
  2544                           ;trans_ctrl.c: 1520: if ((input_0_7.b0 == 1)) (vacum_pump1_flags2.b2 = 1);
  2545  00C2  08ED               	movf	_vp1_pcnt,f
  2546  00C3  1D03               	skipz
  2547  00C4  28E7               	goto	l5436
  2548                           
  2549                           ;trans_ctrl.c: 1525: if ((vacum_pump1_flags1.b5 == 1)) {
  2550  00C5  1EFB               	btfss	_vacum_pump1_flags1,5
  2551  00C6  28D1               	goto	l1015
  2552                           
  2553                           ;trans_ctrl.c: 1526: (output_8_15.b1 = 0);
  2554  00C7  10DC               	bcf	_output_8_15,1
  2555                           
  2556                           ;trans_ctrl.c: 1527: (output_0_7.b7 = 1);
  2557  00C8  17DB               	bsf	_output_0_7,7
  2558                           
  2559                           ;trans_ctrl.c: 1528: SetTimer(VP1_TMR, 50);
  2560  00C9  3000               	movlw	0
  2561  00CA  00F2               	movwf	SetTimer@timer_for_setup
  2562  00CB  3000               	movlw	0
  2563  00CC  00F3               	movwf	SetTimer@timer_for_setup+1
  2564  00CD  3032               	movlw	50
  2565  00CE  00F4               	movwf	SetTimer@period
  2566  00CF  3000               	movlw	0
  2567  00D0  28F4               	goto	L34
  2568  00D1                     l1015:	
  2569                           ;trans_ctrl.c: 1530: } else if ((vacum_pump1_flags1.b5 == 0)) {
  2570                           
  2571                           ;trans_ctrl.c: 1529: ++vp1_pcnt;
  2572                           
  2573  00D1  1AFB               	btfsc	_vacum_pump1_flags1,5
  2574  00D2  2B0B               	goto	l1004
  2575                           
  2576                           ;trans_ctrl.c: 1531: (output_0_7.b0 = 1);
  2577  00D3  145B               	bsf	_output_0_7,0
  2578                           
  2579                           ;trans_ctrl.c: 1532: an0_out = vp1_idle_speed;
  2580  00D4  0833               	movf	_vp1_idle_speed+1,w
  2581  00D5  01A1               	clrf	_an0_out+1
  2582  00D6  07A1               	addwf	_an0_out+1,f
  2583  00D7  0832               	movf	_vp1_idle_speed,w
  2584  00D8  01A0               	clrf	_an0_out
  2585  00D9  07A0               	addwf	_an0_out,f
  2586                           
  2587                           ;trans_ctrl.c: 1533: SetTimer(VP1_TMR, 700);
  2588  00DA  3000               	movlw	0
  2589  00DB  00F2               	movwf	SetTimer@timer_for_setup
  2590  00DC  3000               	movlw	0
  2591  00DD  00F3               	movwf	SetTimer@timer_for_setup+1
  2592  00DE  30BC               	movlw	188
  2593  00DF  00F4               	movwf	SetTimer@period
  2594  00E0  3002               	movlw	2
  2595  00E1  00F5               	movwf	SetTimer@period+1
  2596  00E2  3187  2744  3180   	fcall	_SetTimer
  2597                           
  2598                           ;trans_ctrl.c: 1534: vp1_pcnt = 2;
  2599  00E5  3002               	movlw	2
  2600  00E6  2A1A               	goto	L35
  2601  00E7                     l5436:	
  2602                           ;trans_ctrl.c: 1535: }
  2603                           ;trans_ctrl.c: 1536: } else if ((vp1_pcnt == 1) && (timer_flags1.b0 == 1)) {
  2604                           
  2605  00E7  086D               	movf	_vp1_pcnt,w
  2606  00E8  3A01               	xorlw	1
  2607  00E9  1903               	btfsc	3,2
  2608  00EA  1C7A               	btfss	_timer_flags1,0
  2609  00EB  28F9               	goto	l5446
  2610                           
  2611                           ;trans_ctrl.c: 1537: (output_0_7.b0 = 1);
  2612  00EC  145B               	bsf	_output_0_7,0
  2613                           
  2614                           ;trans_ctrl.c: 1538: SetTimer(VP1_TMR, 700);
  2615  00ED  3000               	movlw	0
  2616  00EE  00F2               	movwf	SetTimer@timer_for_setup
  2617  00EF  3000               	movlw	0
  2618  00F0  00F3               	movwf	SetTimer@timer_for_setup+1
  2619  00F1  30BC               	movlw	188
  2620  00F2  00F4               	movwf	SetTimer@period
  2621  00F3  3002               	movlw	2
  2622  00F4                     L34:	
  2623  00F4  00F5               	movwf	SetTimer@period+1
  2624  00F5  3187  2744  3180   	fcall	_SetTimer
  2625  00F8  2A93               	goto	L37
  2626  00F9                     l5446:	
  2627                           ;trans_ctrl.c: 1540: } else if ((vp1_pcnt == 2) && (timer_flags1.b0 == 1)) {
  2628                           
  2629                           ;trans_ctrl.c: 1539: ++vp1_pcnt;
  2630                           
  2631  00F9  086D               	movf	_vp1_pcnt,w
  2632  00FA  3A02               	xorlw	2
  2633  00FB  1903               	btfsc	3,2
  2634  00FC  1C7A               	btfss	_timer_flags1,0
  2635  00FD  2905               	goto	l5458
  2636                           
  2637                           ;trans_ctrl.c: 1541: if (!(input_0_7.b2 == 0)) {
  2638  00FE  1D57               	btfss	_input_0_7,2
  2639  00FF  2902               	goto	l1022
  2640                           
  2641                           ;trans_ctrl.c: 1542: (vacum_pump1_flags2.b0 = 1);
  2642  0100  146A               	bsf	_vacum_pump1_flags2,0
  2643  0101  2A75               	goto	l5668
  2644  0102                     l1022:	
  2645                           ;trans_ctrl.c: 1544: } else {
  2646                           
  2647                           ;trans_ctrl.c: 1543: vacum_pump1_state = VP1_ERROR;
  2648                           
  2649                           
  2650                           ;trans_ctrl.c: 1545: (vacum_pump1_flags1.b1 = 1);
  2651  0102  14FB               	bsf	_vacum_pump1_flags1,1
  2652                           
  2653                           ;trans_ctrl.c: 1546: (vacum_pump1_flags1.b3 = 0);
  2654  0103  11FB               	bcf	_vacum_pump1_flags1,3
  2655  0104  2969               	goto	L38
  2656  0105                     l5458:	
  2657                           ;trans_ctrl.c: 1548: }
  2658                           ;trans_ctrl.c: 1549: } else if ((vp1_pcnt == 3) && (vacum_pump1_flags1.b2 == 1)) {
  2659                           
  2660                           ;trans_ctrl.c: 1547: ++vp1_pcnt;
  2661                           
  2662  0105  086D               	movf	_vp1_pcnt,w
  2663  0106  3A03               	xorlw	3
  2664  0107  1903               	btfsc	3,2
  2665  0108  1D7B               	btfss	_vacum_pump1_flags1,2
  2666  0109  2B0B               	goto	l1004
  2667                           
  2668                           ;trans_ctrl.c: 1550: (vacum_pump1_flags1.b2 = 0);
  2669  010A  117B               	bcf	_vacum_pump1_flags1,2
  2670                           
  2671                           ;trans_ctrl.c: 1551: vacum_pump1_state = VP1_IDLE;
  2672  010B  3003               	movlw	3
  2673  010C  00F6               	movwf	??_ProcessVacumPump1
  2674  010D  0876               	movf	??_ProcessVacumPump1,w
  2675  010E  00EB               	movwf	_vacum_pump1_state
  2676                           
  2677                           ;trans_ctrl.c: 1552: vp1_pcnt = 3;
  2678  010F  3003               	movlw	3
  2679  0110  29BE               	goto	L36
  2680  0111                     l5466:	
  2681                           ;trans_ctrl.c: 1556: case VP1_IDLE:
  2682                           
  2683                           ;trans_ctrl.c: 1553: }
  2684                           ;trans_ctrl.c: 1554: break;
  2685                           
  2686                           
  2687                           ;trans_ctrl.c: 1557: if (activ_unit == VACUM_PUMP1) activ_unit = FEEDER1;
  2688  0111  0838               	movf	_activ_unit,w
  2689  0112  3A06               	xorlw	6
  2690  0113  1903               	btfsc	3,2
  2691  0114  01B8               	clrf	_activ_unit
  2692                           
  2693                           ;trans_ctrl.c: 1558: if ((taster_flags1.b0 == 1) && (timer_flags2.b5 == 1)) {
  2694  0115  1863               	btfsc	_taster_flags1,0
  2695  0116  1EE8               	btfss	_timer_flags2,5
  2696  0117  2924               	goto	l5478
  2697                           
  2698                           ;trans_ctrl.c: 1559: vacum_pump1_state = VP1_OFF;
  2699  0118  01EB               	clrf	_vacum_pump1_state
  2700                           
  2701                           ;trans_ctrl.c: 1560: SetTimer(VP1_CONTROL_DELAY_TMR, 500);
  2702  0119  3008               	movlw	8
  2703  011A  00F2               	movwf	SetTimer@timer_for_setup
  2704  011B  3000               	movlw	0
  2705  011C  00F3               	movwf	SetTimer@timer_for_setup+1
  2706  011D  30F4               	movlw	244
  2707  011E  00F4               	movwf	SetTimer@period
  2708  011F  3001               	movlw	1
  2709  0120  00F5               	movwf	SetTimer@period+1
  2710  0121  3187  2744  3180   	fcall	_SetTimer
  2711  0124                     l5478:	
  2712                           
  2713                           ;trans_ctrl.c: 1561: }
  2714                           ;trans_ctrl.c: 1562: if ((input_0_7.b0 == 1) || (input_0_7.b1 == 1)) {
  2715  0124  0020               	movlb	0	; select bank0
  2716  0125  1C57               	btfss	_input_0_7,0
  2717  0126  18D7               	btfsc	_input_0_7,1
  2718  0127  2A6F               	goto	l1077
  2719                           
  2720                           ;trans_ctrl.c: 1567: } else if (vp1_pcnt == 0) {
  2721                           
  2722                           ;trans_ctrl.c: 1566: break;
  2723                           
  2724                           ;trans_ctrl.c: 1565: vacum_pump1_state = VP1_ERROR;
  2725                           
  2726                           ;trans_ctrl.c: 1564: if ((input_0_7.b1 == 1)) (vacum_pump1_flags2.b1 = 1);
  2727                           
  2728                           ;trans_ctrl.c: 1563: if ((input_0_7.b0 == 1)) (vacum_pump1_flags2.b2 = 1);
  2729  0128  08ED               	movf	_vp1_pcnt,f
  2730  0129  1D03               	skipz
  2731  012A  2951               	goto	l5506
  2732                           
  2733                           ;trans_ctrl.c: 1568: if ((vacum_pump1_flags1.b5 == 1)) {
  2734  012B  1EFB               	btfss	_vacum_pump1_flags1,5
  2735  012C  293C               	goto	l1036
  2736                           
  2737                           ;trans_ctrl.c: 1569: (output_0_7.b0 = 0);
  2738  012D  105B               	bcf	_output_0_7,0
  2739                           
  2740                           ;trans_ctrl.c: 1570: (output_0_7.b7 = 0);
  2741  012E  13DB               	bcf	_output_0_7,7
  2742                           
  2743                           ;trans_ctrl.c: 1571: (output_8_15.b1 = 0);
  2744  012F  10DC               	bcf	_output_8_15,1
  2745                           
  2746                           ;trans_ctrl.c: 1572: SetTimer(VP1_TMR, 500);
  2747  0130  3000               	movlw	0
  2748  0131  00F2               	movwf	SetTimer@timer_for_setup
  2749  0132  3000               	movlw	0
  2750  0133  00F3               	movwf	SetTimer@timer_for_setup+1
  2751  0134  30F4               	movlw	244
  2752  0135  00F4               	movwf	SetTimer@period
  2753  0136  3001               	movlw	1
  2754  0137  00F5               	movwf	SetTimer@period+1
  2755  0138  3187  2744  3180   	fcall	_SetTimer
  2756  013B  2A93               	goto	L37
  2757  013C                     l1036:	
  2758                           ;trans_ctrl.c: 1574: } else if ((vacum_pump1_flags1.b5 == 0)) {
  2759                           
  2760                           ;trans_ctrl.c: 1573: ++vp1_pcnt;
  2761                           
  2762  013C  1AFB               	btfsc	_vacum_pump1_flags1,5
  2763  013D  2B0B               	goto	l1004
  2764                           
  2765                           ;trans_ctrl.c: 1575: an0_out = vp1_idle_speed;
  2766  013E  0833               	movf	_vp1_idle_speed+1,w
  2767  013F  01A1               	clrf	_an0_out+1
  2768  0140  07A1               	addwf	_an0_out+1,f
  2769  0141  0832               	movf	_vp1_idle_speed,w
  2770  0142  01A0               	clrf	_an0_out
  2771  0143  07A0               	addwf	_an0_out,f
  2772                           
  2773                           ;trans_ctrl.c: 1576: SetTimer(VP1_TMR, 500);
  2774  0144  3000               	movlw	0
  2775  0145  00F2               	movwf	SetTimer@timer_for_setup
  2776  0146  3000               	movlw	0
  2777  0147  00F3               	movwf	SetTimer@timer_for_setup+1
  2778  0148  30F4               	movlw	244
  2779  0149  00F4               	movwf	SetTimer@period
  2780  014A  3001               	movlw	1
  2781  014B  00F5               	movwf	SetTimer@period+1
  2782  014C  3187  2744  3180   	fcall	_SetTimer
  2783                           
  2784                           ;trans_ctrl.c: 1577: vp1_pcnt = 3;
  2785  014F  3003               	movlw	3
  2786  0150  2A1A               	goto	L35
  2787  0151                     l5506:	
  2788                           ;trans_ctrl.c: 1578: }
  2789                           ;trans_ctrl.c: 1579: } else if ((vp1_pcnt == 1) && (timer_flags1.b0 == 1)) {
  2790                           
  2791  0151  086D               	movf	_vp1_pcnt,w
  2792  0152  3A01               	xorlw	1
  2793  0153  1903               	btfsc	3,2
  2794  0154  1C7A               	btfss	_timer_flags1,0
  2795  0155  2963               	goto	l5516
  2796                           
  2797                           ;trans_ctrl.c: 1580: (output_0_7.b7 = 1);
  2798  0156  17DB               	bsf	_output_0_7,7
  2799                           
  2800                           ;trans_ctrl.c: 1581: SetTimer(VP1_TMR, 50);
  2801  0157  3000               	movlw	0
  2802  0158  00F2               	movwf	SetTimer@timer_for_setup
  2803  0159  3000               	movlw	0
  2804  015A  00F3               	movwf	SetTimer@timer_for_setup+1
  2805  015B  3032               	movlw	50
  2806  015C  00F4               	movwf	SetTimer@period
  2807  015D  3000               	movlw	0
  2808  015E  00F5               	movwf	SetTimer@period+1
  2809  015F  3187  2744  3180   	fcall	_SetTimer
  2810  0162  2A93               	goto	L37
  2811  0163                     l5516:	
  2812                           ;trans_ctrl.c: 1583: } else if ((vp1_pcnt == 2) && (timer_flags1.b0 == 1)) {
  2813                           
  2814                           ;trans_ctrl.c: 1582: ++vp1_pcnt;
  2815                           
  2816  0163  086D               	movf	_vp1_pcnt,w
  2817  0164  3A02               	xorlw	2
  2818  0165  1903               	btfsc	3,2
  2819  0166  1C7A               	btfss	_timer_flags1,0
  2820  0167  296D               	goto	l5524
  2821                           
  2822                           ;trans_ctrl.c: 1584: (output_0_7.b0 = 1);
  2823  0168  145B               	bsf	_output_0_7,0
  2824  0169                     L38:	
  2825                           
  2826                           ;trans_ctrl.c: 1585: ++vp1_pcnt;
  2827  0169  3001               	movlw	1
  2828  016A  00F6               	movwf	??_ProcessVacumPump1
  2829  016B  0876               	movf	??_ProcessVacumPump1,w
  2830  016C  2A97               	goto	L32
  2831  016D                     l5524:	
  2832                           ;trans_ctrl.c: 1586: } else if ((vp1_pcnt == 3) && (timer_flags1.b0 == 1)) {
  2833                           
  2834  016D  086D               	movf	_vp1_pcnt,w
  2835  016E  3A03               	xorlw	3
  2836  016F  1903               	btfsc	3,2
  2837  0170  1C7A               	btfss	_timer_flags1,0
  2838  0171  2980               	goto	l5532
  2839                           
  2840                           ;trans_ctrl.c: 1587: SetTimer(VP1_TMR, vp1_delay_time);
  2841  0172  3000               	movlw	0
  2842  0173  00F2               	movwf	SetTimer@timer_for_setup
  2843  0174  3000               	movlw	0
  2844  0175  00F3               	movwf	SetTimer@timer_for_setup+1
  2845  0176  0831               	movf	_vp1_delay_time+1,w
  2846  0177  01F5               	clrf	SetTimer@period+1
  2847  0178  07F5               	addwf	SetTimer@period+1,f
  2848  0179  0830               	movf	_vp1_delay_time,w
  2849  017A  01F4               	clrf	SetTimer@period
  2850  017B  07F4               	addwf	SetTimer@period,f
  2851  017C  3187  2744  3180   	fcall	_SetTimer
  2852  017F  2A93               	goto	L37
  2853  0180                     l5532:	
  2854                           ;trans_ctrl.c: 1589: } else if (vp1_pcnt == 4) {
  2855                           
  2856                           ;trans_ctrl.c: 1588: ++vp1_pcnt;
  2857                           
  2858  0180  086D               	movf	_vp1_pcnt,w
  2859  0181  3A04               	xorlw	4
  2860  0182  1D03               	skipz
  2861  0183  29C1               	goto	l5570
  2862                           
  2863                           ;trans_ctrl.c: 1590: if ((vacum_pump1_flags1.b5 == 0)) an0_out = vp1_idle_speed;
  2864  0184  1AFB               	btfsc	_vacum_pump1_flags1,5
  2865  0185  298C               	goto	l5538
  2866  0186  0833               	movf	_vp1_idle_speed+1,w
  2867  0187  01A1               	clrf	_an0_out+1
  2868  0188  07A1               	addwf	_an0_out+1,f
  2869  0189  0832               	movf	_vp1_idle_speed,w
  2870  018A  01A0               	clrf	_an0_out
  2871  018B  07A0               	addwf	_an0_out,f
  2872  018C                     l5538:	
  2873                           
  2874                           ;trans_ctrl.c: 1591: if ((vacum_pump1_flags1.b4 == 1) && (vacum_pump1_flags1.b5 == 1)) {
  2875  018C  1A7B               	btfsc	_vacum_pump1_flags1,4
  2876  018D  1EFB               	btfss	_vacum_pump1_flags1,5
  2877  018E  299E               	goto	l1048
  2878                           
  2879                           ;trans_ctrl.c: 1592: (vacum_pump1_flags1.b4 = 0);
  2880  018F  127B               	bcf	_vacum_pump1_flags1,4
  2881                           
  2882                           ;trans_ctrl.c: 1593: (output_0_7.b7 = 0);
  2883  0190  13DB               	bcf	_output_0_7,7
  2884                           
  2885                           ;trans_ctrl.c: 1594: (output_8_15.b1 = 0);
  2886  0191  10DC               	bcf	_output_8_15,1
  2887                           
  2888                           ;trans_ctrl.c: 1595: SetTimer(VP1_TMR, 50);
  2889  0192  3000               	movlw	0
  2890  0193  00F2               	movwf	SetTimer@timer_for_setup
  2891  0194  3000               	movlw	0
  2892  0195  00F3               	movwf	SetTimer@timer_for_setup+1
  2893  0196  3032               	movlw	50
  2894  0197  00F4               	movwf	SetTimer@period
  2895  0198  3000               	movlw	0
  2896  0199  00F5               	movwf	SetTimer@period+1
  2897  019A  3187  2744  3180   	fcall	_SetTimer
  2898  019D  2A93               	goto	L37
  2899  019E                     l1048:	
  2900                           ;trans_ctrl.c: 1597: } else if ((vacum_pump1_flags1.b4 == 1) && (vacum_pump1_flags1.b5 =
      +                          = 0)) {
  2901                           
  2902                           ;trans_ctrl.c: 1596: ++vp1_pcnt;
  2903                           
  2904  019E  1A7B               	btfsc	_vacum_pump1_flags1,4
  2905  019F  1AFB               	btfsc	_vacum_pump1_flags1,5
  2906  01A0  29B5               	goto	l1050
  2907                           
  2908                           ;trans_ctrl.c: 1598: (vacum_pump1_flags1.b4 = 0);
  2909  01A1  127B               	bcf	_vacum_pump1_flags1,4
  2910                           
  2911                           ;trans_ctrl.c: 1599: an0_out = vp1_production_speed;
  2912  01A2  0835               	movf	_vp1_production_speed+1,w
  2913  01A3  01A1               	clrf	_an0_out+1
  2914  01A4  07A1               	addwf	_an0_out+1,f
  2915  01A5  0834               	movf	_vp1_production_speed,w
  2916  01A6  01A0               	clrf	_an0_out
  2917  01A7  07A0               	addwf	_an0_out,f
  2918                           
  2919                           ;trans_ctrl.c: 1600: SetTimer(VP1_TMR, 700);
  2920  01A8  3000               	movlw	0
  2921  01A9  00F2               	movwf	SetTimer@timer_for_setup
  2922  01AA  3000               	movlw	0
  2923  01AB  00F3               	movwf	SetTimer@timer_for_setup+1
  2924  01AC  30BC               	movlw	188
  2925  01AD  00F4               	movwf	SetTimer@period
  2926  01AE  3002               	movlw	2
  2927  01AF  00F5               	movwf	SetTimer@period+1
  2928  01B0  3187  2744  3180   	fcall	_SetTimer
  2929                           
  2930                           ;trans_ctrl.c: 1601: vp1_pcnt = 6;
  2931  01B3  3006               	movlw	6
  2932  01B4  2A1A               	goto	L35
  2933  01B5                     l1050:	
  2934                           ;trans_ctrl.c: 1602: } else if ((timer_flags1.b0 == 1)) {
  2935                           
  2936  01B5  1C7A               	btfss	_timer_flags1,0
  2937  01B6  2B0B               	goto	l1004
  2938                           
  2939                           ;trans_ctrl.c: 1603: an0_out = 0;
  2940  01B7  01A0               	clrf	_an0_out
  2941  01B8  01A1               	clrf	_an0_out+1
  2942                           
  2943                           ;trans_ctrl.c: 1604: (output_0_7.b0 = 0);
  2944  01B9  105B               	bcf	_output_0_7,0
  2945                           
  2946                           ;trans_ctrl.c: 1605: (output_0_7.b7 = 0);
  2947  01BA  13DB               	bcf	_output_0_7,7
  2948                           
  2949                           ;trans_ctrl.c: 1606: (output_8_15.b1 = 0);
  2950  01BB  10DC               	bcf	_output_8_15,1
  2951                           
  2952                           ;trans_ctrl.c: 1607: (output_8_15.b3 = 0);
  2953  01BC  11DC               	bcf	_output_8_15,3
  2954                           
  2955                           ;trans_ctrl.c: 1608: vp1_pcnt = 7;
  2956  01BD  3007               	movlw	7
  2957  01BE                     L36:	
  2958  01BE  00F6               	movwf	??_ProcessVacumPump1
  2959  01BF  0876               	movf	??_ProcessVacumPump1,w
  2960  01C0  2A1D               	goto	L29
  2961  01C1                     l5570:	
  2962                           ;trans_ctrl.c: 1609: }
  2963                           ;trans_ctrl.c: 1610: } else if ((vp1_pcnt == 5) && (timer_flags1.b0 == 1)) {
  2964                           
  2965  01C1  086D               	movf	_vp1_pcnt,w
  2966  01C2  3A05               	xorlw	5
  2967  01C3  1903               	btfsc	3,2
  2968  01C4  1C7A               	btfss	_timer_flags1,0
  2969  01C5  29D3               	goto	l5580
  2970                           
  2971                           ;trans_ctrl.c: 1611: (output_8_15.b1 = 1);
  2972  01C6  14DC               	bsf	_output_8_15,1
  2973                           
  2974                           ;trans_ctrl.c: 1612: SetTimer(VP1_TMR, 700);
  2975  01C7  3000               	movlw	0
  2976  01C8  00F2               	movwf	SetTimer@timer_for_setup
  2977  01C9  3000               	movlw	0
  2978  01CA  00F3               	movwf	SetTimer@timer_for_setup+1
  2979  01CB  30BC               	movlw	188
  2980  01CC  00F4               	movwf	SetTimer@period
  2981  01CD  3002               	movlw	2
  2982  01CE  00F5               	movwf	SetTimer@period+1
  2983  01CF  3187  2744  3180   	fcall	_SetTimer
  2984  01D2  2A93               	goto	L37
  2985  01D3                     l5580:	
  2986                           ;trans_ctrl.c: 1614: } else if ((vp1_pcnt == 6) && (timer_flags1.b0 == 1)) {
  2987                           
  2988                           ;trans_ctrl.c: 1613: ++vp1_pcnt;
  2989                           
  2990  01D3  086D               	movf	_vp1_pcnt,w
  2991  01D4  3A06               	xorlw	6
  2992  01D5  1903               	btfsc	3,2
  2993  01D6  1C7A               	btfss	_timer_flags1,0
  2994  01D7  29EB               	goto	l5592
  2995                           
  2996                           ;trans_ctrl.c: 1615: SetTimer(VP1_TMR, vp1_delay_time);
  2997  01D8  3000               	movlw	0
  2998  01D9  00F2               	movwf	SetTimer@timer_for_setup
  2999  01DA  3000               	movlw	0
  3000  01DB  00F3               	movwf	SetTimer@timer_for_setup+1
  3001  01DC  0831               	movf	_vp1_delay_time+1,w
  3002  01DD  01F5               	clrf	SetTimer@period+1
  3003  01DE  07F5               	addwf	SetTimer@period+1,f
  3004  01DF  0830               	movf	_vp1_delay_time,w
  3005  01E0  01F4               	clrf	SetTimer@period
  3006  01E1  07F4               	addwf	SetTimer@period,f
  3007  01E2  3187  2744  3180   	fcall	_SetTimer
  3008                           
  3009                           ;trans_ctrl.c: 1616: vacum_pump1_state = VP1_RUN;
  3010  01E5  3002               	movlw	2
  3011  01E6  00F6               	movwf	??_ProcessVacumPump1
  3012  01E7  0876               	movf	??_ProcessVacumPump1,w
  3013  01E8  0020               	movlb	0	; select bank0
  3014  01E9  00EB               	movwf	_vacum_pump1_state
  3015  01EA  2ADC               	goto	l5716
  3016  01EB                     l5592:	
  3017                           ;trans_ctrl.c: 1619: } else if (vp1_pcnt == 7) {
  3018                           
  3019                           ;trans_ctrl.c: 1618: vp1_pcnt = 0;
  3020                           
  3021                           ;trans_ctrl.c: 1617: (vacum_pump1_flags1.b3 = 1);
  3022                           
  3023  01EB  086D               	movf	_vp1_pcnt,w
  3024  01EC  3A07               	xorlw	7
  3025  01ED  1D03               	skipz
  3026  01EE  2A1F               	goto	l5614
  3027                           
  3028                           ;trans_ctrl.c: 1620: if ((system_flags2.b0 == 1) || (vacum_pump1_flags1.b4 == 1)) {
  3029  01EF  1862               	btfsc	_system_flags2,0
  3030  01F0  29F3               	goto	l1061
  3031  01F1  1E7B               	btfss	_vacum_pump1_flags1,4
  3032  01F2  2B0B               	goto	l1004
  3033  01F3                     l1061:	
  3034                           
  3035                           ;trans_ctrl.c: 1621: if ((vacum_pump1_flags1.b4 == 1)) (vacum_pump1_flags1.b4 = 0);
  3036  01F3  1E7B               	btfss	_vacum_pump1_flags1,4
  3037  01F4  29F6               	goto	l1062
  3038  01F5  127B               	bcf	_vacum_pump1_flags1,4
  3039  01F6                     l1062:	
  3040                           
  3041                           ;trans_ctrl.c: 1622: if ((vacum_pump1_flags1.b5 == 1)) {
  3042  01F6  1EFB               	btfss	_vacum_pump1_flags1,5
  3043  01F7  2A05               	goto	l1063
  3044                           
  3045                           ;trans_ctrl.c: 1623: (output_0_7.b7 = 1);
  3046  01F8  17DB               	bsf	_output_0_7,7
  3047                           
  3048                           ;trans_ctrl.c: 1624: SetTimer(VP1_TMR, 50);
  3049  01F9  3000               	movlw	0
  3050  01FA  00F2               	movwf	SetTimer@timer_for_setup
  3051  01FB  3000               	movlw	0
  3052  01FC  00F3               	movwf	SetTimer@timer_for_setup+1
  3053  01FD  3032               	movlw	50
  3054  01FE  00F4               	movwf	SetTimer@period
  3055  01FF  3000               	movlw	0
  3056  0200  00F5               	movwf	SetTimer@period+1
  3057  0201  3187  2744  3180   	fcall	_SetTimer
  3058  0204  2A93               	goto	L37
  3059  0205                     l1063:	
  3060                           ;trans_ctrl.c: 1626: } else if ((vacum_pump1_flags1.b5 == 0)) {
  3061                           
  3062                           ;trans_ctrl.c: 1625: ++vp1_pcnt;
  3063                           
  3064  0205  1AFB               	btfsc	_vacum_pump1_flags1,5
  3065  0206  2B0B               	goto	l1004
  3066                           
  3067                           ;trans_ctrl.c: 1627: (output_0_7.b0 = 1);
  3068  0207  145B               	bsf	_output_0_7,0
  3069                           
  3070                           ;trans_ctrl.c: 1628: an0_out = vp1_production_speed;
  3071  0208  0835               	movf	_vp1_production_speed+1,w
  3072  0209  01A1               	clrf	_an0_out+1
  3073  020A  07A1               	addwf	_an0_out+1,f
  3074  020B  0834               	movf	_vp1_production_speed,w
  3075  020C  01A0               	clrf	_an0_out
  3076  020D  07A0               	addwf	_an0_out,f
  3077                           
  3078                           ;trans_ctrl.c: 1629: SetTimer(VP1_TMR, 700);
  3079  020E  3000               	movlw	0
  3080  020F  00F2               	movwf	SetTimer@timer_for_setup
  3081  0210  3000               	movlw	0
  3082  0211  00F3               	movwf	SetTimer@timer_for_setup+1
  3083  0212  30BC               	movlw	188
  3084  0213  00F4               	movwf	SetTimer@period
  3085  0214  3002               	movlw	2
  3086  0215  00F5               	movwf	SetTimer@period+1
  3087  0216  3187  2744  3180   	fcall	_SetTimer
  3088                           
  3089                           ;trans_ctrl.c: 1630: vp1_pcnt = 9;
  3090  0219  3009               	movlw	9
  3091  021A                     L35:	
  3092  021A  00F6               	movwf	??_ProcessVacumPump1
  3093  021B  0876               	movf	??_ProcessVacumPump1,w
  3094  021C  0020               	movlb	0	; select bank0
  3095  021D                     L29:	
  3096  021D  00ED               	movwf	_vp1_pcnt
  3097                           
  3098                           ;trans_ctrl.c: 1631: }
  3099                           ;trans_ctrl.c: 1632: }
  3100                           ;trans_ctrl.c: 1633: } else if ((vp1_pcnt == 8) && (timer_flags1.b0 == 1)) {
  3101  021E  2B0B               	goto	l1004
  3102  021F                     l5614:	
  3103  021F  086D               	movf	_vp1_pcnt,w
  3104  0220  3A08               	xorlw	8
  3105  0221  1903               	btfsc	3,2
  3106  0222  1C7A               	btfss	_timer_flags1,0
  3107  0223  2A31               	goto	l5624
  3108                           
  3109                           ;trans_ctrl.c: 1634: (output_0_7.b0 = 1);
  3110  0224  145B               	bsf	_output_0_7,0
  3111                           
  3112                           ;trans_ctrl.c: 1635: SetTimer(VP1_TMR, 700);
  3113  0225  3000               	movlw	0
  3114  0226  00F2               	movwf	SetTimer@timer_for_setup
  3115  0227  3000               	movlw	0
  3116  0228  00F3               	movwf	SetTimer@timer_for_setup+1
  3117  0229  30BC               	movlw	188
  3118  022A  00F4               	movwf	SetTimer@period
  3119  022B  3002               	movlw	2
  3120  022C  00F5               	movwf	SetTimer@period+1
  3121  022D  3187  2744  3180   	fcall	_SetTimer
  3122  0230  2A93               	goto	L37
  3123  0231                     l5624:	
  3124                           ;trans_ctrl.c: 1637: } else if ((vp1_pcnt == 9) && (timer_flags1.b0 == 1)) {
  3125                           
  3126                           ;trans_ctrl.c: 1636: ++vp1_pcnt;
  3127                           
  3128  0231  086D               	movf	_vp1_pcnt,w
  3129  0232  3A09               	xorlw	9
  3130  0233  1903               	btfsc	3,2
  3131  0234  1C7A               	btfss	_timer_flags1,0
  3132  0235  2B0B               	goto	l1004
  3133                           
  3134                           ;trans_ctrl.c: 1638: if ((vacum_pump1_flags1.b5 == 1)) {
  3135  0236  1EFB               	btfss	_vacum_pump1_flags1,5
  3136  0237  2A3A               	goto	l5632
  3137                           
  3138                           ;trans_ctrl.c: 1639: (output_0_7.b7 = 0);
  3139  0238  13DB               	bcf	_output_0_7,7
  3140                           
  3141                           ;trans_ctrl.c: 1640: (output_8_15.b1 = 1);
  3142  0239  14DC               	bsf	_output_8_15,1
  3143  023A                     l5632:	
  3144                           
  3145                           ;trans_ctrl.c: 1641: }
  3146                           ;trans_ctrl.c: 1642: SetTimer(VP1_TMR, vp1_delay_time);
  3147  023A  3000               	movlw	0
  3148  023B  00F2               	movwf	SetTimer@timer_for_setup
  3149  023C  3000               	movlw	0
  3150  023D  00F3               	movwf	SetTimer@timer_for_setup+1
  3151  023E  0831               	movf	_vp1_delay_time+1,w
  3152  023F  01F5               	clrf	SetTimer@period+1
  3153  0240  07F5               	addwf	SetTimer@period+1,f
  3154  0241  0830               	movf	_vp1_delay_time,w
  3155  0242  01F4               	clrf	SetTimer@period
  3156  0243  07F4               	addwf	SetTimer@period,f
  3157  0244  3187  2744  3180   	fcall	_SetTimer
  3158                           
  3159                           ;trans_ctrl.c: 1643: vacum_pump1_state = VP1_RUN;
  3160  0247  3002               	movlw	2
  3161  0248  00F6               	movwf	??_ProcessVacumPump1
  3162  0249  0876               	movf	??_ProcessVacumPump1,w
  3163  024A  0020               	movlb	0	; select bank0
  3164  024B  00EB               	movwf	_vacum_pump1_state
  3165                           
  3166                           ;trans_ctrl.c: 1644: (output_8_15.b3 = 1);
  3167  024C  15DC               	bsf	_output_8_15,3
  3168  024D  2ADC               	goto	l5716
  3169  024E                     l1071:	
  3170                           ;trans_ctrl.c: 1650: case VP1_RUN:
  3171                           
  3172                           ;trans_ctrl.c: 1647: }
  3173                           ;trans_ctrl.c: 1648: break;
  3174                           
  3175                           ;trans_ctrl.c: 1646: vp1_pcnt = 0;
  3176                           
  3177                           ;trans_ctrl.c: 1645: (vacum_pump1_flags1.b3 = 1);
  3178                           
  3179                           
  3180                           ;trans_ctrl.c: 1651: if ((taster_flags1.b0 == 1) && (timer_flags2.b5 == 1)) {
  3181  024E  1863               	btfsc	_taster_flags1,0
  3182  024F  1EE8               	btfss	_timer_flags2,5
  3183  0250  2A5E               	goto	l5648
  3184                           
  3185                           ;trans_ctrl.c: 1652: SetTimer(VP1_CONTROL_DELAY_TMR, 500);
  3186  0251  3008               	movlw	8
  3187  0252  00F2               	movwf	SetTimer@timer_for_setup
  3188  0253  3000               	movlw	0
  3189  0254  00F3               	movwf	SetTimer@timer_for_setup+1
  3190  0255  30F4               	movlw	244
  3191  0256  00F4               	movwf	SetTimer@period
  3192  0257  3001               	movlw	1
  3193  0258  00F5               	movwf	SetTimer@period+1
  3194  0259  3187  2744  3180   	fcall	_SetTimer
  3195                           
  3196                           ;trans_ctrl.c: 1653: vacum_pump1_state = VP1_OFF;
  3197  025C  0020               	movlb	0	; select bank0
  3198  025D  01EB               	clrf	_vacum_pump1_state
  3199  025E                     l5648:	
  3200                           
  3201                           ;trans_ctrl.c: 1654: }
  3202                           ;trans_ctrl.c: 1655: if ((activ_unit == VACUM_PUMP1) && !(vacum_pump1_flags1.b1 == 1)) a
      +                          ctiv_unit = FEEDER1;
  3203  025E  0838               	movf	_activ_unit,w
  3204  025F  3A06               	xorlw	6
  3205  0260  1903               	btfsc	3,2
  3206  0261  18FB               	btfsc	_vacum_pump1_flags1,1
  3207  0262  2A64               	goto	l5654
  3208  0263  01B8               	clrf	_activ_unit
  3209  0264                     l5654:	
  3210                           
  3211                           ;trans_ctrl.c: 1656: if (!(input_0_7.b2 == 0)) {
  3212  0264  1D57               	btfss	_input_0_7,2
  3213  0265  2A6B               	goto	l5660
  3214                           
  3215                           ;trans_ctrl.c: 1657: (vacum_pump1_flags2.b0 = 1);
  3216  0266  146A               	bsf	_vacum_pump1_flags2,0
  3217                           
  3218                           ;trans_ctrl.c: 1658: vacum_pump1_state = VP1_ERROR;
  3219  0267  3004               	movlw	4
  3220  0268  00F6               	movwf	??_ProcessVacumPump1
  3221  0269  0876               	movf	??_ProcessVacumPump1,w
  3222  026A  00EB               	movwf	_vacum_pump1_state
  3223  026B                     l5660:	
  3224                           
  3225                           ;trans_ctrl.c: 1659: }
  3226                           ;trans_ctrl.c: 1660: if ((input_0_7.b0 == 1) || (input_0_7.b1 == 1)) {
  3227  026B  1857               	btfsc	_input_0_7,0
  3228  026C  2A6F               	goto	l1077
  3229  026D  1CD7               	btfss	_input_0_7,1
  3230  026E  2A77               	goto	l5672
  3231  026F                     l1077:	
  3232                           
  3233                           ;trans_ctrl.c: 1661: if ((input_0_7.b0 == 1)) (vacum_pump1_flags2.b2 = 1);
  3234  026F  1C57               	btfss	_input_0_7,0
  3235  0270  2A72               	goto	l1078
  3236  0271  156A               	bsf	_vacum_pump1_flags2,2
  3237  0272                     l1078:	
  3238                           
  3239                           ;trans_ctrl.c: 1662: if ((input_0_7.b1 == 1)) (vacum_pump1_flags2.b1 = 1);
  3240  0272  1CD7               	btfss	_input_0_7,1
  3241  0273  2A75               	goto	l5668
  3242  0274  14EA               	bsf	_vacum_pump1_flags2,1
  3243  0275                     l5668:	
  3244                           
  3245                           ;trans_ctrl.c: 1663: vacum_pump1_state = VP1_ERROR;
  3246  0275  3004               	movlw	4
  3247  0276  2AC3               	goto	L33
  3248  0277                     l5672:	
  3249                           ;trans_ctrl.c: 1665: } else if (vp1_pcnt == 0) {
  3250                           
  3251                           ;trans_ctrl.c: 1664: break;
  3252                           
  3253  0277  08ED               	movf	_vp1_pcnt,f
  3254  0278  1D03               	skipz
  3255  0279  2ACE               	goto	l5708
  3256                           
  3257                           ;trans_ctrl.c: 1666: if ((vacum_pump1_flags1.b4 == 1)) {
  3258  027A  1E7B               	btfss	_vacum_pump1_flags1,4
  3259  027B  2A99               	goto	l5688
  3260                           
  3261                           ;trans_ctrl.c: 1667: (vacum_pump1_flags1.b4 = 0);
  3262  027C  127B               	bcf	_vacum_pump1_flags1,4
  3263                           
  3264                           ;trans_ctrl.c: 1668: if (vp1_cleaning_cnt) {
  3265  027D  0021               	movlb	1	; select bank1
  3266  027E  0837               	movf	(_vp1_cleaning_cnt+1)^(0+128),w
  3267  027F  0436               	iorwf	_vp1_cleaning_cnt^(0+128),w
  3268  0280  1903               	skipnz
  3269  0281  2A88               	goto	l1083
  3270                           
  3271                           ;trans_ctrl.c: 1669: --vp1_cleaning_cnt;
  3272  0282  3001               	movlw	1
  3273  0283  02B6               	subwf	_vp1_cleaning_cnt^(0+128),f
  3274  0284  3000               	movlw	0
  3275  0285  3BB7               	subwfb	(_vp1_cleaning_cnt+1)^(0+128),f
  3276                           
  3277                           ;trans_ctrl.c: 1670: (vacum_pump1_flags1.b1 = 0);
  3278  0286  10FB               	bcf	_vacum_pump1_flags1,1
  3279                           
  3280                           ;trans_ctrl.c: 1671: } else {
  3281  0287  2B0B               	goto	l1004
  3282  0288                     l1083:	
  3283                           
  3284                           ;trans_ctrl.c: 1672: (vacum_pump1_flags1.b1 = 1);
  3285  0288  14FB               	bsf	_vacum_pump1_flags1,1
  3286                           
  3287                           ;trans_ctrl.c: 1673: if ((vacum_pump1_flags1.b5 == 0)) an0_out = vp1_idle_speed;
  3288  0289  1AFB               	btfsc	_vacum_pump1_flags1,5
  3289  028A  2A92               	goto	l5686
  3290  028B  0020               	movlb	0	; select bank0
  3291  028C  0833               	movf	_vp1_idle_speed+1,w
  3292  028D  01A1               	clrf	_an0_out+1
  3293  028E  07A1               	addwf	_an0_out+1,f
  3294  028F  0832               	movf	_vp1_idle_speed,w
  3295  0290  01A0               	clrf	_an0_out
  3296  0291  07A0               	addwf	_an0_out,f
  3297  0292                     l5686:	
  3298                           
  3299                           ;trans_ctrl.c: 1674: (vacum_pump1_flags1.b3 = 0);
  3300  0292  11FB               	bcf	_vacum_pump1_flags1,3
  3301  0293                     L37:	
  3302                           
  3303                           ;trans_ctrl.c: 1675: ++vp1_pcnt;
  3304  0293  3001               	movlw	1
  3305  0294  00F6               	movwf	??_ProcessVacumPump1
  3306  0295  0876               	movf	??_ProcessVacumPump1,w
  3307  0296  0020               	movlb	0	; select bank0
  3308  0297                     L32:	
  3309  0297  07ED               	addwf	_vp1_pcnt,f
  3310                           
  3311                           ;trans_ctrl.c: 1676: }
  3312                           ;trans_ctrl.c: 1677: } else if ((feeder1_state == FEEDER1_CHARGING) || (feeder2_state ==
      +                           FEEDER2_CHARGING) || (feeder3_state == FEEDER3_CHARGING) || (feeder4_state == FEEDER4_C
      +                          HARGING) || (feeder5_state == FEEDER5_CHARGING) || (feeder_coex_state == FEEDER_COEX_CHA
      +                          RGING))
  3313  0298  2B0B               	goto	l1004
  3314  0299                     l5688:	
  3315  0299  0847               	movf	_feeder1_state,w
  3316  029A  3A02               	xorlw	2
  3317  029B  1903               	skipnz
  3318  029C  2AB1               	goto	l5700
  3319  029D  084A               	movf	_feeder2_state,w
  3320  029E  3A02               	xorlw	2
  3321  029F  1903               	skipnz
  3322  02A0  2AB1               	goto	l5700
  3323  02A1  084D               	movf	_feeder3_state,w
  3324  02A2  3A02               	xorlw	2
  3325  02A3  1903               	skipnz
  3326  02A4  2AB1               	goto	l5700
  3327  02A5  0850               	movf	_feeder4_state,w
  3328  02A6  3A02               	xorlw	2
  3329  02A7  1903               	skipnz
  3330  02A8  2AB1               	goto	l5700
  3331  02A9  0853               	movf	_feeder5_state,w
  3332  02AA  3A02               	xorlw	2
  3333  02AB  1903               	skipnz
  3334  02AC  2AB1               	goto	l5700
  3335  02AD  0856               	movf	_feeder_coex_state,w
  3336  02AE  3A02               	xorlw	2
  3337  02AF  1D03               	skipz
  3338  02B0  2ABF               	goto	l1087
  3339  02B1                     l5700:	
  3340                           
  3341                           ;trans_ctrl.c: 1680: SetTimer(VP1_TMR, vp1_delay_time);
  3342  02B1  3000               	movlw	0
  3343  02B2  00F2               	movwf	SetTimer@timer_for_setup
  3344  02B3  3000               	movlw	0
  3345  02B4  00F3               	movwf	SetTimer@timer_for_setup+1
  3346  02B5  0831               	movf	_vp1_delay_time+1,w
  3347  02B6  01F5               	clrf	SetTimer@period+1
  3348  02B7  07F5               	addwf	SetTimer@period+1,f
  3349  02B8  0830               	movf	_vp1_delay_time,w
  3350  02B9  01F4               	clrf	SetTimer@period
  3351  02BA  07F4               	addwf	SetTimer@period,f
  3352  02BB  3187  2744  3180   	fcall	_SetTimer
  3353                           
  3354                           ;trans_ctrl.c: 1681: } else if ((timer_flags1.b0 == 1)) {
  3355  02BE  2B0B               	goto	l1004
  3356  02BF                     l1087:	
  3357  02BF  1C7A               	btfss	_timer_flags1,0
  3358  02C0  2AC7               	goto	l5706
  3359                           
  3360                           ;trans_ctrl.c: 1682: (vacum_pump1_flags1.b3 = 0);
  3361  02C1  11FB               	bcf	_vacum_pump1_flags1,3
  3362                           
  3363                           ;trans_ctrl.c: 1683: vacum_pump1_state = VP1_IDLE;
  3364  02C2  3003               	movlw	3
  3365  02C3                     L33:	
  3366  02C3  00F6               	movwf	??_ProcessVacumPump1
  3367  02C4  0876               	movf	??_ProcessVacumPump1,w
  3368  02C5  00EB               	movwf	_vacum_pump1_state
  3369                           
  3370                           ;trans_ctrl.c: 1684: } else an0_out = vp1_production_speed;
  3371  02C6  2B0B               	goto	l1004
  3372  02C7                     l5706:	
  3373  02C7  0835               	movf	_vp1_production_speed+1,w
  3374  02C8  01A1               	clrf	_an0_out+1
  3375  02C9  07A1               	addwf	_an0_out+1,f
  3376  02CA  0834               	movf	_vp1_production_speed,w
  3377  02CB  01A0               	clrf	_an0_out
  3378  02CC  07A0               	addwf	_an0_out,f
  3379                           
  3380                           ;trans_ctrl.c: 1685: } else if ((vp1_pcnt == 1) && (vacum_pump1_flags1.b2 == 1)) {
  3381  02CD  2B0B               	goto	l1004
  3382  02CE                     l5708:	
  3383  02CE  086D               	movf	_vp1_pcnt,w
  3384  02CF  3A01               	xorlw	1
  3385  02D0  1903               	btfsc	3,2
  3386  02D1  1D7B               	btfss	_vacum_pump1_flags1,2
  3387  02D2  2B0B               	goto	l1004
  3388                           
  3389                           ;trans_ctrl.c: 1686: (vacum_pump1_flags1.b2 = 0);
  3390  02D3  117B               	bcf	_vacum_pump1_flags1,2
  3391                           
  3392                           ;trans_ctrl.c: 1687: if ((vacum_pump1_flags1.b5 == 0)) an0_out = vp1_production_speed;
  3393  02D4  1AFB               	btfsc	_vacum_pump1_flags1,5
  3394  02D5  2ADC               	goto	l5716
  3395  02D6  0835               	movf	_vp1_production_speed+1,w
  3396  02D7  01A1               	clrf	_an0_out+1
  3397  02D8  07A1               	addwf	_an0_out+1,f
  3398  02D9  0834               	movf	_vp1_production_speed,w
  3399  02DA  01A0               	clrf	_an0_out
  3400  02DB  07A0               	addwf	_an0_out,f
  3401  02DC                     l5716:	
  3402                           
  3403                           ;trans_ctrl.c: 1688: (vacum_pump1_flags1.b3 = 1);
  3404  02DC  15FB               	bsf	_vacum_pump1_flags1,3
  3405  02DD                     l5718:	
  3406                           
  3407                           ;trans_ctrl.c: 1689: vp1_pcnt = 0;
  3408  02DD  01ED               	clrf	_vp1_pcnt
  3409                           
  3410                           ;trans_ctrl.c: 1690: }
  3411                           ;trans_ctrl.c: 1691: break;
  3412  02DE  2B0B               	goto	l1004
  3413  02DF                     l5720:	
  3414                           ;trans_ctrl.c: 1693: case VP1_ERROR:
  3415                           
  3416                           
  3417                           ;trans_ctrl.c: 1694: if (activ_unit == VACUM_PUMP1) activ_unit = FEEDER1;
  3418  02DF  0838               	movf	_activ_unit,w
  3419  02E0  3A06               	xorlw	6
  3420  02E1  1903               	btfsc	3,2
  3421  02E2  01B8               	clrf	_activ_unit
  3422                           
  3423                           ;trans_ctrl.c: 1695: if ((taster_flags1.b0 == 1) && (timer_flags2.b5 == 1)) {
  3424  02E3  1863               	btfsc	_taster_flags1,0
  3425  02E4  1EE8               	btfss	_timer_flags2,5
  3426  02E5  2AF3               	goto	l5732
  3427                           
  3428                           ;trans_ctrl.c: 1696: SetTimer(VP1_CONTROL_DELAY_TMR, 500);
  3429  02E6  3008               	movlw	8
  3430  02E7  00F2               	movwf	SetTimer@timer_for_setup
  3431  02E8  3000               	movlw	0
  3432  02E9  00F3               	movwf	SetTimer@timer_for_setup+1
  3433  02EA  30F4               	movlw	244
  3434  02EB  00F4               	movwf	SetTimer@period
  3435  02EC  3001               	movlw	1
  3436  02ED  00F5               	movwf	SetTimer@period+1
  3437  02EE  3187  2744  3180   	fcall	_SetTimer
  3438                           
  3439                           ;trans_ctrl.c: 1697: vacum_pump1_state = VP1_OFF;
  3440  02F1  0020               	movlb	0	; select bank0
  3441  02F2  01EB               	clrf	_vacum_pump1_state
  3442  02F3                     l5732:	
  3443                           
  3444                           ;trans_ctrl.c: 1698: }
  3445                           ;trans_ctrl.c: 1699: if ((input_0_7.b0 == 1)) (vacum_pump1_flags2.b2 = 1);
  3446  02F3  1857               	btfsc	_input_0_7,0
  3447  02F4  156A               	bsf	_vacum_pump1_flags2,2
  3448                           
  3449                           ;trans_ctrl.c: 1700: if ((input_0_7.b1 == 1)) (vacum_pump1_flags2.b1 = 1);
  3450  02F5  18D7               	btfsc	_input_0_7,1
  3451  02F6  14EA               	bsf	_vacum_pump1_flags2,1
  3452                           
  3453                           ;trans_ctrl.c: 1701: (output_0_7.b0 = 0);
  3454  02F7  105B               	bcf	_output_0_7,0
  3455                           
  3456                           ;trans_ctrl.c: 1702: (output_0_7.b7 = 0);
  3457  02F8  13DB               	bcf	_output_0_7,7
  3458                           
  3459                           ;trans_ctrl.c: 1703: (output_8_15.b1 = 0);
  3460  02F9  10DC               	bcf	_output_8_15,1
  3461                           
  3462                           ;trans_ctrl.c: 1704: (output_8_15.b2 = 0);
  3463  02FA  115C               	bcf	_output_8_15,2
  3464                           
  3465                           ;trans_ctrl.c: 1705: (output_8_15.b3 = 0);
  3466  02FB  11DC               	bcf	_output_8_15,3
  3467                           
  3468                           ;trans_ctrl.c: 1706: (vacum_pump1_flags1.b3 = 0);
  3469  02FC  11FB               	bcf	_vacum_pump1_flags1,3
  3470                           
  3471                           ;trans_ctrl.c: 1707: an0_out = 0;
  3472  02FD  01A0               	clrf	_an0_out
  3473  02FE  01A1               	clrf	_an0_out+1
  3474                           
  3475                           ;trans_ctrl.c: 1709: }
  3476                           
  3477                           ;trans_ctrl.c: 1708: break;
  3478  02FF  2B0B               	goto	l1004
  3479  0300                     l5742:	
  3480  0300  0020               	movlb	0	; select bank0
  3481  0301  086B               	movf	_vacum_pump1_state,w
  3482                           
  3483                           ; Switch size 1, requested type "space"
  3484                           ; Number of cases is 5, Range of values is 0 to 4
  3485                           ; switch strategies available:
  3486                           ; Name         Instructions Cycles
  3487                           ; direct_byte           16     6 (fixed)
  3488                           ; simple_byte           16     9 (average)
  3489                           ; jumptable            260     6 (fixed)
  3490                           ;	Chosen strategy is direct_byte
  3491  0302  0084               	movwf	4
  3492  0303  3005               	movlw	5
  3493  0304  0204               	subwf	4,w
  3494  0305  1803               	skipnc
  3495  0306  2B0B               	goto	l1004
  3496  0307  3190               	movlp	high S6936
  3497  0308  3504               	lslf	4,w
  3498  0309  3E1E               	addlw	low S6936
  3499  030A  0082               	movwf	2
  3500  030B                     l1004:	
  3501                           
  3502                           ;trans_ctrl.c: 1711: if ((vacum_pump1_flags1.b1 == 1) && !(vacum_pump1_flags1.b3 == 1)) 
      +                          {
  3503  030B  1CFB               	btfss	_vacum_pump1_flags1,1
  3504  030C  0008               	return
  3505  030D  19FB               	btfsc	_vacum_pump1_flags1,3
  3506  030E  0008               	return
  3507                           
  3508                           ;trans_ctrl.c: 1712: if (vp1_cl_pcnt == 0) {
  3509  030F  0020               	movlb	0	; select bank0
  3510  0310  08EC               	movf	_vp1_cl_pcnt,f
  3511  0311  1D03               	skipz
  3512  0312  2B24               	goto	l5754
  3513                           
  3514                           ;trans_ctrl.c: 1713: (output_8_15.b3 = 0);
  3515  0313  11DC               	bcf	_output_8_15,3
  3516                           
  3517                           ;trans_ctrl.c: 1714: SetTimer(PISTON_TMR, 100);
  3518  0314  3002               	movlw	2
  3519  0315  00F2               	movwf	SetTimer@timer_for_setup
  3520  0316  3000               	movlw	0
  3521  0317  00F3               	movwf	SetTimer@timer_for_setup+1
  3522  0318  3064               	movlw	100
  3523  0319  00F4               	movwf	SetTimer@period
  3524  031A  3000               	movlw	0
  3525  031B  00F5               	movwf	SetTimer@period+1
  3526  031C  3187  2744         	fcall	_SetTimer
  3527                           
  3528                           ;trans_ctrl.c: 1715: ++vp1_cl_pcnt;
  3529  031E  3001               	movlw	1
  3530  031F  00F6               	movwf	??_ProcessVacumPump1
  3531  0320  0876               	movf	??_ProcessVacumPump1,w
  3532  0321  0020               	movlb	0	; select bank0
  3533  0322  07EC               	addwf	_vp1_cl_pcnt,f
  3534                           
  3535                           ;trans_ctrl.c: 1716: } else if ((vp1_cl_pcnt == 1) && (timer_flags1.b3 == 1)) {
  3536  0323  0008               	return
  3537  0324                     l5754:	
  3538  0324  086C               	movf	_vp1_cl_pcnt,w
  3539  0325  3A01               	xorlw	1
  3540  0326  1903               	btfsc	3,2
  3541  0327  1DFA               	btfss	_timer_flags1,3
  3542  0328  2B3A               	goto	l5764
  3543                           
  3544                           ;trans_ctrl.c: 1717: (output_8_15.b2 = 1);
  3545  0329  155C               	bsf	_output_8_15,2
  3546                           
  3547                           ;trans_ctrl.c: 1718: SetTimer(VP1_TMR, 500);
  3548  032A  3000               	movlw	0
  3549  032B  00F2               	movwf	SetTimer@timer_for_setup
  3550  032C  3000               	movlw	0
  3551  032D  00F3               	movwf	SetTimer@timer_for_setup+1
  3552  032E  30F4               	movlw	244
  3553  032F  00F4               	movwf	SetTimer@period
  3554  0330  3001               	movlw	1
  3555  0331  00F5               	movwf	SetTimer@period+1
  3556  0332  3187  2744         	fcall	_SetTimer
  3557                           
  3558                           ;trans_ctrl.c: 1719: ++vp1_cl_pcnt;
  3559  0334  3001               	movlw	1
  3560  0335  00F6               	movwf	??_ProcessVacumPump1
  3561  0336  0876               	movf	??_ProcessVacumPump1,w
  3562  0337  0020               	movlb	0	; select bank0
  3563  0338  07EC               	addwf	_vp1_cl_pcnt,f
  3564                           
  3565                           ;trans_ctrl.c: 1720: } else if ((vp1_cl_pcnt == 2) && (timer_flags1.b0 == 1)) {
  3566  0339  0008               	return
  3567  033A                     l5764:	
  3568  033A  086C               	movf	_vp1_cl_pcnt,w
  3569  033B  3A02               	xorlw	2
  3570  033C  1903               	btfsc	3,2
  3571  033D  1C7A               	btfss	_timer_flags1,0
  3572  033E  2B50               	goto	l5774
  3573                           
  3574                           ;trans_ctrl.c: 1721: (output_8_15.b2 = 0);
  3575  033F  115C               	bcf	_output_8_15,2
  3576                           
  3577                           ;trans_ctrl.c: 1722: SetTimer(VP1_TMR, 1000);
  3578  0340  3000               	movlw	0
  3579  0341  00F2               	movwf	SetTimer@timer_for_setup
  3580  0342  3000               	movlw	0
  3581  0343  00F3               	movwf	SetTimer@timer_for_setup+1
  3582  0344  30E8               	movlw	232
  3583  0345  00F4               	movwf	SetTimer@period
  3584  0346  3003               	movlw	3
  3585  0347  00F5               	movwf	SetTimer@period+1
  3586  0348  3187  2744         	fcall	_SetTimer
  3587                           
  3588                           ;trans_ctrl.c: 1723: ++vp1_cl_pcnt;
  3589  034A  3001               	movlw	1
  3590  034B  00F6               	movwf	??_ProcessVacumPump1
  3591  034C  0876               	movf	??_ProcessVacumPump1,w
  3592  034D  0020               	movlb	0	; select bank0
  3593  034E  07EC               	addwf	_vp1_cl_pcnt,f
  3594                           
  3595                           ;trans_ctrl.c: 1724: } else if ((vp1_cl_pcnt == 3) && (timer_flags1.b0 == 1)) {
  3596  034F  0008               	return
  3597  0350                     l5774:	
  3598  0350  086C               	movf	_vp1_cl_pcnt,w
  3599  0351  3A03               	xorlw	3
  3600  0352  1903               	btfsc	3,2
  3601  0353  1C7A               	btfss	_timer_flags1,0
  3602  0354  2B66               	goto	l5784
  3603                           
  3604                           ;trans_ctrl.c: 1725: (output_8_15.b3 = 1);
  3605  0355  15DC               	bsf	_output_8_15,3
  3606                           
  3607                           ;trans_ctrl.c: 1726: SetTimer(PISTON_TMR, 100);
  3608  0356  3002               	movlw	2
  3609  0357  00F2               	movwf	SetTimer@timer_for_setup
  3610  0358  3000               	movlw	0
  3611  0359  00F3               	movwf	SetTimer@timer_for_setup+1
  3612  035A  3064               	movlw	100
  3613  035B  00F4               	movwf	SetTimer@period
  3614  035C  3000               	movlw	0
  3615  035D  00F5               	movwf	SetTimer@period+1
  3616  035E  3187  2744         	fcall	_SetTimer
  3617                           
  3618                           ;trans_ctrl.c: 1727: ++vp1_cl_pcnt;
  3619  0360  3001               	movlw	1
  3620  0361  00F6               	movwf	??_ProcessVacumPump1
  3621  0362  0876               	movf	??_ProcessVacumPump1,w
  3622  0363  0020               	movlb	0	; select bank0
  3623  0364  07EC               	addwf	_vp1_cl_pcnt,f
  3624                           
  3625                           ;trans_ctrl.c: 1728: } else if ((vp1_cl_pcnt == 4) && (timer_flags1.b3 == 1)) {
  3626  0365  0008               	return
  3627  0366                     l5784:	
  3628  0366  086C               	movf	_vp1_cl_pcnt,w
  3629  0367  3A04               	xorlw	4
  3630  0368  1D03               	skipz
  3631  0369  0008               	return
  3632  036A  1DFA               	btfss	_timer_flags1,3
  3633  036B  0008               	return
  3634                           
  3635                           ;trans_ctrl.c: 1729: vp1_cleaning_cnt = vp1_cleaning_cycles;
  3636  036C  082F               	movf	_vp1_cleaning_cycles+1,w
  3637  036D  0021               	movlb	1	; select bank1
  3638  036E  01B7               	clrf	(_vp1_cleaning_cnt+1)^(0+128)
  3639  036F  07B7               	addwf	(_vp1_cleaning_cnt+1)^(0+128),f
  3640  0370  0020               	movlb	0	; select bank0
  3641  0371  082E               	movf	_vp1_cleaning_cycles,w
  3642  0372  0021               	movlb	1	; select bank1
  3643  0373  01B6               	clrf	_vp1_cleaning_cnt^(0+128)
  3644  0374  07B6               	addwf	_vp1_cleaning_cnt^(0+128),f
  3645                           
  3646                           ;trans_ctrl.c: 1730: (vacum_pump1_flags1.b1 = 0);
  3647  0375  10FB               	bcf	_vacum_pump1_flags1,1
  3648                           
  3649                           ;trans_ctrl.c: 1731: (vacum_pump1_flags1.b2 = 1);
  3650  0376  157B               	bsf	_vacum_pump1_flags1,2
  3651                           
  3652                           ;trans_ctrl.c: 1732: vp1_cl_pcnt = 0;
  3653  0377  0020               	movlb	0	; select bank0
  3654  0378  01EC               	clrf	_vp1_cl_pcnt
  3655  0379  0008               	return
  3656  037A                     __end_of_ProcessVacumPump1:	
  3657                           
  3658                           	psect	swtext2
  3659  101E                     __pswtext2:	
  3660  101E                     S6936:	
  3661  101E  3180  2883         	ljmp	l5362
  3662  1020  3180  28A9         	ljmp	l5392
  3663  1022  3182  2A4E         	ljmp	l1071
  3664  1024  3181  2911         	ljmp	l5466
  3665  1026  3182  2ADF         	ljmp	l5720
  3666                           
  3667                           	psect	text5
  3668  0CAC                     __ptext5:	
  3669 ;; *************** function _ProcessFeederCoex *****************
  3670 ;; Defined at:
  3671 ;;		line 1399 in file "trans_ctrl.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;		None
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;		None
  3676 ;; Return value:  Size  Location     Type
  3677 ;;		None               void
  3678 ;; Registers used:
  3679 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3685 ;;      Params:         0       0       0       0       0       0       0       0
  3686 ;;      Locals:         0       0       0       0       0       0       0       0
  3687 ;;      Temps:          1       0       0       0       0       0       0       0
  3688 ;;      Totals:         1       0       0       0       0       0       0       0
  3689 ;;Total ram usage:        1 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; Hardware stack levels required when called:    3
  3692 ;; This function calls:
  3693 ;;		_SetTimer
  3694 ;; This function is called by:
  3695 ;;		_main
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           
  3700                           ;psect for function _ProcessFeederCoex
  3701  0CAC                     _ProcessFeederCoex:	
  3702                           
  3703                           ;trans_ctrl.c: 1401: switch (feeder_coex_state) {
  3704                           
  3705                           ;incstack = 0
  3706                           ; Regs used in _ProcessFeederCoex: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3707  0CAC  2D85               	goto	l5338
  3708  0CAD                     l5226:	
  3709                           ;trans_ctrl.c: 1403: case FEEDER_COEX_OFF:
  3710                           
  3711                           
  3712                           ;trans_ctrl.c: 1404: if (activ_unit == FEEDER_COEX) activ_unit = VACUM_PUMP1;
  3713  0CAD  0020               	movlb	0	; select bank0
  3714  0CAE  0838               	movf	_activ_unit,w
  3715  0CAF  3A05               	xorlw	5
  3716  0CB0  1D03               	skipz
  3717  0CB1  2CB6               	goto	l5230
  3718  0CB2  3006               	movlw	6
  3719  0CB3  00F6               	movwf	??_ProcessFeederCoex
  3720  0CB4  0876               	movf	??_ProcessFeederCoex,w
  3721  0CB5  00B8               	movwf	_activ_unit
  3722  0CB6                     l5230:	
  3723                           
  3724                           ;trans_ctrl.c: 1405: if ((taster_flags1.b1 == 1) && (timer_flags3.b3 == 1)) {
  3725  0CB6  18E3               	btfsc	_taster_flags1,1
  3726  0CB7  1DE9               	btfss	_timer_flags3,3
  3727  0CB8  2CC6               	goto	l5238
  3728                           
  3729                           ;trans_ctrl.c: 1406: SetTimer(FEEDER_COEX_CONTROL_DELAY_TMR, 100);
  3730  0CB9  300E               	movlw	14
  3731  0CBA  00F2               	movwf	SetTimer@timer_for_setup
  3732  0CBB  3000               	movlw	0
  3733  0CBC  00F3               	movwf	SetTimer@timer_for_setup+1
  3734  0CBD  3064               	movlw	100
  3735  0CBE  00F4               	movwf	SetTimer@period
  3736  0CBF  3000               	movlw	0
  3737  0CC0  00F5               	movwf	SetTimer@period+1
  3738  0CC1  3187  2744         	fcall	_SetTimer
  3739                           
  3740                           ;trans_ctrl.c: 1407: feeder_coex_state = FEEDER_COEX_DISCHARGING;
  3741  0CC3  0020               	movlb	0	; select bank0
  3742  0CC4  01D6               	clrf	_feeder_coex_state
  3743  0CC5  0AD6               	incf	_feeder_coex_state,f
  3744  0CC6                     l5238:	
  3745                           
  3746                           ;trans_ctrl.c: 1408: }
  3747                           ;trans_ctrl.c: 1409: (output_0_7.b6 = 0);
  3748  0CC6  135B               	bcf	_output_0_7,6
  3749                           
  3750                           ;trans_ctrl.c: 1410: feeder_coex_flags1._byte = 0x00;
  3751  0CC7  01D4               	clrf	_feeder_coex_flags1
  3752                           
  3753                           ;trans_ctrl.c: 1411: break;
  3754  0CC8  0008               	return
  3755  0CC9                     l958:	
  3756                           ;trans_ctrl.c: 1413: case FEEDER_COEX_DISCHARGING:
  3757                           
  3758                           
  3759                           ;trans_ctrl.c: 1414: if ((taster_flags1.b1 == 1) && (timer_flags3.b3 == 1)) {
  3760  0CC9  18E3               	btfsc	_taster_flags1,1
  3761  0CCA  1DE9               	btfss	_timer_flags3,3
  3762  0CCB  2CD9               	goto	l5248
  3763                           
  3764                           ;trans_ctrl.c: 1415: SetTimer(FEEDER_COEX_CONTROL_DELAY_TMR, 100);
  3765  0CCC  300E               	movlw	14
  3766  0CCD  00F2               	movwf	SetTimer@timer_for_setup
  3767  0CCE  3000               	movlw	0
  3768  0CCF  00F3               	movwf	SetTimer@timer_for_setup+1
  3769  0CD0  3064               	movlw	100
  3770  0CD1  00F4               	movwf	SetTimer@period
  3771  0CD2  3000               	movlw	0
  3772  0CD3  00F5               	movwf	SetTimer@period+1
  3773  0CD4  3187  2744  318C   	fcall	_SetTimer
  3774                           
  3775                           ;trans_ctrl.c: 1416: feeder_coex_state = FEEDER_COEX_OFF;
  3776  0CD7  0020               	movlb	0	; select bank0
  3777  0CD8  01D6               	clrf	_feeder_coex_state
  3778  0CD9                     l5248:	
  3779                           
  3780                           ;trans_ctrl.c: 1417: }
  3781                           ;trans_ctrl.c: 1418: if ((input_0_7.b7 == 0) && !(input_0_7.b6 == 0) && (timer_flags1.b2
      +                           == 1)) {
  3782  0CD9  1FD7               	btfss	_input_0_7,7
  3783  0CDA  1F57               	btfss	_input_0_7,6
  3784  0CDB  2CE3               	goto	l5256
  3785  0CDC  1D7A               	btfss	_timer_flags1,2
  3786  0CDD  2CE3               	goto	l5256
  3787                           
  3788                           ;trans_ctrl.c: 1419: feeder_coex_state = FEEDER_COEX_CHARGING;
  3789  0CDE  3002               	movlw	2
  3790  0CDF  00F6               	movwf	??_ProcessFeederCoex
  3791  0CE0  0876               	movf	??_ProcessFeederCoex,w
  3792  0CE1  00D6               	movwf	_feeder_coex_state
  3793                           
  3794                           ;trans_ctrl.c: 1420: } else if (activ_unit == FEEDER_COEX) activ_unit = VACUM_PUMP1;
  3795  0CE2  2CEB               	goto	l5260
  3796  0CE3                     l5256:	
  3797  0CE3  0838               	movf	_activ_unit,w
  3798  0CE4  3A05               	xorlw	5
  3799  0CE5  1D03               	skipz
  3800  0CE6  2CEB               	goto	l5260
  3801  0CE7  3006               	movlw	6
  3802  0CE8  00F6               	movwf	??_ProcessFeederCoex
  3803  0CE9  0876               	movf	??_ProcessFeederCoex,w
  3804  0CEA  00B8               	movwf	_activ_unit
  3805  0CEB                     l5260:	
  3806                           
  3807                           ;trans_ctrl.c: 1421: feeder_coex_pcnt = 0;
  3808  0CEB  01D5               	clrf	_feeder_coex_pcnt
  3809                           
  3810                           ;trans_ctrl.c: 1422: break;
  3811  0CEC  0008               	return
  3812  0CED                     l963:	
  3813                           ;trans_ctrl.c: 1424: case FEEDER_COEX_CHARGING:
  3814                           
  3815                           
  3816                           ;trans_ctrl.c: 1425: if ((taster_flags1.b1 == 1) && (timer_flags3.b3 == 1)) {
  3817  0CED  18E3               	btfsc	_taster_flags1,1
  3818  0CEE  1DE9               	btfss	_timer_flags3,3
  3819  0CEF  2CFD               	goto	l5268
  3820                           
  3821                           ;trans_ctrl.c: 1426: SetTimer(FEEDER_COEX_CONTROL_DELAY_TMR, 100);
  3822  0CF0  300E               	movlw	14
  3823  0CF1  00F2               	movwf	SetTimer@timer_for_setup
  3824  0CF2  3000               	movlw	0
  3825  0CF3  00F3               	movwf	SetTimer@timer_for_setup+1
  3826  0CF4  3064               	movlw	100
  3827  0CF5  00F4               	movwf	SetTimer@period
  3828  0CF6  3000               	movlw	0
  3829  0CF7  00F5               	movwf	SetTimer@period+1
  3830  0CF8  3187  2744  318C   	fcall	_SetTimer
  3831                           
  3832                           ;trans_ctrl.c: 1427: feeder_coex_state = FEEDER_COEX_OFF;
  3833  0CFB  0020               	movlb	0	; select bank0
  3834  0CFC  01D6               	clrf	_feeder_coex_state
  3835  0CFD                     l5268:	
  3836                           
  3837                           ;trans_ctrl.c: 1428: }
  3838                           ;trans_ctrl.c: 1429: if (activ_unit != FEEDER_COEX) {
  3839  0CFD  0838               	movf	_activ_unit,w
  3840  0CFE  3A05               	xorlw	5
  3841  0CFF  1D03               	btfss	3,2
  3842  0D00  0008               	return
  3843                           
  3844                           ;trans_ctrl.c: 1431: } else if (feeder_coex_pcnt == 0) {
  3845                           
  3846                           ;trans_ctrl.c: 1430: break;
  3847  0D01  08D5               	movf	_feeder_coex_pcnt,f
  3848  0D02  1D03               	skipz
  3849  0D03  2D0A               	goto	l5280
  3850                           
  3851                           ;trans_ctrl.c: 1432: (vacum_pump1_flags1.b4 = 1);
  3852  0D04  167B               	bsf	_vacum_pump1_flags1,4
  3853                           
  3854                           ;trans_ctrl.c: 1433: ++feeder_coex_pcnt;
  3855  0D05  3001               	movlw	1
  3856  0D06  00F6               	movwf	??_ProcessFeederCoex
  3857  0D07  0876               	movf	??_ProcessFeederCoex,w
  3858  0D08  07D5               	addwf	_feeder_coex_pcnt,f
  3859                           
  3860                           ;trans_ctrl.c: 1434: } else if ((feeder_coex_pcnt == 1) && (vacum_pump1_flags1.b3 == 1))
      +                           {
  3861  0D09  0008               	return
  3862  0D0A                     l5280:	
  3863  0D0A  0855               	movf	_feeder_coex_pcnt,w
  3864  0D0B  3A01               	xorlw	1
  3865  0D0C  1903               	btfsc	3,2
  3866  0D0D  1DFB               	btfss	_vacum_pump1_flags1,3
  3867  0D0E  2D20               	goto	l5290
  3868                           
  3869                           ;trans_ctrl.c: 1435: (output_0_7.b6 = 1);
  3870  0D0F  175B               	bsf	_output_0_7,6
  3871                           
  3872                           ;trans_ctrl.c: 1436: SetTimer(PISTON_TMR, 100);
  3873  0D10  3002               	movlw	2
  3874  0D11  00F2               	movwf	SetTimer@timer_for_setup
  3875  0D12  3000               	movlw	0
  3876  0D13  00F3               	movwf	SetTimer@timer_for_setup+1
  3877  0D14  3064               	movlw	100
  3878  0D15  00F4               	movwf	SetTimer@period
  3879  0D16  3000               	movlw	0
  3880  0D17  00F5               	movwf	SetTimer@period+1
  3881  0D18  3187  2744         	fcall	_SetTimer
  3882                           
  3883                           ;trans_ctrl.c: 1437: ++feeder_coex_pcnt;
  3884  0D1A  3001               	movlw	1
  3885  0D1B  00F6               	movwf	??_ProcessFeederCoex
  3886  0D1C  0876               	movf	??_ProcessFeederCoex,w
  3887  0D1D  0020               	movlb	0	; select bank0
  3888  0D1E  07D5               	addwf	_feeder_coex_pcnt,f
  3889                           
  3890                           ;trans_ctrl.c: 1438: } else if ((feeder_coex_pcnt == 2) && (timer_flags1.b3 == 1)) {
  3891  0D1F  0008               	return
  3892  0D20                     l5290:	
  3893  0D20  0855               	movf	_feeder_coex_pcnt,w
  3894  0D21  3A02               	xorlw	2
  3895  0D22  1903               	btfsc	3,2
  3896  0D23  1DFA               	btfss	_timer_flags1,3
  3897  0D24  2D37               	goto	l5298
  3898                           
  3899                           ;trans_ctrl.c: 1439: SetTimer(MAX_CHARGING_TMR, max_charging_time);
  3900  0D25  3003               	movlw	3
  3901  0D26  00F2               	movwf	SetTimer@timer_for_setup
  3902  0D27  3000               	movlw	0
  3903  0D28  00F3               	movwf	SetTimer@timer_for_setup+1
  3904  0D29  0827               	movf	_max_charging_time+1,w
  3905  0D2A  01F5               	clrf	SetTimer@period+1
  3906  0D2B  07F5               	addwf	SetTimer@period+1,f
  3907  0D2C  0826               	movf	_max_charging_time,w
  3908  0D2D  01F4               	clrf	SetTimer@period
  3909  0D2E  07F4               	addwf	SetTimer@period,f
  3910  0D2F  3187  2744         	fcall	_SetTimer
  3911                           
  3912                           ;trans_ctrl.c: 1440: ++feeder_coex_pcnt;
  3913  0D31  3001               	movlw	1
  3914  0D32  00F6               	movwf	??_ProcessFeederCoex
  3915  0D33  0876               	movf	??_ProcessFeederCoex,w
  3916  0D34  0020               	movlb	0	; select bank0
  3917  0D35  07D5               	addwf	_feeder_coex_pcnt,f
  3918                           
  3919                           ;trans_ctrl.c: 1441: } else if (feeder_coex_pcnt == 3) {
  3920  0D36  0008               	return
  3921  0D37                     l5298:	
  3922  0D37  0855               	movf	_feeder_coex_pcnt,w
  3923  0D38  3A03               	xorlw	3
  3924  0D39  1D03               	skipz
  3925  0D3A  0008               	return
  3926                           
  3927                           ;trans_ctrl.c: 1442: if ((input_0_7.b6 == 0) || !(vacum_pump1_flags1.b3 == 1)) {
  3928  0D3B  1F57               	btfss	_input_0_7,6
  3929  0D3C  2D3F               	goto	l976
  3930  0D3D  19FB               	btfsc	_vacum_pump1_flags1,3
  3931  0D3E  2D50               	goto	l974
  3932  0D3F                     l976:	
  3933                           
  3934                           ;trans_ctrl.c: 1443: (output_0_7.b6 = 0);
  3935  0D3F  135B               	bcf	_output_0_7,6
  3936                           
  3937                           ;trans_ctrl.c: 1444: (feeder_coex_flags1.b0 = 0);
  3938  0D40  1054               	bcf	_feeder_coex_flags1,0
  3939                           
  3940                           ;trans_ctrl.c: 1445: SetTimer(FEEDER_STATE_CHANGE_TMR, 500);
  3941  0D41  3007               	movlw	7
  3942  0D42  00F2               	movwf	SetTimer@timer_for_setup
  3943  0D43  3000               	movlw	0
  3944  0D44  00F3               	movwf	SetTimer@timer_for_setup+1
  3945  0D45  30F4               	movlw	244
  3946  0D46  00F4               	movwf	SetTimer@period
  3947  0D47  3001               	movlw	1
  3948  0D48  00F5               	movwf	SetTimer@period+1
  3949  0D49  3187  2744         	fcall	_SetTimer
  3950                           
  3951                           ;trans_ctrl.c: 1446: feeder_coex_state = FEEDER_COEX_DISCHARGING;
  3952  0D4B  0020               	movlb	0	; select bank0
  3953  0D4C  01D6               	clrf	_feeder_coex_state
  3954  0D4D  0AD6               	incf	_feeder_coex_state,f
  3955                           
  3956                           ;trans_ctrl.c: 1447: feeder_coex_pcnt = 0;
  3957  0D4E  01D5               	clrf	_feeder_coex_pcnt
  3958                           
  3959                           ;trans_ctrl.c: 1448: } else if (!(input_0_7.b7 == 0)) {
  3960  0D4F  0008               	return
  3961  0D50                     l974:	
  3962  0D50  1FD7               	btfss	_input_0_7,7
  3963  0D51  2D59               	goto	l978
  3964                           
  3965                           ;trans_ctrl.c: 1449: (output_0_7.b6 = 0);
  3966  0D52  135B               	bcf	_output_0_7,6
  3967                           
  3968                           ;trans_ctrl.c: 1450: (feeder_coex_flags1.b1 = 1);
  3969  0D53  14D4               	bsf	_feeder_coex_flags1,1
  3970                           
  3971                           ;trans_ctrl.c: 1451: feeder_coex_state = FEEDER_COEX_ERROR;
  3972  0D54  3003               	movlw	3
  3973  0D55  00F6               	movwf	??_ProcessFeederCoex
  3974  0D56  0876               	movf	??_ProcessFeederCoex,w
  3975  0D57  00D6               	movwf	_feeder_coex_state
  3976                           
  3977                           ;trans_ctrl.c: 1452: } else if ((timer_flags1.b4 == 1)) {
  3978  0D58  0008               	return
  3979  0D59                     l978:	
  3980  0D59  1E7A               	btfss	_timer_flags1,4
  3981  0D5A  0008               	return
  3982                           
  3983                           ;trans_ctrl.c: 1453: (output_0_7.b6 = 0);
  3984  0D5B  135B               	bcf	_output_0_7,6
  3985                           
  3986                           ;trans_ctrl.c: 1454: (feeder_coex_flags1.b0 = 1);
  3987  0D5C  1454               	bsf	_feeder_coex_flags1,0
  3988                           
  3989                           ;trans_ctrl.c: 1455: SetTimer(FEEDER_STATE_CHANGE_TMR, 500);
  3990  0D5D  3007               	movlw	7
  3991  0D5E  00F2               	movwf	SetTimer@timer_for_setup
  3992  0D5F  3000               	movlw	0
  3993  0D60  00F3               	movwf	SetTimer@timer_for_setup+1
  3994  0D61  30F4               	movlw	244
  3995  0D62  00F4               	movwf	SetTimer@period
  3996  0D63  3001               	movlw	1
  3997  0D64  00F5               	movwf	SetTimer@period+1
  3998  0D65  3187  2744         	fcall	_SetTimer
  3999                           
  4000                           ;trans_ctrl.c: 1456: feeder_coex_state = FEEDER_COEX_DISCHARGING;
  4001  0D67  0020               	movlb	0	; select bank0
  4002  0D68  01D6               	clrf	_feeder_coex_state
  4003  0D69  0AD6               	incf	_feeder_coex_state,f
  4004                           
  4005                           ;trans_ctrl.c: 1457: feeder_coex_pcnt = 0;
  4006  0D6A  01D5               	clrf	_feeder_coex_pcnt
  4007                           
  4008                           ;trans_ctrl.c: 1458: }
  4009                           ;trans_ctrl.c: 1459: }
  4010                           ;trans_ctrl.c: 1460: break;
  4011  0D6B  0008               	return
  4012  0D6C                     l5322:	
  4013                           ;trans_ctrl.c: 1462: case FEEDER_COEX_ERROR:
  4014                           
  4015                           
  4016                           ;trans_ctrl.c: 1463: if (activ_unit == FEEDER_COEX) activ_unit = VACUM_PUMP1;
  4017  0D6C  0838               	movf	_activ_unit,w
  4018  0D6D  3A05               	xorlw	5
  4019  0D6E  1D03               	skipz
  4020  0D6F  2D74               	goto	l5326
  4021  0D70  3006               	movlw	6
  4022  0D71  00F6               	movwf	??_ProcessFeederCoex
  4023  0D72  0876               	movf	??_ProcessFeederCoex,w
  4024  0D73  00B8               	movwf	_activ_unit
  4025  0D74                     l5326:	
  4026                           
  4027                           ;trans_ctrl.c: 1464: if ((taster_flags1.b1 == 1) && (timer_flags3.b3 == 1)) {
  4028  0D74  18E3               	btfsc	_taster_flags1,1
  4029  0D75  1DE9               	btfss	_timer_flags3,3
  4030  0D76  2D83               	goto	l5334
  4031                           
  4032                           ;trans_ctrl.c: 1465: SetTimer(FEEDER_COEX_CONTROL_DELAY_TMR, 100);
  4033  0D77  300E               	movlw	14
  4034  0D78  00F2               	movwf	SetTimer@timer_for_setup
  4035  0D79  3000               	movlw	0
  4036  0D7A  00F3               	movwf	SetTimer@timer_for_setup+1
  4037  0D7B  3064               	movlw	100
  4038  0D7C  00F4               	movwf	SetTimer@period
  4039  0D7D  3000               	movlw	0
  4040  0D7E  00F5               	movwf	SetTimer@period+1
  4041  0D7F  3187  2744         	fcall	_SetTimer
  4042                           
  4043                           ;trans_ctrl.c: 1466: feeder_coex_state = FEEDER_COEX_OFF;
  4044  0D81  0020               	movlb	0	; select bank0
  4045  0D82  01D6               	clrf	_feeder_coex_state
  4046  0D83                     l5334:	
  4047                           
  4048                           ;trans_ctrl.c: 1467: }
  4049                           ;trans_ctrl.c: 1468: (output_0_7.b6 = 0);
  4050  0D83  135B               	bcf	_output_0_7,6
  4051                           
  4052                           ;trans_ctrl.c: 1470: }
  4053                           
  4054                           ;trans_ctrl.c: 1469: break;
  4055  0D84  0008               	return
  4056  0D85                     l5338:	
  4057  0D85  0020               	movlb	0	; select bank0
  4058  0D86  0856               	movf	_feeder_coex_state,w
  4059                           
  4060                           ; Switch size 1, requested type "space"
  4061                           ; Number of cases is 4, Range of values is 0 to 3
  4062                           ; switch strategies available:
  4063                           ; Name         Instructions Cycles
  4064                           ; simple_byte           13     7 (average)
  4065                           ; direct_byte           14     6 (fixed)
  4066                           ; jumptable            260     6 (fixed)
  4067                           ;	Chosen strategy is simple_byte
  4068  0D87  3A00               	xorlw	0	; case 0
  4069  0D88  1903               	skipnz
  4070  0D89  2CAD               	goto	l5226
  4071  0D8A  3A01               	xorlw	1	; case 1
  4072  0D8B  1903               	skipnz
  4073  0D8C  2CC9               	goto	l958
  4074  0D8D  3A03               	xorlw	3	; case 2
  4075  0D8E  1903               	skipnz
  4076  0D8F  2CED               	goto	l963
  4077  0D90  3A01               	xorlw	1	; case 3
  4078  0D91  1903               	skipnz
  4079  0D92  2D6C               	goto	l5322
  4080  0D93  2D94               	goto	l984
  4081  0D94                     l984:	
  4082  0D94  0008               	return
  4083  0D95                     __end_of_ProcessFeederCoex:	
  4084                           
  4085                           	psect	text6
  4086  0BC3                     __ptext6:	
  4087 ;; *************** function _ProcessFeeder5 *****************
  4088 ;; Defined at:
  4089 ;;		line 1323 in file "trans_ctrl.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;		None
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;		None
  4094 ;; Return value:  Size  Location     Type
  4095 ;;		None               void
  4096 ;; Registers used:
  4097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4103 ;;      Params:         0       0       0       0       0       0       0       0
  4104 ;;      Locals:         0       0       0       0       0       0       0       0
  4105 ;;      Temps:          1       0       0       0       0       0       0       0
  4106 ;;      Totals:         1       0       0       0       0       0       0       0
  4107 ;;Total ram usage:        1 bytes
  4108 ;; Hardware stack levels used:    1
  4109 ;; Hardware stack levels required when called:    3
  4110 ;; This function calls:
  4111 ;;		_SetTimer
  4112 ;; This function is called by:
  4113 ;;		_main
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           
  4118                           ;psect for function _ProcessFeeder5
  4119  0BC3                     _ProcessFeeder5:	
  4120                           
  4121                           ;trans_ctrl.c: 1325: switch (feeder5_state) {
  4122                           
  4123                           ;incstack = 0
  4124                           ; Regs used in _ProcessFeeder5: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4125  0BC3  2C9C               	goto	l5222
  4126  0BC4                     l5108:	
  4127                           ;trans_ctrl.c: 1327: case FEEDER5_OFF:
  4128                           
  4129                           
  4130                           ;trans_ctrl.c: 1328: if (activ_unit == FEEDER5) activ_unit = FEEDER_COEX;
  4131  0BC4  0020               	movlb	0	; select bank0
  4132  0BC5  0838               	movf	_activ_unit,w
  4133  0BC6  3A04               	xorlw	4
  4134  0BC7  1D03               	skipz
  4135  0BC8  2BCD               	goto	l5112
  4136  0BC9  3005               	movlw	5
  4137  0BCA  00F6               	movwf	??_ProcessFeeder5
  4138  0BCB  0876               	movf	??_ProcessFeeder5,w
  4139  0BCC  00B8               	movwf	_activ_unit
  4140  0BCD                     l5112:	
  4141                           
  4142                           ;trans_ctrl.c: 1329: if ((taster_flags1.b6 == 1) && (timer_flags3.b2 == 1)) {
  4143  0BCD  1B63               	btfsc	_taster_flags1,6
  4144  0BCE  1D69               	btfss	_timer_flags3,2
  4145  0BCF  2BDD               	goto	l5120
  4146                           
  4147                           ;trans_ctrl.c: 1330: SetTimer(FEEDER5_CONTROL_DELAY_TMR, 100);
  4148  0BD0  300D               	movlw	13
  4149  0BD1  00F2               	movwf	SetTimer@timer_for_setup
  4150  0BD2  3000               	movlw	0
  4151  0BD3  00F3               	movwf	SetTimer@timer_for_setup+1
  4152  0BD4  3064               	movlw	100
  4153  0BD5  00F4               	movwf	SetTimer@period
  4154  0BD6  3000               	movlw	0
  4155  0BD7  00F5               	movwf	SetTimer@period+1
  4156  0BD8  3187  2744         	fcall	_SetTimer
  4157                           
  4158                           ;trans_ctrl.c: 1331: feeder5_state = FEEDER5_DISCHARGING;
  4159  0BDA  0020               	movlb	0	; select bank0
  4160  0BDB  01D3               	clrf	_feeder5_state
  4161  0BDC  0AD3               	incf	_feeder5_state,f
  4162  0BDD                     l5120:	
  4163                           
  4164                           ;trans_ctrl.c: 1332: }
  4165                           ;trans_ctrl.c: 1333: (output_0_7.b5 = 0);
  4166  0BDD  12DB               	bcf	_output_0_7,5
  4167                           
  4168                           ;trans_ctrl.c: 1334: feeder5_flags1._byte = 0x00;
  4169  0BDE  01D1               	clrf	_feeder5_flags1
  4170                           
  4171                           ;trans_ctrl.c: 1335: break;
  4172  0BDF  0008               	return
  4173  0BE0                     l924:	
  4174                           ;trans_ctrl.c: 1337: case FEEDER5_DISCHARGING:
  4175                           
  4176                           
  4177                           ;trans_ctrl.c: 1338: if ((taster_flags1.b6 == 1) && (timer_flags3.b2 == 1)) {
  4178  0BE0  1B63               	btfsc	_taster_flags1,6
  4179  0BE1  1D69               	btfss	_timer_flags3,2
  4180  0BE2  2BF0               	goto	l5130
  4181                           
  4182                           ;trans_ctrl.c: 1339: SetTimer(FEEDER5_CONTROL_DELAY_TMR, 100);
  4183  0BE3  300D               	movlw	13
  4184  0BE4  00F2               	movwf	SetTimer@timer_for_setup
  4185  0BE5  3000               	movlw	0
  4186  0BE6  00F3               	movwf	SetTimer@timer_for_setup+1
  4187  0BE7  3064               	movlw	100
  4188  0BE8  00F4               	movwf	SetTimer@period
  4189  0BE9  3000               	movlw	0
  4190  0BEA  00F5               	movwf	SetTimer@period+1
  4191  0BEB  3187  2744  318B   	fcall	_SetTimer
  4192                           
  4193                           ;trans_ctrl.c: 1340: feeder5_state = FEEDER5_OFF;
  4194  0BEE  0020               	movlb	0	; select bank0
  4195  0BEF  01D3               	clrf	_feeder5_state
  4196  0BF0                     l5130:	
  4197                           
  4198                           ;trans_ctrl.c: 1341: }
  4199                           ;trans_ctrl.c: 1342: if ((input_16_23.b6 == 0) && !(input_16_23.b7 == 0) && (timer_flags
      +                          1.b2 == 1)) {
  4200  0BF0  1F58               	btfss	_input_16_23,6
  4201  0BF1  1FD8               	btfss	_input_16_23,7
  4202  0BF2  2BFA               	goto	l5138
  4203  0BF3  1D7A               	btfss	_timer_flags1,2
  4204  0BF4  2BFA               	goto	l5138
  4205                           
  4206                           ;trans_ctrl.c: 1343: feeder5_state = FEEDER5_CHARGING;
  4207  0BF5  3002               	movlw	2
  4208  0BF6  00F6               	movwf	??_ProcessFeeder5
  4209  0BF7  0876               	movf	??_ProcessFeeder5,w
  4210  0BF8  00D3               	movwf	_feeder5_state
  4211                           
  4212                           ;trans_ctrl.c: 1344: } else if (activ_unit == FEEDER5) activ_unit = FEEDER_COEX;
  4213  0BF9  2C02               	goto	l5142
  4214  0BFA                     l5138:	
  4215  0BFA  0838               	movf	_activ_unit,w
  4216  0BFB  3A04               	xorlw	4
  4217  0BFC  1D03               	skipz
  4218  0BFD  2C02               	goto	l5142
  4219  0BFE  3005               	movlw	5
  4220  0BFF  00F6               	movwf	??_ProcessFeeder5
  4221  0C00  0876               	movf	??_ProcessFeeder5,w
  4222  0C01  00B8               	movwf	_activ_unit
  4223  0C02                     l5142:	
  4224                           
  4225                           ;trans_ctrl.c: 1345: feeder5_pcnt = 0;
  4226  0C02  01D2               	clrf	_feeder5_pcnt
  4227                           
  4228                           ;trans_ctrl.c: 1346: break;
  4229  0C03  0008               	return
  4230  0C04                     l929:	
  4231                           ;trans_ctrl.c: 1348: case FEEDER5_CHARGING:
  4232                           
  4233                           
  4234                           ;trans_ctrl.c: 1349: if ((taster_flags1.b6 == 1) && (timer_flags3.b2 == 1)) {
  4235  0C04  1B63               	btfsc	_taster_flags1,6
  4236  0C05  1D69               	btfss	_timer_flags3,2
  4237  0C06  2C14               	goto	l5150
  4238                           
  4239                           ;trans_ctrl.c: 1350: SetTimer(FEEDER5_CONTROL_DELAY_TMR, 100);
  4240  0C07  300D               	movlw	13
  4241  0C08  00F2               	movwf	SetTimer@timer_for_setup
  4242  0C09  3000               	movlw	0
  4243  0C0A  00F3               	movwf	SetTimer@timer_for_setup+1
  4244  0C0B  3064               	movlw	100
  4245  0C0C  00F4               	movwf	SetTimer@period
  4246  0C0D  3000               	movlw	0
  4247  0C0E  00F5               	movwf	SetTimer@period+1
  4248  0C0F  3187  2744  318B   	fcall	_SetTimer
  4249                           
  4250                           ;trans_ctrl.c: 1351: feeder5_state = FEEDER5_OFF;
  4251  0C12  0020               	movlb	0	; select bank0
  4252  0C13  01D3               	clrf	_feeder5_state
  4253  0C14                     l5150:	
  4254                           
  4255                           ;trans_ctrl.c: 1352: }
  4256                           ;trans_ctrl.c: 1353: if (activ_unit != FEEDER5) {
  4257  0C14  0838               	movf	_activ_unit,w
  4258  0C15  3A04               	xorlw	4
  4259  0C16  1D03               	btfss	3,2
  4260  0C17  0008               	return
  4261                           
  4262                           ;trans_ctrl.c: 1355: } else if (feeder5_pcnt == 0) {
  4263                           
  4264                           ;trans_ctrl.c: 1354: break;
  4265  0C18  08D2               	movf	_feeder5_pcnt,f
  4266  0C19  1D03               	skipz
  4267  0C1A  2C21               	goto	l5162
  4268                           
  4269                           ;trans_ctrl.c: 1356: (vacum_pump1_flags1.b4 = 1);
  4270  0C1B  167B               	bsf	_vacum_pump1_flags1,4
  4271                           
  4272                           ;trans_ctrl.c: 1357: ++feeder5_pcnt;
  4273  0C1C  3001               	movlw	1
  4274  0C1D  00F6               	movwf	??_ProcessFeeder5
  4275  0C1E  0876               	movf	??_ProcessFeeder5,w
  4276  0C1F  07D2               	addwf	_feeder5_pcnt,f
  4277                           
  4278                           ;trans_ctrl.c: 1358: } else if ((feeder5_pcnt == 1) && (vacum_pump1_flags1.b3 == 1)) {
  4279  0C20  0008               	return
  4280  0C21                     l5162:	
  4281  0C21  0852               	movf	_feeder5_pcnt,w
  4282  0C22  3A01               	xorlw	1
  4283  0C23  1903               	btfsc	3,2
  4284  0C24  1DFB               	btfss	_vacum_pump1_flags1,3
  4285  0C25  2C37               	goto	l5172
  4286                           
  4287                           ;trans_ctrl.c: 1359: (output_0_7.b5 = 1);
  4288  0C26  16DB               	bsf	_output_0_7,5
  4289                           
  4290                           ;trans_ctrl.c: 1360: SetTimer(PISTON_TMR, 100);
  4291  0C27  3002               	movlw	2
  4292  0C28  00F2               	movwf	SetTimer@timer_for_setup
  4293  0C29  3000               	movlw	0
  4294  0C2A  00F3               	movwf	SetTimer@timer_for_setup+1
  4295  0C2B  3064               	movlw	100
  4296  0C2C  00F4               	movwf	SetTimer@period
  4297  0C2D  3000               	movlw	0
  4298  0C2E  00F5               	movwf	SetTimer@period+1
  4299  0C2F  3187  2744         	fcall	_SetTimer
  4300                           
  4301                           ;trans_ctrl.c: 1361: ++feeder5_pcnt;
  4302  0C31  3001               	movlw	1
  4303  0C32  00F6               	movwf	??_ProcessFeeder5
  4304  0C33  0876               	movf	??_ProcessFeeder5,w
  4305  0C34  0020               	movlb	0	; select bank0
  4306  0C35  07D2               	addwf	_feeder5_pcnt,f
  4307                           
  4308                           ;trans_ctrl.c: 1362: } else if ((feeder5_pcnt == 2) && (timer_flags1.b3 == 1)) {
  4309  0C36  0008               	return
  4310  0C37                     l5172:	
  4311  0C37  0852               	movf	_feeder5_pcnt,w
  4312  0C38  3A02               	xorlw	2
  4313  0C39  1903               	btfsc	3,2
  4314  0C3A  1DFA               	btfss	_timer_flags1,3
  4315  0C3B  2C4E               	goto	l5180
  4316                           
  4317                           ;trans_ctrl.c: 1363: SetTimer(MAX_CHARGING_TMR, max_charging_time);
  4318  0C3C  3003               	movlw	3
  4319  0C3D  00F2               	movwf	SetTimer@timer_for_setup
  4320  0C3E  3000               	movlw	0
  4321  0C3F  00F3               	movwf	SetTimer@timer_for_setup+1
  4322  0C40  0827               	movf	_max_charging_time+1,w
  4323  0C41  01F5               	clrf	SetTimer@period+1
  4324  0C42  07F5               	addwf	SetTimer@period+1,f
  4325  0C43  0826               	movf	_max_charging_time,w
  4326  0C44  01F4               	clrf	SetTimer@period
  4327  0C45  07F4               	addwf	SetTimer@period,f
  4328  0C46  3187  2744         	fcall	_SetTimer
  4329                           
  4330                           ;trans_ctrl.c: 1364: ++feeder5_pcnt;
  4331  0C48  3001               	movlw	1
  4332  0C49  00F6               	movwf	??_ProcessFeeder5
  4333  0C4A  0876               	movf	??_ProcessFeeder5,w
  4334  0C4B  0020               	movlb	0	; select bank0
  4335  0C4C  07D2               	addwf	_feeder5_pcnt,f
  4336                           
  4337                           ;trans_ctrl.c: 1365: } else if (feeder5_pcnt == 3) {
  4338  0C4D  0008               	return
  4339  0C4E                     l5180:	
  4340  0C4E  0852               	movf	_feeder5_pcnt,w
  4341  0C4F  3A03               	xorlw	3
  4342  0C50  1D03               	skipz
  4343  0C51  0008               	return
  4344                           
  4345                           ;trans_ctrl.c: 1366: if ((input_16_23.b7 == 0) || !(vacum_pump1_flags1.b3 == 1)) {
  4346  0C52  1FD8               	btfss	_input_16_23,7
  4347  0C53  2C56               	goto	l942
  4348  0C54  19FB               	btfsc	_vacum_pump1_flags1,3
  4349  0C55  2C67               	goto	l940
  4350  0C56                     l942:	
  4351                           
  4352                           ;trans_ctrl.c: 1367: (output_0_7.b5 = 0);
  4353  0C56  12DB               	bcf	_output_0_7,5
  4354                           
  4355                           ;trans_ctrl.c: 1368: (feeder5_flags1.b0 = 0);
  4356  0C57  1051               	bcf	_feeder5_flags1,0
  4357                           
  4358                           ;trans_ctrl.c: 1369: SetTimer(FEEDER_STATE_CHANGE_TMR, 500);
  4359  0C58  3007               	movlw	7
  4360  0C59  00F2               	movwf	SetTimer@timer_for_setup
  4361  0C5A  3000               	movlw	0
  4362  0C5B  00F3               	movwf	SetTimer@timer_for_setup+1
  4363  0C5C  30F4               	movlw	244
  4364  0C5D  00F4               	movwf	SetTimer@period
  4365  0C5E  3001               	movlw	1
  4366  0C5F  00F5               	movwf	SetTimer@period+1
  4367  0C60  3187  2744         	fcall	_SetTimer
  4368                           
  4369                           ;trans_ctrl.c: 1370: feeder5_state = FEEDER5_DISCHARGING;
  4370  0C62  0020               	movlb	0	; select bank0
  4371  0C63  01D3               	clrf	_feeder5_state
  4372  0C64  0AD3               	incf	_feeder5_state,f
  4373                           
  4374                           ;trans_ctrl.c: 1371: feeder5_pcnt = 0;
  4375  0C65  01D2               	clrf	_feeder5_pcnt
  4376                           
  4377                           ;trans_ctrl.c: 1372: } else if (!(input_16_23.b6 == 0)) {
  4378  0C66  0008               	return
  4379  0C67                     l940:	
  4380  0C67  1F58               	btfss	_input_16_23,6
  4381  0C68  2C70               	goto	l944
  4382                           
  4383                           ;trans_ctrl.c: 1373: (output_0_7.b5 = 0);
  4384  0C69  12DB               	bcf	_output_0_7,5
  4385                           
  4386                           ;trans_ctrl.c: 1374: (feeder5_flags1.b1 = 1);
  4387  0C6A  14D1               	bsf	_feeder5_flags1,1
  4388                           
  4389                           ;trans_ctrl.c: 1375: feeder5_state = FEEDER5_ERROR;
  4390  0C6B  3003               	movlw	3
  4391  0C6C  00F6               	movwf	??_ProcessFeeder5
  4392  0C6D  0876               	movf	??_ProcessFeeder5,w
  4393  0C6E  00D3               	movwf	_feeder5_state
  4394                           
  4395                           ;trans_ctrl.c: 1376: } else if ((timer_flags1.b4 == 1)) {
  4396  0C6F  0008               	return
  4397  0C70                     l944:	
  4398  0C70  1E7A               	btfss	_timer_flags1,4
  4399  0C71  0008               	return
  4400                           
  4401                           ;trans_ctrl.c: 1377: (output_0_7.b5 = 0);
  4402  0C72  12DB               	bcf	_output_0_7,5
  4403                           
  4404                           ;trans_ctrl.c: 1378: SetTimer(FEEDER_STATE_CHANGE_TMR, 500);
  4405  0C73  3007               	movlw	7
  4406  0C74  00F2               	movwf	SetTimer@timer_for_setup
  4407  0C75  3000               	movlw	0
  4408  0C76  00F3               	movwf	SetTimer@timer_for_setup+1
  4409  0C77  30F4               	movlw	244
  4410  0C78  00F4               	movwf	SetTimer@period
  4411  0C79  3001               	movlw	1
  4412  0C7A  00F5               	movwf	SetTimer@period+1
  4413  0C7B  3187  2744         	fcall	_SetTimer
  4414                           
  4415                           ;trans_ctrl.c: 1379: feeder5_state = FEEDER5_DISCHARGING;
  4416  0C7D  0020               	movlb	0	; select bank0
  4417  0C7E  01D3               	clrf	_feeder5_state
  4418  0C7F  0AD3               	incf	_feeder5_state,f
  4419                           
  4420                           ;trans_ctrl.c: 1380: (feeder5_flags1.b0 = 1);
  4421  0C80  1451               	bsf	_feeder5_flags1,0
  4422                           
  4423                           ;trans_ctrl.c: 1381: feeder5_pcnt = 0;
  4424  0C81  01D2               	clrf	_feeder5_pcnt
  4425                           
  4426                           ;trans_ctrl.c: 1382: }
  4427                           ;trans_ctrl.c: 1383: }
  4428                           ;trans_ctrl.c: 1384: break;
  4429  0C82  0008               	return
  4430  0C83                     l5206:	
  4431                           ;trans_ctrl.c: 1386: case FEEDER5_ERROR:
  4432                           
  4433                           
  4434                           ;trans_ctrl.c: 1387: if (activ_unit == FEEDER5) activ_unit = FEEDER_COEX;
  4435  0C83  0838               	movf	_activ_unit,w
  4436  0C84  3A04               	xorlw	4
  4437  0C85  1D03               	skipz
  4438  0C86  2C8B               	goto	l5210
  4439  0C87  3005               	movlw	5
  4440  0C88  00F6               	movwf	??_ProcessFeeder5
  4441  0C89  0876               	movf	??_ProcessFeeder5,w
  4442  0C8A  00B8               	movwf	_activ_unit
  4443  0C8B                     l5210:	
  4444                           
  4445                           ;trans_ctrl.c: 1388: if ((taster_flags1.b6 == 1) && (timer_flags3.b2 == 1)) {
  4446  0C8B  1B63               	btfsc	_taster_flags1,6
  4447  0C8C  1D69               	btfss	_timer_flags3,2
  4448  0C8D  2C9A               	goto	l5218
  4449                           
  4450                           ;trans_ctrl.c: 1389: SetTimer(FEEDER5_CONTROL_DELAY_TMR, 100);
  4451  0C8E  300D               	movlw	13
  4452  0C8F  00F2               	movwf	SetTimer@timer_for_setup
  4453  0C90  3000               	movlw	0
  4454  0C91  00F3               	movwf	SetTimer@timer_for_setup+1
  4455  0C92  3064               	movlw	100
  4456  0C93  00F4               	movwf	SetTimer@period
  4457  0C94  3000               	movlw	0
  4458  0C95  00F5               	movwf	SetTimer@period+1
  4459  0C96  3187  2744         	fcall	_SetTimer
  4460                           
  4461                           ;trans_ctrl.c: 1390: feeder5_state = FEEDER5_OFF;
  4462  0C98  0020               	movlb	0	; select bank0
  4463  0C99  01D3               	clrf	_feeder5_state
  4464  0C9A                     l5218:	
  4465                           
  4466                           ;trans_ctrl.c: 1391: }
  4467                           ;trans_ctrl.c: 1392: (output_0_7.b5 = 0);
  4468  0C9A  12DB               	bcf	_output_0_7,5
  4469                           
  4470                           ;trans_ctrl.c: 1394: }
  4471                           
  4472                           ;trans_ctrl.c: 1393: break;
  4473  0C9B  0008               	return
  4474  0C9C                     l5222:	
  4475  0C9C  0020               	movlb	0	; select bank0
  4476  0C9D  0853               	movf	_feeder5_state,w
  4477                           
  4478                           ; Switch size 1, requested type "space"
  4479                           ; Number of cases is 4, Range of values is 0 to 3
  4480                           ; switch strategies available:
  4481                           ; Name         Instructions Cycles
  4482                           ; simple_byte           13     7 (average)
  4483                           ; direct_byte           14     6 (fixed)
  4484                           ; jumptable            260     6 (fixed)
  4485                           ;	Chosen strategy is simple_byte
  4486  0C9E  3A00               	xorlw	0	; case 0
  4487  0C9F  1903               	skipnz
  4488  0CA0  2BC4               	goto	l5108
  4489  0CA1  3A01               	xorlw	1	; case 1
  4490  0CA2  1903               	skipnz
  4491  0CA3  2BE0               	goto	l924
  4492  0CA4  3A03               	xorlw	3	; case 2
  4493  0CA5  1903               	skipnz
  4494  0CA6  2C04               	goto	l929
  4495  0CA7  3A01               	xorlw	1	; case 3
  4496  0CA8  1903               	skipnz
  4497  0CA9  2C83               	goto	l5206
  4498  0CAA  2CAB               	goto	l950
  4499  0CAB                     l950:	
  4500  0CAB  0008               	return
  4501  0CAC                     __end_of_ProcessFeeder5:	
  4502                           
  4503                           	psect	text7
  4504  09F3                     __ptext7:	
  4505 ;; *************** function _ProcessFeeder4 *****************
  4506 ;; Defined at:
  4507 ;;		line 1250 in file "trans_ctrl.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;		None
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;		None
  4512 ;; Return value:  Size  Location     Type
  4513 ;;		None               void
  4514 ;; Registers used:
  4515 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4521 ;;      Params:         0       0       0       0       0       0       0       0
  4522 ;;      Locals:         0       0       0       0       0       0       0       0
  4523 ;;      Temps:          1       0       0       0       0       0       0       0
  4524 ;;      Totals:         1       0       0       0       0       0       0       0
  4525 ;;Total ram usage:        1 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    3
  4528 ;; This function calls:
  4529 ;;		_SetTimer
  4530 ;; This function is called by:
  4531 ;;		_main
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           
  4536                           ;psect for function _ProcessFeeder4
  4537  09F3                     _ProcessFeeder4:	
  4538                           
  4539                           ;trans_ctrl.c: 1252: switch (feeder4_state) {
  4540                           
  4541                           ;incstack = 0
  4542                           ; Regs used in _ProcessFeeder4: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4543  09F3  2ACA               	goto	l5104
  4544  09F4                     l4994:	
  4545                           ;trans_ctrl.c: 1254: case FEEDER4_OFF:
  4546                           
  4547                           
  4548                           ;trans_ctrl.c: 1255: if (activ_unit == FEEDER4) activ_unit = FEEDER5;
  4549  09F4  0020               	movlb	0	; select bank0
  4550  09F5  0838               	movf	_activ_unit,w
  4551  09F6  3A03               	xorlw	3
  4552  09F7  1D03               	skipz
  4553  09F8  29FD               	goto	l4998
  4554  09F9  3004               	movlw	4
  4555  09FA  00F6               	movwf	??_ProcessFeeder4
  4556  09FB  0876               	movf	??_ProcessFeeder4,w
  4557  09FC  00B8               	movwf	_activ_unit
  4558  09FD                     l4998:	
  4559                           
  4560                           ;trans_ctrl.c: 1256: if ((taster_flags1.b5 == 1) && (timer_flags3.b1 == 1)) {
  4561  09FD  1AE3               	btfsc	_taster_flags1,5
  4562  09FE  1CE9               	btfss	_timer_flags3,1
  4563  09FF  2A0D               	goto	l5006
  4564                           
  4565                           ;trans_ctrl.c: 1257: SetTimer(FEEDER4_CONTROL_DELAY_TMR, 100);
  4566  0A00  300C               	movlw	12
  4567  0A01  00F2               	movwf	SetTimer@timer_for_setup
  4568  0A02  3000               	movlw	0
  4569  0A03  00F3               	movwf	SetTimer@timer_for_setup+1
  4570  0A04  3064               	movlw	100
  4571  0A05  00F4               	movwf	SetTimer@period
  4572  0A06  3000               	movlw	0
  4573  0A07  00F5               	movwf	SetTimer@period+1
  4574  0A08  3187  2744         	fcall	_SetTimer
  4575                           
  4576                           ;trans_ctrl.c: 1258: feeder4_state = FEEDER4_DISCHARGING;
  4577  0A0A  0020               	movlb	0	; select bank0
  4578  0A0B  01D0               	clrf	_feeder4_state
  4579  0A0C  0AD0               	incf	_feeder4_state,f
  4580  0A0D                     l5006:	
  4581                           
  4582                           ;trans_ctrl.c: 1259: }
  4583                           ;trans_ctrl.c: 1260: (output_0_7.b4 = 0);
  4584  0A0D  125B               	bcf	_output_0_7,4
  4585                           
  4586                           ;trans_ctrl.c: 1261: (feeder4_flags1._byte = 0x00);
  4587  0A0E  01CE               	clrf	_feeder4_flags1
  4588                           
  4589                           ;trans_ctrl.c: 1262: break;
  4590  0A0F  0008               	return
  4591  0A10                     l889:	
  4592                           ;trans_ctrl.c: 1264: case FEEDER4_DISCHARGING:
  4593                           
  4594                           
  4595                           ;trans_ctrl.c: 1265: if ((taster_flags1.b5 == 1) && (timer_flags3.b1 == 1)) {
  4596  0A10  1AE3               	btfsc	_taster_flags1,5
  4597  0A11  1CE9               	btfss	_timer_flags3,1
  4598  0A12  2A20               	goto	l5016
  4599                           
  4600                           ;trans_ctrl.c: 1266: SetTimer(FEEDER4_CONTROL_DELAY_TMR, 100);
  4601  0A13  300C               	movlw	12
  4602  0A14  00F2               	movwf	SetTimer@timer_for_setup
  4603  0A15  3000               	movlw	0
  4604  0A16  00F3               	movwf	SetTimer@timer_for_setup+1
  4605  0A17  3064               	movlw	100
  4606  0A18  00F4               	movwf	SetTimer@period
  4607  0A19  3000               	movlw	0
  4608  0A1A  00F5               	movwf	SetTimer@period+1
  4609  0A1B  3187  2744  3189   	fcall	_SetTimer
  4610                           
  4611                           ;trans_ctrl.c: 1267: feeder4_state = FEEDER4_OFF;
  4612  0A1E  0020               	movlb	0	; select bank0
  4613  0A1F  01D0               	clrf	_feeder4_state
  4614  0A20                     l5016:	
  4615                           
  4616                           ;trans_ctrl.c: 1268: }
  4617                           ;trans_ctrl.c: 1269: if (!(input_16_23.b5 == 0)) (feeder4_flags1.b1 = 1);
  4618  0A20  1AD8               	btfsc	_input_16_23,5
  4619  0A21  14CE               	bsf	_feeder4_flags1,1
  4620                           
  4621                           ;trans_ctrl.c: 1270: if ((input_16_23.b4 == 0) && (timer_flags1.b2 == 1)) {
  4622  0A22  1E58               	btfss	_input_16_23,4
  4623  0A23  1D7A               	btfss	_timer_flags1,2
  4624  0A24  2A2A               	goto	l5024
  4625                           
  4626                           ;trans_ctrl.c: 1271: feeder4_state = FEEDER4_CHARGING;
  4627  0A25  3002               	movlw	2
  4628  0A26  00F6               	movwf	??_ProcessFeeder4
  4629  0A27  0876               	movf	??_ProcessFeeder4,w
  4630  0A28  00D0               	movwf	_feeder4_state
  4631                           
  4632                           ;trans_ctrl.c: 1272: } else if (activ_unit == FEEDER4) activ_unit = FEEDER5;
  4633  0A29  2A32               	goto	l5028
  4634  0A2A                     l5024:	
  4635  0A2A  0838               	movf	_activ_unit,w
  4636  0A2B  3A03               	xorlw	3
  4637  0A2C  1D03               	skipz
  4638  0A2D  2A32               	goto	l5028
  4639  0A2E  3004               	movlw	4
  4640  0A2F  00F6               	movwf	??_ProcessFeeder4
  4641  0A30  0876               	movf	??_ProcessFeeder4,w
  4642  0A31  00B8               	movwf	_activ_unit
  4643  0A32                     l5028:	
  4644                           
  4645                           ;trans_ctrl.c: 1273: feeder4_pcnt = 0;
  4646  0A32  01CF               	clrf	_feeder4_pcnt
  4647                           
  4648                           ;trans_ctrl.c: 1274: break;
  4649  0A33  0008               	return
  4650  0A34                     l895:	
  4651                           ;trans_ctrl.c: 1276: case FEEDER4_CHARGING:
  4652                           
  4653                           
  4654                           ;trans_ctrl.c: 1277: if ((taster_flags1.b5 == 1) && (timer_flags3.b1 == 1)) {
  4655  0A34  1AE3               	btfsc	_taster_flags1,5
  4656  0A35  1CE9               	btfss	_timer_flags3,1
  4657  0A36  2A44               	goto	l5036
  4658                           
  4659                           ;trans_ctrl.c: 1278: SetTimer(FEEDER4_CONTROL_DELAY_TMR, 100);
  4660  0A37  300C               	movlw	12
  4661  0A38  00F2               	movwf	SetTimer@timer_for_setup
  4662  0A39  3000               	movlw	0
  4663  0A3A  00F3               	movwf	SetTimer@timer_for_setup+1
  4664  0A3B  3064               	movlw	100
  4665  0A3C  00F4               	movwf	SetTimer@period
  4666  0A3D  3000               	movlw	0
  4667  0A3E  00F5               	movwf	SetTimer@period+1
  4668  0A3F  3187  2744  3189   	fcall	_SetTimer
  4669                           
  4670                           ;trans_ctrl.c: 1279: feeder4_state = FEEDER4_OFF;
  4671  0A42  0020               	movlb	0	; select bank0
  4672  0A43  01D0               	clrf	_feeder4_state
  4673  0A44                     l5036:	
  4674                           
  4675                           ;trans_ctrl.c: 1280: }
  4676                           ;trans_ctrl.c: 1281: if (!(input_16_23.b5 == 0)) (feeder4_flags1.b1 = 1);
  4677  0A44  1AD8               	btfsc	_input_16_23,5
  4678  0A45  14CE               	bsf	_feeder4_flags1,1
  4679                           
  4680                           ;trans_ctrl.c: 1282: if (activ_unit != FEEDER4) {
  4681  0A46  0838               	movf	_activ_unit,w
  4682  0A47  3A03               	xorlw	3
  4683  0A48  1D03               	btfss	3,2
  4684  0A49  0008               	return
  4685                           
  4686                           ;trans_ctrl.c: 1284: } else if (feeder4_pcnt == 0) {
  4687                           
  4688                           ;trans_ctrl.c: 1283: break;
  4689  0A4A  08CF               	movf	_feeder4_pcnt,f
  4690  0A4B  1D03               	skipz
  4691  0A4C  2A53               	goto	l5052
  4692                           
  4693                           ;trans_ctrl.c: 1285: (vacum_pump1_flags1.b4 = 1);
  4694  0A4D  167B               	bsf	_vacum_pump1_flags1,4
  4695                           
  4696                           ;trans_ctrl.c: 1286: ++feeder4_pcnt;
  4697  0A4E  3001               	movlw	1
  4698  0A4F  00F6               	movwf	??_ProcessFeeder4
  4699  0A50  0876               	movf	??_ProcessFeeder4,w
  4700  0A51  07CF               	addwf	_feeder4_pcnt,f
  4701                           
  4702                           ;trans_ctrl.c: 1287: } else if ((feeder4_pcnt == 1) && (vacum_pump1_flags1.b3 == 1)) {
  4703  0A52  0008               	return
  4704  0A53                     l5052:	
  4705  0A53  084F               	movf	_feeder4_pcnt,w
  4706  0A54  3A01               	xorlw	1
  4707  0A55  1903               	btfsc	3,2
  4708  0A56  1DFB               	btfss	_vacum_pump1_flags1,3
  4709  0A57  2A69               	goto	l5062
  4710                           
  4711                           ;trans_ctrl.c: 1288: (output_0_7.b4 = 1);
  4712  0A58  165B               	bsf	_output_0_7,4
  4713                           
  4714                           ;trans_ctrl.c: 1289: SetTimer(PISTON_TMR, 100);
  4715  0A59  3002               	movlw	2
  4716  0A5A  00F2               	movwf	SetTimer@timer_for_setup
  4717  0A5B  3000               	movlw	0
  4718  0A5C  00F3               	movwf	SetTimer@timer_for_setup+1
  4719  0A5D  3064               	movlw	100
  4720  0A5E  00F4               	movwf	SetTimer@period
  4721  0A5F  3000               	movlw	0
  4722  0A60  00F5               	movwf	SetTimer@period+1
  4723  0A61  3187  2744         	fcall	_SetTimer
  4724                           
  4725                           ;trans_ctrl.c: 1290: ++feeder4_pcnt;
  4726  0A63  3001               	movlw	1
  4727  0A64  00F6               	movwf	??_ProcessFeeder4
  4728  0A65  0876               	movf	??_ProcessFeeder4,w
  4729  0A66  0020               	movlb	0	; select bank0
  4730  0A67  07CF               	addwf	_feeder4_pcnt,f
  4731                           
  4732                           ;trans_ctrl.c: 1291: } else if ((feeder4_pcnt == 2) && (timer_flags1.b3 == 1)) {
  4733  0A68  0008               	return
  4734  0A69                     l5062:	
  4735  0A69  084F               	movf	_feeder4_pcnt,w
  4736  0A6A  3A02               	xorlw	2
  4737  0A6B  1903               	btfsc	3,2
  4738  0A6C  1DFA               	btfss	_timer_flags1,3
  4739  0A6D  2A8E               	goto	l5070
  4740                           
  4741                           ;trans_ctrl.c: 1292: SetTimer(MAX_CHARGING_TMR, max_charging_time);
  4742  0A6E  3003               	movlw	3
  4743  0A6F  00F2               	movwf	SetTimer@timer_for_setup
  4744  0A70  3000               	movlw	0
  4745  0A71  00F3               	movwf	SetTimer@timer_for_setup+1
  4746  0A72  0827               	movf	_max_charging_time+1,w
  4747  0A73  01F5               	clrf	SetTimer@period+1
  4748  0A74  07F5               	addwf	SetTimer@period+1,f
  4749  0A75  0826               	movf	_max_charging_time,w
  4750  0A76  01F4               	clrf	SetTimer@period
  4751  0A77  07F4               	addwf	SetTimer@period,f
  4752  0A78  3187  2744  3189   	fcall	_SetTimer
  4753                           
  4754                           ;trans_ctrl.c: 1293: SetTimer(FEEDER4_CHARGING_TMR, feeder4_charging_time);
  4755  0A7B  3005               	movlw	5
  4756  0A7C  00F2               	movwf	SetTimer@timer_for_setup
  4757  0A7D  3000               	movlw	0
  4758  0A7E  00F3               	movwf	SetTimer@timer_for_setup+1
  4759  0A7F  0020               	movlb	0	; select bank0
  4760  0A80  0825               	movf	_feeder4_charging_time+1,w
  4761  0A81  01F5               	clrf	SetTimer@period+1
  4762  0A82  07F5               	addwf	SetTimer@period+1,f
  4763  0A83  0824               	movf	_feeder4_charging_time,w
  4764  0A84  01F4               	clrf	SetTimer@period
  4765  0A85  07F4               	addwf	SetTimer@period,f
  4766  0A86  3187  2744         	fcall	_SetTimer
  4767                           
  4768                           ;trans_ctrl.c: 1294: ++feeder4_pcnt;
  4769  0A88  3001               	movlw	1
  4770  0A89  00F6               	movwf	??_ProcessFeeder4
  4771  0A8A  0876               	movf	??_ProcessFeeder4,w
  4772  0A8B  0020               	movlb	0	; select bank0
  4773  0A8C  07CF               	addwf	_feeder4_pcnt,f
  4774                           
  4775                           ;trans_ctrl.c: 1295: } else if (feeder4_pcnt == 3) {
  4776  0A8D  0008               	return
  4777  0A8E                     l5070:	
  4778  0A8E  084F               	movf	_feeder4_pcnt,w
  4779  0A8F  3A03               	xorlw	3
  4780  0A90  1D03               	skipz
  4781  0A91  0008               	return
  4782                           
  4783                           ;trans_ctrl.c: 1296: if ((timer_flags1.b6 == 1) || !(vacum_pump1_flags1.b3 == 1)) {
  4784  0A92  1B7A               	btfsc	_timer_flags1,6
  4785  0A93  2A96               	goto	l909
  4786  0A94  19FB               	btfsc	_vacum_pump1_flags1,3
  4787  0A95  2AA6               	goto	l907
  4788  0A96                     l909:	
  4789                           
  4790                           ;trans_ctrl.c: 1297: (output_0_7.b4 = 0);
  4791  0A96  125B               	bcf	_output_0_7,4
  4792                           
  4793                           ;trans_ctrl.c: 1298: SetTimer(FEEDER_STATE_CHANGE_TMR, 500);
  4794  0A97  3007               	movlw	7
  4795  0A98  00F2               	movwf	SetTimer@timer_for_setup
  4796  0A99  3000               	movlw	0
  4797  0A9A  00F3               	movwf	SetTimer@timer_for_setup+1
  4798  0A9B  30F4               	movlw	244
  4799  0A9C  00F4               	movwf	SetTimer@period
  4800  0A9D  3001               	movlw	1
  4801  0A9E  00F5               	movwf	SetTimer@period+1
  4802  0A9F  3187  2744         	fcall	_SetTimer
  4803                           
  4804                           ;trans_ctrl.c: 1299: feeder4_state = FEEDER4_DISCHARGING;
  4805  0AA1  0020               	movlb	0	; select bank0
  4806  0AA2  01D0               	clrf	_feeder4_state
  4807  0AA3  0AD0               	incf	_feeder4_state,f
  4808                           
  4809                           ;trans_ctrl.c: 1300: feeder4_pcnt = 0;
  4810  0AA4  01CF               	clrf	_feeder4_pcnt
  4811                           
  4812                           ;trans_ctrl.c: 1301: } else if (!(input_16_23.b4 == 0)) {
  4813  0AA5  0008               	return
  4814  0AA6                     l907:	
  4815  0AA6  1E58               	btfss	_input_16_23,4
  4816  0AA7  0008               	return
  4817                           
  4818                           ;trans_ctrl.c: 1302: (output_0_7.b4 = 0);
  4819  0AA8  125B               	bcf	_output_0_7,4
  4820                           
  4821                           ;trans_ctrl.c: 1303: (feeder4_flags1.b0 = 1);
  4822  0AA9  144E               	bsf	_feeder4_flags1,0
  4823                           
  4824                           ;trans_ctrl.c: 1304: feeder4_state = FEEDER4_ERROR;
  4825  0AAA  3003               	movlw	3
  4826  0AAB  00F6               	movwf	??_ProcessFeeder4
  4827  0AAC  0876               	movf	??_ProcessFeeder4,w
  4828  0AAD  00D0               	movwf	_feeder4_state
  4829                           
  4830                           ;trans_ctrl.c: 1305: }
  4831                           ;trans_ctrl.c: 1306: }
  4832                           ;trans_ctrl.c: 1307: break;
  4833  0AAE  0008               	return
  4834  0AAF                     l5086:	
  4835                           ;trans_ctrl.c: 1309: case FEEDER4_ERROR:
  4836                           
  4837                           
  4838                           ;trans_ctrl.c: 1310: if (activ_unit == FEEDER4) activ_unit = FEEDER5;
  4839  0AAF  0838               	movf	_activ_unit,w
  4840  0AB0  3A03               	xorlw	3
  4841  0AB1  1D03               	skipz
  4842  0AB2  2AB7               	goto	l5090
  4843  0AB3  3004               	movlw	4
  4844  0AB4  00F6               	movwf	??_ProcessFeeder4
  4845  0AB5  0876               	movf	??_ProcessFeeder4,w
  4846  0AB6  00B8               	movwf	_activ_unit
  4847  0AB7                     l5090:	
  4848                           
  4849                           ;trans_ctrl.c: 1311: if ((taster_flags1.b5 == 1) && (timer_flags3.b1 == 1)) {
  4850  0AB7  1AE3               	btfsc	_taster_flags1,5
  4851  0AB8  1CE9               	btfss	_timer_flags3,1
  4852  0AB9  2AC6               	goto	l5098
  4853                           
  4854                           ;trans_ctrl.c: 1312: SetTimer(FEEDER4_CONTROL_DELAY_TMR, 100);
  4855  0ABA  300C               	movlw	12
  4856  0ABB  00F2               	movwf	SetTimer@timer_for_setup
  4857  0ABC  3000               	movlw	0
  4858  0ABD  00F3               	movwf	SetTimer@timer_for_setup+1
  4859  0ABE  3064               	movlw	100
  4860  0ABF  00F4               	movwf	SetTimer@period
  4861  0AC0  3000               	movlw	0
  4862  0AC1  00F5               	movwf	SetTimer@period+1
  4863  0AC2  3187  2744         	fcall	_SetTimer
  4864                           
  4865                           ;trans_ctrl.c: 1313: feeder4_state = FEEDER4_OFF;
  4866  0AC4  0020               	movlb	0	; select bank0
  4867  0AC5  01D0               	clrf	_feeder4_state
  4868  0AC6                     l5098:	
  4869                           
  4870                           ;trans_ctrl.c: 1314: }
  4871                           ;trans_ctrl.c: 1315: if (!(input_16_23.b5 == 0)) (feeder4_flags1.b1 = 1);
  4872  0AC6  1AD8               	btfsc	_input_16_23,5
  4873  0AC7  14CE               	bsf	_feeder4_flags1,1
  4874                           
  4875                           ;trans_ctrl.c: 1316: (output_0_7.b4 = 0);
  4876  0AC8  125B               	bcf	_output_0_7,4
  4877                           
  4878                           ;trans_ctrl.c: 1318: }
  4879                           
  4880                           ;trans_ctrl.c: 1317: break;
  4881  0AC9  0008               	return
  4882  0ACA                     l5104:	
  4883  0ACA  0020               	movlb	0	; select bank0
  4884  0ACB  0850               	movf	_feeder4_state,w
  4885                           
  4886                           ; Switch size 1, requested type "space"
  4887                           ; Number of cases is 4, Range of values is 0 to 3
  4888                           ; switch strategies available:
  4889                           ; Name         Instructions Cycles
  4890                           ; simple_byte           13     7 (average)
  4891                           ; direct_byte           14     6 (fixed)
  4892                           ; jumptable            260     6 (fixed)
  4893                           ;	Chosen strategy is simple_byte
  4894  0ACC  3A00               	xorlw	0	; case 0
  4895  0ACD  1903               	skipnz
  4896  0ACE  29F4               	goto	l4994
  4897  0ACF  3A01               	xorlw	1	; case 1
  4898  0AD0  1903               	skipnz
  4899  0AD1  2A10               	goto	l889
  4900  0AD2  3A03               	xorlw	3	; case 2
  4901  0AD3  1903               	skipnz
  4902  0AD4  2A34               	goto	l895
  4903  0AD5  3A01               	xorlw	1	; case 3
  4904  0AD6  1903               	skipnz
  4905  0AD7  2AAF               	goto	l5086
  4906  0AD8  2AD9               	goto	l916
  4907  0AD9                     l916:	
  4908  0AD9  0008               	return
  4909  0ADA                     __end_of_ProcessFeeder4:	
  4910                           
  4911                           	psect	text8
  4912  0ADA                     __ptext8:	
  4913 ;; *************** function _ProcessFeeder3 *****************
  4914 ;; Defined at:
  4915 ;;		line 1174 in file "trans_ctrl.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;		None
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;		None
  4920 ;; Return value:  Size  Location     Type
  4921 ;;		None               void
  4922 ;; Registers used:
  4923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4929 ;;      Params:         0       0       0       0       0       0       0       0
  4930 ;;      Locals:         0       0       0       0       0       0       0       0
  4931 ;;      Temps:          1       0       0       0       0       0       0       0
  4932 ;;      Totals:         1       0       0       0       0       0       0       0
  4933 ;;Total ram usage:        1 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    3
  4936 ;; This function calls:
  4937 ;;		_SetTimer
  4938 ;; This function is called by:
  4939 ;;		_main
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           
  4944                           ;psect for function _ProcessFeeder3
  4945  0ADA                     _ProcessFeeder3:	
  4946                           
  4947                           ;trans_ctrl.c: 1176: switch (feeder3_state) {
  4948                           
  4949                           ;incstack = 0
  4950                           ; Regs used in _ProcessFeeder3: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4951  0ADA  2BB3               	goto	l4990
  4952  0ADB                     l4876:	
  4953                           ;trans_ctrl.c: 1178: case FEEDER3_OFF:
  4954                           
  4955                           
  4956                           ;trans_ctrl.c: 1179: if (activ_unit == FEEDER3) activ_unit = FEEDER4;
  4957  0ADB  0020               	movlb	0	; select bank0
  4958  0ADC  0838               	movf	_activ_unit,w
  4959  0ADD  3A02               	xorlw	2
  4960  0ADE  1D03               	skipz
  4961  0ADF  2AE4               	goto	l4880
  4962  0AE0  3003               	movlw	3
  4963  0AE1  00F6               	movwf	??_ProcessFeeder3
  4964  0AE2  0876               	movf	??_ProcessFeeder3,w
  4965  0AE3  00B8               	movwf	_activ_unit
  4966  0AE4                     l4880:	
  4967                           
  4968                           ;trans_ctrl.c: 1180: if ((taster_flags1.b4 == 1) && (timer_flags3.b0 == 1)) {
  4969  0AE4  1A63               	btfsc	_taster_flags1,4
  4970  0AE5  1C69               	btfss	_timer_flags3,0
  4971  0AE6  2AF4               	goto	l4888
  4972                           
  4973                           ;trans_ctrl.c: 1181: SetTimer(FEEDER3_CONTROL_DELAY_TMR, 100);
  4974  0AE7  300B               	movlw	11
  4975  0AE8  00F2               	movwf	SetTimer@timer_for_setup
  4976  0AE9  3000               	movlw	0
  4977  0AEA  00F3               	movwf	SetTimer@timer_for_setup+1
  4978  0AEB  3064               	movlw	100
  4979  0AEC  00F4               	movwf	SetTimer@period
  4980  0AED  3000               	movlw	0
  4981  0AEE  00F5               	movwf	SetTimer@period+1
  4982  0AEF  3187  2744         	fcall	_SetTimer
  4983                           
  4984                           ;trans_ctrl.c: 1182: feeder3_state = FEEDER3_DISCHARGING;
  4985  0AF1  0020               	movlb	0	; select bank0
  4986  0AF2  01CD               	clrf	_feeder3_state
  4987  0AF3  0ACD               	incf	_feeder3_state,f
  4988  0AF4                     l4888:	
  4989                           
  4990                           ;trans_ctrl.c: 1183: }
  4991                           ;trans_ctrl.c: 1184: (output_0_7.b3 = 0);
  4992  0AF4  11DB               	bcf	_output_0_7,3
  4993                           
  4994                           ;trans_ctrl.c: 1185: feeder3_flags1._byte = 0x00;
  4995  0AF5  01CB               	clrf	_feeder3_flags1
  4996                           
  4997                           ;trans_ctrl.c: 1186: break;
  4998  0AF6  0008               	return
  4999  0AF7                     l855:	
  5000                           ;trans_ctrl.c: 1188: case FEEDER3_DISCHARGING:
  5001                           
  5002                           
  5003                           ;trans_ctrl.c: 1189: if ((taster_flags1.b4 == 1) && (timer_flags3.b0 == 1)) {
  5004  0AF7  1A63               	btfsc	_taster_flags1,4
  5005  0AF8  1C69               	btfss	_timer_flags3,0
  5006  0AF9  2B07               	goto	l4898
  5007                           
  5008                           ;trans_ctrl.c: 1190: SetTimer(FEEDER3_CONTROL_DELAY_TMR, 100);
  5009  0AFA  300B               	movlw	11
  5010  0AFB  00F2               	movwf	SetTimer@timer_for_setup
  5011  0AFC  3000               	movlw	0
  5012  0AFD  00F3               	movwf	SetTimer@timer_for_setup+1
  5013  0AFE  3064               	movlw	100
  5014  0AFF  00F4               	movwf	SetTimer@period
  5015  0B00  3000               	movlw	0
  5016  0B01  00F5               	movwf	SetTimer@period+1
  5017  0B02  3187  2744  318A   	fcall	_SetTimer
  5018                           
  5019                           ;trans_ctrl.c: 1191: feeder3_state = FEEDER3_OFF;
  5020  0B05  0020               	movlb	0	; select bank0
  5021  0B06  01CD               	clrf	_feeder3_state
  5022  0B07                     l4898:	
  5023                           
  5024                           ;trans_ctrl.c: 1192: }
  5025                           ;trans_ctrl.c: 1193: if ((input_16_23.b2 == 0) && !(input_16_23.b3 == 0) && (timer_flags
      +                          1.b2 == 1)) {
  5026  0B07  1D58               	btfss	_input_16_23,2
  5027  0B08  1DD8               	btfss	_input_16_23,3
  5028  0B09  2B11               	goto	l4906
  5029  0B0A  1D7A               	btfss	_timer_flags1,2
  5030  0B0B  2B11               	goto	l4906
  5031                           
  5032                           ;trans_ctrl.c: 1194: feeder3_state = FEEDER3_CHARGING;
  5033  0B0C  3002               	movlw	2
  5034  0B0D  00F6               	movwf	??_ProcessFeeder3
  5035  0B0E  0876               	movf	??_ProcessFeeder3,w
  5036  0B0F  00CD               	movwf	_feeder3_state
  5037                           
  5038                           ;trans_ctrl.c: 1195: } else if (activ_unit == FEEDER3) activ_unit = FEEDER4;
  5039  0B10  2B19               	goto	l4910
  5040  0B11                     l4906:	
  5041  0B11  0838               	movf	_activ_unit,w
  5042  0B12  3A02               	xorlw	2
  5043  0B13  1D03               	skipz
  5044  0B14  2B19               	goto	l4910
  5045  0B15  3003               	movlw	3
  5046  0B16  00F6               	movwf	??_ProcessFeeder3
  5047  0B17  0876               	movf	??_ProcessFeeder3,w
  5048  0B18  00B8               	movwf	_activ_unit
  5049  0B19                     l4910:	
  5050                           
  5051                           ;trans_ctrl.c: 1196: feeder3_pcnt = 0;
  5052  0B19  01CC               	clrf	_feeder3_pcnt
  5053                           
  5054                           ;trans_ctrl.c: 1197: break;
  5055  0B1A  0008               	return
  5056  0B1B                     l860:	
  5057                           ;trans_ctrl.c: 1199: case FEEDER3_CHARGING:
  5058                           
  5059                           
  5060                           ;trans_ctrl.c: 1200: if ((taster_flags1.b4 == 1) && (timer_flags3.b0 == 1)) {
  5061  0B1B  1A63               	btfsc	_taster_flags1,4
  5062  0B1C  1C69               	btfss	_timer_flags3,0
  5063  0B1D  2B2B               	goto	l4918
  5064                           
  5065                           ;trans_ctrl.c: 1201: SetTimer(FEEDER3_CONTROL_DELAY_TMR, 100);
  5066  0B1E  300B               	movlw	11
  5067  0B1F  00F2               	movwf	SetTimer@timer_for_setup
  5068  0B20  3000               	movlw	0
  5069  0B21  00F3               	movwf	SetTimer@timer_for_setup+1
  5070  0B22  3064               	movlw	100
  5071  0B23  00F4               	movwf	SetTimer@period
  5072  0B24  3000               	movlw	0
  5073  0B25  00F5               	movwf	SetTimer@period+1
  5074  0B26  3187  2744  318A   	fcall	_SetTimer
  5075                           
  5076                           ;trans_ctrl.c: 1202: feeder3_state = FEEDER3_OFF;
  5077  0B29  0020               	movlb	0	; select bank0
  5078  0B2A  01CD               	clrf	_feeder3_state
  5079  0B2B                     l4918:	
  5080                           
  5081                           ;trans_ctrl.c: 1203: }
  5082                           ;trans_ctrl.c: 1204: if (activ_unit != FEEDER3) {
  5083  0B2B  0838               	movf	_activ_unit,w
  5084  0B2C  3A02               	xorlw	2
  5085  0B2D  1D03               	btfss	3,2
  5086  0B2E  0008               	return
  5087                           
  5088                           ;trans_ctrl.c: 1206: } else if (feeder3_pcnt == 0) {
  5089                           
  5090                           ;trans_ctrl.c: 1205: break;
  5091  0B2F  08CC               	movf	_feeder3_pcnt,f
  5092  0B30  1D03               	skipz
  5093  0B31  2B38               	goto	l4930
  5094                           
  5095                           ;trans_ctrl.c: 1207: (vacum_pump1_flags1.b4 = 1);
  5096  0B32  167B               	bsf	_vacum_pump1_flags1,4
  5097                           
  5098                           ;trans_ctrl.c: 1208: ++feeder3_pcnt;
  5099  0B33  3001               	movlw	1
  5100  0B34  00F6               	movwf	??_ProcessFeeder3
  5101  0B35  0876               	movf	??_ProcessFeeder3,w
  5102  0B36  07CC               	addwf	_feeder3_pcnt,f
  5103                           
  5104                           ;trans_ctrl.c: 1209: } else if ((feeder3_pcnt == 1) && (vacum_pump1_flags1.b3 == 1)) {
  5105  0B37  0008               	return
  5106  0B38                     l4930:	
  5107  0B38  084C               	movf	_feeder3_pcnt,w
  5108  0B39  3A01               	xorlw	1
  5109  0B3A  1903               	btfsc	3,2
  5110  0B3B  1DFB               	btfss	_vacum_pump1_flags1,3
  5111  0B3C  2B4E               	goto	l4940
  5112                           
  5113                           ;trans_ctrl.c: 1210: (output_0_7.b3 = 1);
  5114  0B3D  15DB               	bsf	_output_0_7,3
  5115                           
  5116                           ;trans_ctrl.c: 1211: SetTimer(PISTON_TMR, 100);
  5117  0B3E  3002               	movlw	2
  5118  0B3F  00F2               	movwf	SetTimer@timer_for_setup
  5119  0B40  3000               	movlw	0
  5120  0B41  00F3               	movwf	SetTimer@timer_for_setup+1
  5121  0B42  3064               	movlw	100
  5122  0B43  00F4               	movwf	SetTimer@period
  5123  0B44  3000               	movlw	0
  5124  0B45  00F5               	movwf	SetTimer@period+1
  5125  0B46  3187  2744         	fcall	_SetTimer
  5126                           
  5127                           ;trans_ctrl.c: 1212: ++feeder3_pcnt;
  5128  0B48  3001               	movlw	1
  5129  0B49  00F6               	movwf	??_ProcessFeeder3
  5130  0B4A  0876               	movf	??_ProcessFeeder3,w
  5131  0B4B  0020               	movlb	0	; select bank0
  5132  0B4C  07CC               	addwf	_feeder3_pcnt,f
  5133                           
  5134                           ;trans_ctrl.c: 1213: } else if ((feeder3_pcnt == 2) && (timer_flags1.b3 == 1)) {
  5135  0B4D  0008               	return
  5136  0B4E                     l4940:	
  5137  0B4E  084C               	movf	_feeder3_pcnt,w
  5138  0B4F  3A02               	xorlw	2
  5139  0B50  1903               	btfsc	3,2
  5140  0B51  1DFA               	btfss	_timer_flags1,3
  5141  0B52  2B65               	goto	l4948
  5142                           
  5143                           ;trans_ctrl.c: 1214: SetTimer(MAX_CHARGING_TMR, max_charging_time);
  5144  0B53  3003               	movlw	3
  5145  0B54  00F2               	movwf	SetTimer@timer_for_setup
  5146  0B55  3000               	movlw	0
  5147  0B56  00F3               	movwf	SetTimer@timer_for_setup+1
  5148  0B57  0827               	movf	_max_charging_time+1,w
  5149  0B58  01F5               	clrf	SetTimer@period+1
  5150  0B59  07F5               	addwf	SetTimer@period+1,f
  5151  0B5A  0826               	movf	_max_charging_time,w
  5152  0B5B  01F4               	clrf	SetTimer@period
  5153  0B5C  07F4               	addwf	SetTimer@period,f
  5154  0B5D  3187  2744         	fcall	_SetTimer
  5155                           
  5156                           ;trans_ctrl.c: 1215: ++feeder3_pcnt;
  5157  0B5F  3001               	movlw	1
  5158  0B60  00F6               	movwf	??_ProcessFeeder3
  5159  0B61  0876               	movf	??_ProcessFeeder3,w
  5160  0B62  0020               	movlb	0	; select bank0
  5161  0B63  07CC               	addwf	_feeder3_pcnt,f
  5162                           
  5163                           ;trans_ctrl.c: 1216: } else if (feeder3_pcnt == 3) {
  5164  0B64  0008               	return
  5165  0B65                     l4948:	
  5166  0B65  084C               	movf	_feeder3_pcnt,w
  5167  0B66  3A03               	xorlw	3
  5168  0B67  1D03               	skipz
  5169  0B68  0008               	return
  5170                           
  5171                           ;trans_ctrl.c: 1217: if ((input_16_23.b3 == 0) || !(vacum_pump1_flags1.b3 == 1)) {
  5172  0B69  1DD8               	btfss	_input_16_23,3
  5173  0B6A  2B6D               	goto	l873
  5174  0B6B  19FB               	btfsc	_vacum_pump1_flags1,3
  5175  0B6C  2B7E               	goto	l871
  5176  0B6D                     l873:	
  5177                           
  5178                           ;trans_ctrl.c: 1218: (output_0_7.b3 = 0);
  5179  0B6D  11DB               	bcf	_output_0_7,3
  5180                           
  5181                           ;trans_ctrl.c: 1219: (feeder3_flags1.b0 = 0);
  5182  0B6E  104B               	bcf	_feeder3_flags1,0
  5183                           
  5184                           ;trans_ctrl.c: 1220: SetTimer(FEEDER_STATE_CHANGE_TMR, 500);
  5185  0B6F  3007               	movlw	7
  5186  0B70  00F2               	movwf	SetTimer@timer_for_setup
  5187  0B71  3000               	movlw	0
  5188  0B72  00F3               	movwf	SetTimer@timer_for_setup+1
  5189  0B73  30F4               	movlw	244
  5190  0B74  00F4               	movwf	SetTimer@period
  5191  0B75  3001               	movlw	1
  5192  0B76  00F5               	movwf	SetTimer@period+1
  5193  0B77  3187  2744         	fcall	_SetTimer
  5194                           
  5195                           ;trans_ctrl.c: 1221: feeder3_state = FEEDER3_DISCHARGING;
  5196  0B79  0020               	movlb	0	; select bank0
  5197  0B7A  01CD               	clrf	_feeder3_state
  5198  0B7B  0ACD               	incf	_feeder3_state,f
  5199                           
  5200                           ;trans_ctrl.c: 1222: feeder3_pcnt = 0;
  5201  0B7C  01CC               	clrf	_feeder3_pcnt
  5202                           
  5203                           ;trans_ctrl.c: 1223: } else if (!(input_16_23.b2 == 0)) {
  5204  0B7D  0008               	return
  5205  0B7E                     l871:	
  5206  0B7E  1D58               	btfss	_input_16_23,2
  5207  0B7F  2B87               	goto	l875
  5208                           
  5209                           ;trans_ctrl.c: 1224: (output_0_7.b3 = 0);
  5210  0B80  11DB               	bcf	_output_0_7,3
  5211                           
  5212                           ;trans_ctrl.c: 1225: (feeder3_flags1.b1 = 1);
  5213  0B81  14CB               	bsf	_feeder3_flags1,1
  5214                           
  5215                           ;trans_ctrl.c: 1226: feeder3_state = FEEDER3_ERROR;
  5216  0B82  3003               	movlw	3
  5217  0B83  00F6               	movwf	??_ProcessFeeder3
  5218  0B84  0876               	movf	??_ProcessFeeder3,w
  5219  0B85  00CD               	movwf	_feeder3_state
  5220                           
  5221                           ;trans_ctrl.c: 1227: } else if ((timer_flags1.b4 == 1)) {
  5222  0B86  0008               	return
  5223  0B87                     l875:	
  5224  0B87  1E7A               	btfss	_timer_flags1,4
  5225  0B88  0008               	return
  5226                           
  5227                           ;trans_ctrl.c: 1228: (output_0_7.b3 = 0);
  5228  0B89  11DB               	bcf	_output_0_7,3
  5229                           
  5230                           ;trans_ctrl.c: 1229: SetTimer(FEEDER_STATE_CHANGE_TMR, 500);
  5231  0B8A  3007               	movlw	7
  5232  0B8B  00F2               	movwf	SetTimer@timer_for_setup
  5233  0B8C  3000               	movlw	0
  5234  0B8D  00F3               	movwf	SetTimer@timer_for_setup+1
  5235  0B8E  30F4               	movlw	244
  5236  0B8F  00F4               	movwf	SetTimer@period
  5237  0B90  3001               	movlw	1
  5238  0B91  00F5               	movwf	SetTimer@period+1
  5239  0B92  3187  2744         	fcall	_SetTimer
  5240                           
  5241                           ;trans_ctrl.c: 1230: feeder3_state = FEEDER3_DISCHARGING;
  5242  0B94  0020               	movlb	0	; select bank0
  5243  0B95  01CD               	clrf	_feeder3_state
  5244  0B96  0ACD               	incf	_feeder3_state,f
  5245                           
  5246                           ;trans_ctrl.c: 1231: (feeder3_flags1.b0 = 1);
  5247  0B97  144B               	bsf	_feeder3_flags1,0
  5248                           
  5249                           ;trans_ctrl.c: 1232: feeder3_pcnt = 0;
  5250  0B98  01CC               	clrf	_feeder3_pcnt
  5251                           
  5252                           ;trans_ctrl.c: 1233: }
  5253                           ;trans_ctrl.c: 1234: }
  5254                           ;trans_ctrl.c: 1235: break;
  5255  0B99  0008               	return
  5256  0B9A                     l4974:	
  5257                           ;trans_ctrl.c: 1237: case FEEDER3_ERROR:
  5258                           
  5259                           
  5260                           ;trans_ctrl.c: 1238: if (activ_unit == FEEDER3) activ_unit = FEEDER4;
  5261  0B9A  0838               	movf	_activ_unit,w
  5262  0B9B  3A02               	xorlw	2
  5263  0B9C  1D03               	skipz
  5264  0B9D  2BA2               	goto	l4978
  5265  0B9E  3003               	movlw	3
  5266  0B9F  00F6               	movwf	??_ProcessFeeder3
  5267  0BA0  0876               	movf	??_ProcessFeeder3,w
  5268  0BA1  00B8               	movwf	_activ_unit
  5269  0BA2                     l4978:	
  5270                           
  5271                           ;trans_ctrl.c: 1239: if ((taster_flags1.b4 == 1) && (timer_flags3.b0 == 1)) {
  5272  0BA2  1A63               	btfsc	_taster_flags1,4
  5273  0BA3  1C69               	btfss	_timer_flags3,0
  5274  0BA4  2BB1               	goto	l4986
  5275                           
  5276                           ;trans_ctrl.c: 1240: SetTimer(FEEDER3_CONTROL_DELAY_TMR, 100);
  5277  0BA5  300B               	movlw	11
  5278  0BA6  00F2               	movwf	SetTimer@timer_for_setup
  5279  0BA7  3000               	movlw	0
  5280  0BA8  00F3               	movwf	SetTimer@timer_for_setup+1
  5281  0BA9  3064               	movlw	100
  5282  0BAA  00F4               	movwf	SetTimer@period
  5283  0BAB  3000               	movlw	0
  5284  0BAC  00F5               	movwf	SetTimer@period+1
  5285  0BAD  3187  2744         	fcall	_SetTimer
  5286                           
  5287                           ;trans_ctrl.c: 1241: feeder3_state = FEEDER3_OFF;
  5288  0BAF  0020               	movlb	0	; select bank0
  5289  0BB0  01CD               	clrf	_feeder3_state
  5290  0BB1                     l4986:	
  5291                           
  5292                           ;trans_ctrl.c: 1242: }
  5293                           ;trans_ctrl.c: 1243: (output_0_7.b3 = 0);
  5294  0BB1  11DB               	bcf	_output_0_7,3
  5295                           
  5296                           ;trans_ctrl.c: 1245: }
  5297                           
  5298                           ;trans_ctrl.c: 1244: break;
  5299  0BB2  0008               	return
  5300  0BB3                     l4990:	
  5301  0BB3  0020               	movlb	0	; select bank0
  5302  0BB4  084D               	movf	_feeder3_state,w
  5303                           
  5304                           ; Switch size 1, requested type "space"
  5305                           ; Number of cases is 4, Range of values is 0 to 3
  5306                           ; switch strategies available:
  5307                           ; Name         Instructions Cycles
  5308                           ; simple_byte           13     7 (average)
  5309                           ; direct_byte           14     6 (fixed)
  5310                           ; jumptable            260     6 (fixed)
  5311                           ;	Chosen strategy is simple_byte
  5312  0BB5  3A00               	xorlw	0	; case 0
  5313  0BB6  1903               	skipnz
  5314  0BB7  2ADB               	goto	l4876
  5315  0BB8  3A01               	xorlw	1	; case 1
  5316  0BB9  1903               	skipnz
  5317  0BBA  2AF7               	goto	l855
  5318  0BBB  3A03               	xorlw	3	; case 2
  5319  0BBC  1903               	skipnz
  5320  0BBD  2B1B               	goto	l860
  5321  0BBE  3A01               	xorlw	1	; case 3
  5322  0BBF  1903               	skipnz
  5323  0BC0  2B9A               	goto	l4974
  5324  0BC1  2BC2               	goto	l881
  5325  0BC2                     l881:	
  5326  0BC2  0008               	return
  5327  0BC3                     __end_of_ProcessFeeder3:	
  5328                           
  5329                           	psect	text9
  5330  0602                     __ptext9:	
  5331 ;; *************** function _ProcessFeeder2 *****************
  5332 ;; Defined at:
  5333 ;;		line 1079 in file "trans_ctrl.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;		None
  5336 ;; Auto vars:     Size  Location     Type
  5337 ;;		None
  5338 ;; Return value:  Size  Location     Type
  5339 ;;		None               void
  5340 ;; Registers used:
  5341 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5342 ;; Tracked objects:
  5343 ;;		On entry : 0/0
  5344 ;;		On exit  : 0/0
  5345 ;;		Unchanged: 0/0
  5346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5347 ;;      Params:         0       0       0       0       0       0       0       0
  5348 ;;      Locals:         0       0       0       0       0       0       0       0
  5349 ;;      Temps:          1       0       0       0       0       0       0       0
  5350 ;;      Totals:         1       0       0       0       0       0       0       0
  5351 ;;Total ram usage:        1 bytes
  5352 ;; Hardware stack levels used:    1
  5353 ;; Hardware stack levels required when called:    3
  5354 ;; This function calls:
  5355 ;;		_SetTimer
  5356 ;; This function is called by:
  5357 ;;		_main
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           
  5362                           ;psect for function _ProcessFeeder2
  5363  0602                     _ProcessFeeder2:	
  5364                           
  5365                           ;trans_ctrl.c: 1081: switch (feeder2_state) {
  5366                           
  5367                           ;incstack = 0
  5368                           ; Regs used in _ProcessFeeder2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5369  0602  2F34               	goto	l4872
  5370  0603                     l4712:	
  5371                           ;trans_ctrl.c: 1083: case FEEDER2_OFF:
  5372                           
  5373                           
  5374                           ;trans_ctrl.c: 1084: if (activ_unit == FEEDER2) activ_unit = FEEDER3;
  5375  0603  0020               	movlb	0	; select bank0
  5376  0604  0838               	movf	_activ_unit,w
  5377  0605  3A01               	xorlw	1
  5378  0606  1D03               	skipz
  5379  0607  2E0C               	goto	l4716
  5380  0608  3002               	movlw	2
  5381  0609  00F6               	movwf	??_ProcessFeeder2
  5382  060A  0876               	movf	??_ProcessFeeder2,w
  5383  060B  00B8               	movwf	_activ_unit
  5384  060C                     l4716:	
  5385                           
  5386                           ;trans_ctrl.c: 1085: if ((taster_flags1.b3 == 1) && (timer_flags2.b7 == 1)) {
  5387  060C  19E3               	btfsc	_taster_flags1,3
  5388  060D  1FE8               	btfss	_timer_flags2,7
  5389  060E  2E1C               	goto	l4724
  5390                           
  5391                           ;trans_ctrl.c: 1086: SetTimer(FEEDER2_CONTROL_DELAY_TMR, 100);
  5392  060F  300A               	movlw	10
  5393  0610  00F2               	movwf	SetTimer@timer_for_setup
  5394  0611  3000               	movlw	0
  5395  0612  00F3               	movwf	SetTimer@timer_for_setup+1
  5396  0613  3064               	movlw	100
  5397  0614  00F4               	movwf	SetTimer@period
  5398  0615  3000               	movlw	0
  5399  0616  00F5               	movwf	SetTimer@period+1
  5400  0617  3187  2744         	fcall	_SetTimer
  5401                           
  5402                           ;trans_ctrl.c: 1087: feeder2_state = FEEDER2_DISCHARGING;
  5403  0619  0020               	movlb	0	; select bank0
  5404  061A  01CA               	clrf	_feeder2_state
  5405  061B  0ACA               	incf	_feeder2_state,f
  5406  061C                     l4724:	
  5407                           
  5408                           ;trans_ctrl.c: 1088: }
  5409                           ;trans_ctrl.c: 1089: (output_8_15.b0 = 0);
  5410  061C  105C               	bcf	_output_8_15,0
  5411                           
  5412                           ;trans_ctrl.c: 1090: (output_0_7.b2 = 0);
  5413  061D  115B               	bcf	_output_0_7,2
  5414                           
  5415                           ;trans_ctrl.c: 1091: feeder2_flags1._byte = 0x00;
  5416  061E  01C8               	clrf	_feeder2_flags1
  5417                           
  5418                           ;trans_ctrl.c: 1092: feeder2_pcnt = 0;
  5419  061F  01C9               	clrf	_feeder2_pcnt
  5420                           
  5421                           ;trans_ctrl.c: 1093: break;
  5422  0620  0008               	return
  5423  0621                     l810:	
  5424                           ;trans_ctrl.c: 1095: case FEEDER2_DISCHARGING:
  5425                           
  5426                           
  5427                           ;trans_ctrl.c: 1096: if ((taster_flags1.b3 == 1) && (timer_flags2.b7 == 1)) {
  5428  0621  19E3               	btfsc	_taster_flags1,3
  5429  0622  1FE8               	btfss	_timer_flags2,7
  5430  0623  2E31               	goto	l4738
  5431                           
  5432                           ;trans_ctrl.c: 1097: SetTimer(FEEDER2_CONTROL_DELAY_TMR, 100);
  5433  0624  300A               	movlw	10
  5434  0625  00F2               	movwf	SetTimer@timer_for_setup
  5435  0626  3000               	movlw	0
  5436  0627  00F3               	movwf	SetTimer@timer_for_setup+1
  5437  0628  3064               	movlw	100
  5438  0629  00F4               	movwf	SetTimer@period
  5439  062A  3000               	movlw	0
  5440  062B  00F5               	movwf	SetTimer@period+1
  5441  062C  3187  2744  3186   	fcall	_SetTimer
  5442                           
  5443                           ;trans_ctrl.c: 1098: feeder2_state = FEEDER2_OFF;
  5444  062F  0020               	movlb	0	; select bank0
  5445  0630  01CA               	clrf	_feeder2_state
  5446  0631                     l4738:	
  5447                           
  5448                           ;trans_ctrl.c: 1099: }
  5449                           ;trans_ctrl.c: 1100: if ((feeder2_pcnt == 0) && (timer_flags1.b2 == 1)) {
  5450  0631  08C9               	movf	_feeder2_pcnt,f
  5451  0632  1903               	btfsc	3,2
  5452  0633  1D7A               	btfss	_timer_flags1,2
  5453  0634  2E61               	goto	l4758
  5454                           
  5455                           ;trans_ctrl.c: 1101: if (activ_unit == FEEDER2) activ_unit = FEEDER3;
  5456  0635  0838               	movf	_activ_unit,w
  5457  0636  3A01               	xorlw	1
  5458  0637  1D03               	skipz
  5459  0638  2E3D               	goto	l4746
  5460  0639  3002               	movlw	2
  5461  063A  00F6               	movwf	??_ProcessFeeder2
  5462  063B  0876               	movf	??_ProcessFeeder2,w
  5463  063C  00B8               	movwf	_activ_unit
  5464  063D                     l4746:	
  5465                           
  5466                           ;trans_ctrl.c: 1102: SetTimer(FEEDER2_CLEANING_PISTON_TMR, 12000);
  5467  063D  3006               	movlw	6
  5468  063E  00F2               	movwf	SetTimer@timer_for_setup
  5469  063F  3000               	movlw	0
  5470  0640  00F3               	movwf	SetTimer@timer_for_setup+1
  5471  0641  30E0               	movlw	224
  5472  0642  00F4               	movwf	SetTimer@period
  5473  0643  302E               	movlw	46
  5474  0644  00F5               	movwf	SetTimer@period+1
  5475  0645  3187  2744  3186   	fcall	_SetTimer
  5476                           
  5477                           ;trans_ctrl.c: 1103: if (!(input_16_23.b0 == 0)) {
  5478  0648  0020               	movlb	0	; select bank0
  5479  0649  1C58               	btfss	_input_16_23,0
  5480  064A  2E5C               	goto	l4756
  5481                           
  5482                           ;trans_ctrl.c: 1104: SetTimer(PISTON_TMR, 100);
  5483  064B  3002               	movlw	2
  5484  064C  00F2               	movwf	SetTimer@timer_for_setup
  5485  064D  3000               	movlw	0
  5486  064E  00F3               	movwf	SetTimer@timer_for_setup+1
  5487  064F  3064               	movlw	100
  5488  0650  00F4               	movwf	SetTimer@period
  5489  0651  3000               	movlw	0
  5490  0652  00F5               	movwf	SetTimer@period+1
  5491  0653  3187  2744         	fcall	_SetTimer
  5492                           
  5493                           ;trans_ctrl.c: 1105: (output_8_15.b0 = 1);
  5494  0655  0020               	movlb	0	; select bank0
  5495  0656  145C               	bsf	_output_8_15,0
  5496                           
  5497                           ;trans_ctrl.c: 1106: ++feeder2_pcnt;
  5498  0657  3001               	movlw	1
  5499  0658  00F6               	movwf	??_ProcessFeeder2
  5500  0659  0876               	movf	??_ProcessFeeder2,w
  5501  065A  07C9               	addwf	_feeder2_pcnt,f
  5502                           
  5503                           ;trans_ctrl.c: 1107: } else feeder2_pcnt = 2;
  5504  065B  0008               	return
  5505  065C                     l4756:	
  5506  065C  3002               	movlw	2
  5507  065D  00F6               	movwf	??_ProcessFeeder2
  5508  065E  0876               	movf	??_ProcessFeeder2,w
  5509  065F  00C9               	movwf	_feeder2_pcnt
  5510                           
  5511                           ;trans_ctrl.c: 1108: } else if ((feeder2_pcnt == 1) && (timer_flags1.b3 == 1)) {
  5512  0660  0008               	return
  5513  0661                     l4758:	
  5514  0661  0849               	movf	_feeder2_pcnt,w
  5515  0662  3A01               	xorlw	1
  5516  0663  1903               	btfsc	3,2
  5517  0664  1DFA               	btfss	_timer_flags1,3
  5518  0665  2E7F               	goto	l4772
  5519                           
  5520                           ;trans_ctrl.c: 1109: if (activ_unit == FEEDER2) activ_unit = FEEDER3;
  5521  0666  0838               	movf	_activ_unit,w
  5522  0667  3A01               	xorlw	1
  5523  0668  1D03               	skipz
  5524  0669  2E6E               	goto	l4766
  5525  066A  3002               	movlw	2
  5526  066B  00F6               	movwf	??_ProcessFeeder2
  5527  066C  0876               	movf	??_ProcessFeeder2,w
  5528  066D  00B8               	movwf	_activ_unit
  5529  066E                     l4766:	
  5530                           
  5531                           ;trans_ctrl.c: 1110: SetTimer(PISTON_TMR, 100);
  5532  066E  3002               	movlw	2
  5533  066F  00F2               	movwf	SetTimer@timer_for_setup
  5534  0670  3000               	movlw	0
  5535  0671  00F3               	movwf	SetTimer@timer_for_setup+1
  5536  0672  3064               	movlw	100
  5537  0673  00F4               	movwf	SetTimer@period
  5538  0674  3000               	movlw	0
  5539  0675  00F5               	movwf	SetTimer@period+1
  5540  0676  3187  2744         	fcall	_SetTimer
  5541                           
  5542                           ;trans_ctrl.c: 1111: (output_8_15.b0 = 0);
  5543  0678  0020               	movlb	0	; select bank0
  5544  0679  105C               	bcf	_output_8_15,0
  5545                           
  5546                           ;trans_ctrl.c: 1112: ++feeder2_pcnt;
  5547  067A  3001               	movlw	1
  5548  067B  00F6               	movwf	??_ProcessFeeder2
  5549  067C  0876               	movf	??_ProcessFeeder2,w
  5550  067D  07C9               	addwf	_feeder2_pcnt,f
  5551                           
  5552                           ;trans_ctrl.c: 1113: } else if (feeder2_pcnt == 2) {
  5553  067E  0008               	return
  5554  067F                     l4772:	
  5555  067F  0849               	movf	_feeder2_pcnt,w
  5556  0680  3A02               	xorlw	2
  5557  0681  1D03               	skipz
  5558  0682  0008               	return
  5559                           
  5560                           ;trans_ctrl.c: 1114: if ((timer_flags1.b7 == 1)) feeder2_pcnt = 0;
  5561  0683  1FFA               	btfss	_timer_flags1,7
  5562  0684  2E87               	goto	l821
  5563  0685  01C9               	clrf	_feeder2_pcnt
  5564  0686  0008               	return
  5565  0687                     l821:	
  5566                           
  5567                           ;trans_ctrl.c: 1115: else if ((input_16_23.b0 == 0) && !(input_16_23.b1 == 0) && (timer_
      +                          flags1.b2 == 1)) {
  5568  0687  1C58               	btfss	_input_16_23,0
  5569  0688  1CD8               	btfss	_input_16_23,1
  5570  0689  2E92               	goto	l4786
  5571  068A  1D7A               	btfss	_timer_flags1,2
  5572  068B  2E92               	goto	l4786
  5573                           
  5574                           ;trans_ctrl.c: 1116: feeder2_state = FEEDER2_CHARGING;
  5575  068C  3002               	movlw	2
  5576  068D  00F6               	movwf	??_ProcessFeeder2
  5577  068E  0876               	movf	??_ProcessFeeder2,w
  5578  068F  00CA               	movwf	_feeder2_state
  5579                           
  5580                           ;trans_ctrl.c: 1117: feeder2_pcnt = 0;
  5581  0690  01C9               	clrf	_feeder2_pcnt
  5582                           
  5583                           ;trans_ctrl.c: 1118: } else if (activ_unit == FEEDER2) activ_unit = FEEDER3;
  5584  0691  0008               	return
  5585  0692                     l4786:	
  5586  0692  0838               	movf	_activ_unit,w
  5587  0693  3A01               	xorlw	1
  5588  0694  1D03               	skipz
  5589  0695  0008               	return
  5590  0696  3002               	movlw	2
  5591  0697  00F6               	movwf	??_ProcessFeeder2
  5592  0698  0876               	movf	??_ProcessFeeder2,w
  5593  0699  00B8               	movwf	_activ_unit
  5594                           
  5595                           ;trans_ctrl.c: 1119: }
  5596                           ;trans_ctrl.c: 1120: break;
  5597  069A  0008               	return
  5598  069B                     l826:	
  5599                           ;trans_ctrl.c: 1122: case FEEDER2_CHARGING:
  5600                           
  5601                           
  5602                           ;trans_ctrl.c: 1123: if ((taster_flags1.b3 == 1) && (timer_flags2.b7 == 1)) {
  5603  069B  19E3               	btfsc	_taster_flags1,3
  5604  069C  1FE8               	btfss	_timer_flags2,7
  5605  069D  2EAB               	goto	l4796
  5606                           
  5607                           ;trans_ctrl.c: 1124: SetTimer(FEEDER2_CONTROL_DELAY_TMR, 100);
  5608  069E  300A               	movlw	10
  5609  069F  00F2               	movwf	SetTimer@timer_for_setup
  5610  06A0  3000               	movlw	0
  5611  06A1  00F3               	movwf	SetTimer@timer_for_setup+1
  5612  06A2  3064               	movlw	100
  5613  06A3  00F4               	movwf	SetTimer@period
  5614  06A4  3000               	movlw	0
  5615  06A5  00F5               	movwf	SetTimer@period+1
  5616  06A6  3187  2744  3186   	fcall	_SetTimer
  5617                           
  5618                           ;trans_ctrl.c: 1125: feeder2_state = FEEDER2_OFF;
  5619  06A9  0020               	movlb	0	; select bank0
  5620  06AA  01CA               	clrf	_feeder2_state
  5621  06AB                     l4796:	
  5622                           
  5623                           ;trans_ctrl.c: 1126: }
  5624                           ;trans_ctrl.c: 1127: if (activ_unit != FEEDER2) {
  5625  06AB  0838               	movf	_activ_unit,w
  5626  06AC  3A01               	xorlw	1
  5627  06AD  1D03               	btfss	3,2
  5628  06AE  0008               	return
  5629                           
  5630                           ;trans_ctrl.c: 1129: } else if (feeder2_pcnt == 0) {
  5631                           
  5632                           ;trans_ctrl.c: 1128: break;
  5633  06AF  08C9               	movf	_feeder2_pcnt,f
  5634  06B0  1D03               	skipz
  5635  06B1  2EB8               	goto	l4808
  5636                           
  5637                           ;trans_ctrl.c: 1130: (vacum_pump1_flags1.b4 = 1);
  5638  06B2  167B               	bsf	_vacum_pump1_flags1,4
  5639                           
  5640                           ;trans_ctrl.c: 1131: ++feeder2_pcnt;
  5641  06B3  3001               	movlw	1
  5642  06B4  00F6               	movwf	??_ProcessFeeder2
  5643  06B5  0876               	movf	??_ProcessFeeder2,w
  5644  06B6  07C9               	addwf	_feeder2_pcnt,f
  5645                           
  5646                           ;trans_ctrl.c: 1132: } else if ((feeder2_pcnt == 1) && (vacum_pump1_flags1.b3 == 1)) {
  5647  06B7  0008               	return
  5648  06B8                     l4808:	
  5649  06B8  0849               	movf	_feeder2_pcnt,w
  5650  06B9  3A01               	xorlw	1
  5651  06BA  1903               	btfsc	3,2
  5652  06BB  1DFB               	btfss	_vacum_pump1_flags1,3
  5653  06BC  2ECE               	goto	l4818
  5654                           
  5655                           ;trans_ctrl.c: 1133: (output_0_7.b2 = 1);
  5656  06BD  155B               	bsf	_output_0_7,2
  5657                           
  5658                           ;trans_ctrl.c: 1134: SetTimer(PISTON_TMR, 100);
  5659  06BE  3002               	movlw	2
  5660  06BF  00F2               	movwf	SetTimer@timer_for_setup
  5661  06C0  3000               	movlw	0
  5662  06C1  00F3               	movwf	SetTimer@timer_for_setup+1
  5663  06C2  3064               	movlw	100
  5664  06C3  00F4               	movwf	SetTimer@period
  5665  06C4  3000               	movlw	0
  5666  06C5  00F5               	movwf	SetTimer@period+1
  5667  06C6  3187  2744         	fcall	_SetTimer
  5668                           
  5669                           ;trans_ctrl.c: 1135: ++feeder2_pcnt;
  5670  06C8  3001               	movlw	1
  5671  06C9  00F6               	movwf	??_ProcessFeeder2
  5672  06CA  0876               	movf	??_ProcessFeeder2,w
  5673  06CB  0020               	movlb	0	; select bank0
  5674  06CC  07C9               	addwf	_feeder2_pcnt,f
  5675                           
  5676                           ;trans_ctrl.c: 1136: } else if ((feeder2_pcnt == 2) && (timer_flags1.b3 == 1)) {
  5677  06CD  0008               	return
  5678  06CE                     l4818:	
  5679  06CE  0849               	movf	_feeder2_pcnt,w
  5680  06CF  3A02               	xorlw	2
  5681  06D0  1903               	btfsc	3,2
  5682  06D1  1DFA               	btfss	_timer_flags1,3
  5683  06D2  2EE5               	goto	l4826
  5684                           
  5685                           ;trans_ctrl.c: 1137: SetTimer(MAX_CHARGING_TMR, max_charging_time);
  5686  06D3  3003               	movlw	3
  5687  06D4  00F2               	movwf	SetTimer@timer_for_setup
  5688  06D5  3000               	movlw	0
  5689  06D6  00F3               	movwf	SetTimer@timer_for_setup+1
  5690  06D7  0827               	movf	_max_charging_time+1,w
  5691  06D8  01F5               	clrf	SetTimer@period+1
  5692  06D9  07F5               	addwf	SetTimer@period+1,f
  5693  06DA  0826               	movf	_max_charging_time,w
  5694  06DB  01F4               	clrf	SetTimer@period
  5695  06DC  07F4               	addwf	SetTimer@period,f
  5696  06DD  3187  2744         	fcall	_SetTimer
  5697                           
  5698                           ;trans_ctrl.c: 1138: ++feeder2_pcnt;
  5699  06DF  3001               	movlw	1
  5700  06E0  00F6               	movwf	??_ProcessFeeder2
  5701  06E1  0876               	movf	??_ProcessFeeder2,w
  5702  06E2  0020               	movlb	0	; select bank0
  5703  06E3  07C9               	addwf	_feeder2_pcnt,f
  5704                           
  5705                           ;trans_ctrl.c: 1139: } else if (feeder2_pcnt == 3) {
  5706  06E4  0008               	return
  5707  06E5                     l4826:	
  5708  06E5  0849               	movf	_feeder2_pcnt,w
  5709  06E6  3A03               	xorlw	3
  5710  06E7  1D03               	skipz
  5711  06E8  0008               	return
  5712                           
  5713                           ;trans_ctrl.c: 1140: if ((input_16_23.b1 == 0) || !(vacum_pump1_flags1.b3 == 1)) {
  5714  06E9  1CD8               	btfss	_input_16_23,1
  5715  06EA  2EED               	goto	l839
  5716  06EB  19FB               	btfsc	_vacum_pump1_flags1,3
  5717  06EC  2EFE               	goto	l837
  5718  06ED                     l839:	
  5719                           
  5720                           ;trans_ctrl.c: 1141: (output_0_7.b2 = 0);
  5721  06ED  115B               	bcf	_output_0_7,2
  5722                           
  5723                           ;trans_ctrl.c: 1142: (feeder2_flags1.b0 = 0);
  5724  06EE  1048               	bcf	_feeder2_flags1,0
  5725                           
  5726                           ;trans_ctrl.c: 1143: SetTimer(FEEDER_STATE_CHANGE_TMR, 500);
  5727  06EF  3007               	movlw	7
  5728  06F0  00F2               	movwf	SetTimer@timer_for_setup
  5729  06F1  3000               	movlw	0
  5730  06F2  00F3               	movwf	SetTimer@timer_for_setup+1
  5731  06F3  30F4               	movlw	244
  5732  06F4  00F4               	movwf	SetTimer@period
  5733  06F5  3001               	movlw	1
  5734  06F6  00F5               	movwf	SetTimer@period+1
  5735  06F7  3187  2744         	fcall	_SetTimer
  5736                           
  5737                           ;trans_ctrl.c: 1144: feeder2_state = FEEDER2_DISCHARGING;
  5738  06F9  0020               	movlb	0	; select bank0
  5739  06FA  01CA               	clrf	_feeder2_state
  5740  06FB  0ACA               	incf	_feeder2_state,f
  5741                           
  5742                           ;trans_ctrl.c: 1145: feeder2_pcnt = 0;
  5743  06FC  01C9               	clrf	_feeder2_pcnt
  5744                           
  5745                           ;trans_ctrl.c: 1146: } else if (!(input_16_23.b0 == 0)) {
  5746  06FD  0008               	return
  5747  06FE                     l837:	
  5748  06FE  1C58               	btfss	_input_16_23,0
  5749  06FF  2F07               	goto	l841
  5750                           
  5751                           ;trans_ctrl.c: 1147: (output_0_7.b2 = 0);
  5752  0700  115B               	bcf	_output_0_7,2
  5753                           
  5754                           ;trans_ctrl.c: 1148: feeder2_state = FEEDER2_ERROR;
  5755  0701  3003               	movlw	3
  5756  0702  00F6               	movwf	??_ProcessFeeder2
  5757  0703  0876               	movf	??_ProcessFeeder2,w
  5758  0704  00CA               	movwf	_feeder2_state
  5759                           
  5760                           ;trans_ctrl.c: 1149: (feeder2_flags1.b1 = 1);
  5761  0705  14C8               	bsf	_feeder2_flags1,1
  5762                           
  5763                           ;trans_ctrl.c: 1150: } else if ((timer_flags1.b4 == 1)) {
  5764  0706  0008               	return
  5765  0707                     l841:	
  5766  0707  1E7A               	btfss	_timer_flags1,4
  5767  0708  0008               	return
  5768                           
  5769                           ;trans_ctrl.c: 1151: (output_0_7.b2 = 0);
  5770  0709  115B               	bcf	_output_0_7,2
  5771                           
  5772                           ;trans_ctrl.c: 1152: SetTimer(FEEDER_STATE_CHANGE_TMR, 500);
  5773  070A  3007               	movlw	7
  5774  070B  00F2               	movwf	SetTimer@timer_for_setup
  5775  070C  3000               	movlw	0
  5776  070D  00F3               	movwf	SetTimer@timer_for_setup+1
  5777  070E  30F4               	movlw	244
  5778  070F  00F4               	movwf	SetTimer@period
  5779  0710  3001               	movlw	1
  5780  0711  00F5               	movwf	SetTimer@period+1
  5781  0712  3187  2744         	fcall	_SetTimer
  5782                           
  5783                           ;trans_ctrl.c: 1153: feeder2_state = FEEDER2_DISCHARGING;
  5784  0714  0020               	movlb	0	; select bank0
  5785  0715  01CA               	clrf	_feeder2_state
  5786  0716  0ACA               	incf	_feeder2_state,f
  5787                           
  5788                           ;trans_ctrl.c: 1154: (feeder2_flags1.b0 = 1);
  5789  0717  1448               	bsf	_feeder2_flags1,0
  5790                           
  5791                           ;trans_ctrl.c: 1155: feeder2_pcnt = 0;
  5792  0718  01C9               	clrf	_feeder2_pcnt
  5793                           
  5794                           ;trans_ctrl.c: 1156: }
  5795                           ;trans_ctrl.c: 1157: }
  5796                           ;trans_ctrl.c: 1158: break;
  5797  0719  0008               	return
  5798  071A                     l4854:	
  5799                           ;trans_ctrl.c: 1160: case FEEDER2_ERROR:
  5800                           
  5801                           
  5802                           ;trans_ctrl.c: 1161: if (activ_unit == FEEDER2) activ_unit = FEEDER3;
  5803  071A  0838               	movf	_activ_unit,w
  5804  071B  3A01               	xorlw	1
  5805  071C  1D03               	skipz
  5806  071D  2F22               	goto	l4858
  5807  071E  3002               	movlw	2
  5808  071F  00F6               	movwf	??_ProcessFeeder2
  5809  0720  0876               	movf	??_ProcessFeeder2,w
  5810  0721  00B8               	movwf	_activ_unit
  5811  0722                     l4858:	
  5812                           
  5813                           ;trans_ctrl.c: 1162: if ((taster_flags1.b3 == 1) && (timer_flags2.b7 == 1)) {
  5814  0722  19E3               	btfsc	_taster_flags1,3
  5815  0723  1FE8               	btfss	_timer_flags2,7
  5816  0724  2F31               	goto	l4866
  5817                           
  5818                           ;trans_ctrl.c: 1163: SetTimer(FEEDER2_CONTROL_DELAY_TMR, 100);
  5819  0725  300A               	movlw	10
  5820  0726  00F2               	movwf	SetTimer@timer_for_setup
  5821  0727  3000               	movlw	0
  5822  0728  00F3               	movwf	SetTimer@timer_for_setup+1
  5823  0729  3064               	movlw	100
  5824  072A  00F4               	movwf	SetTimer@period
  5825  072B  3000               	movlw	0
  5826  072C  00F5               	movwf	SetTimer@period+1
  5827  072D  3187  2744         	fcall	_SetTimer
  5828                           
  5829                           ;trans_ctrl.c: 1164: feeder2_state = FEEDER2_OFF;
  5830  072F  0020               	movlb	0	; select bank0
  5831  0730  01CA               	clrf	_feeder2_state
  5832  0731                     l4866:	
  5833                           
  5834                           ;trans_ctrl.c: 1165: }
  5835                           ;trans_ctrl.c: 1166: (output_8_15.b0 = 0);
  5836  0731  105C               	bcf	_output_8_15,0
  5837                           
  5838                           ;trans_ctrl.c: 1167: (output_0_7.b2 = 0);
  5839  0732  115B               	bcf	_output_0_7,2
  5840                           
  5841                           ;trans_ctrl.c: 1169: }
  5842                           
  5843                           ;trans_ctrl.c: 1168: break;
  5844  0733  0008               	return
  5845  0734                     l4872:	
  5846  0734  0020               	movlb	0	; select bank0
  5847  0735  084A               	movf	_feeder2_state,w
  5848                           
  5849                           ; Switch size 1, requested type "space"
  5850                           ; Number of cases is 4, Range of values is 0 to 3
  5851                           ; switch strategies available:
  5852                           ; Name         Instructions Cycles
  5853                           ; simple_byte           13     7 (average)
  5854                           ; direct_byte           14     6 (fixed)
  5855                           ; jumptable            260     6 (fixed)
  5856                           ;	Chosen strategy is simple_byte
  5857  0736  3A00               	xorlw	0	; case 0
  5858  0737  1903               	skipnz
  5859  0738  2E03               	goto	l4712
  5860  0739  3A01               	xorlw	1	; case 1
  5861  073A  1903               	skipnz
  5862  073B  2E21               	goto	l810
  5863  073C  3A03               	xorlw	3	; case 2
  5864  073D  1903               	skipnz
  5865  073E  2E9B               	goto	l826
  5866  073F  3A01               	xorlw	1	; case 3
  5867  0740  1903               	skipnz
  5868  0741  2F1A               	goto	l4854
  5869  0742  2F43               	goto	l847
  5870  0743                     l847:	
  5871  0743  0008               	return
  5872  0744                     __end_of_ProcessFeeder2:	
  5873                           
  5874                           	psect	text10
  5875  0833                     __ptext10:	
  5876 ;; *************** function _ProcessFeeder1 *****************
  5877 ;; Defined at:
  5878 ;;		line 1003 in file "trans_ctrl.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;		None
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;		None
  5883 ;; Return value:  Size  Location     Type
  5884 ;;		None               void
  5885 ;; Registers used:
  5886 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5892 ;;      Params:         0       0       0       0       0       0       0       0
  5893 ;;      Locals:         0       0       0       0       0       0       0       0
  5894 ;;      Temps:          1       0       0       0       0       0       0       0
  5895 ;;      Totals:         1       0       0       0       0       0       0       0
  5896 ;;Total ram usage:        1 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:    3
  5899 ;; This function calls:
  5900 ;;		_SetTimer
  5901 ;; This function is called by:
  5902 ;;		_main
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906                           
  5907                           ;psect for function _ProcessFeeder1
  5908  0833                     _ProcessFeeder1:	
  5909                           
  5910                           ;trans_ctrl.c: 1005: switch (feeder1_state) {
  5911                           
  5912                           ;incstack = 0
  5913                           ; Regs used in _ProcessFeeder1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5914  0833  2902               	goto	l4708
  5915  0834                     l4600:	
  5916                           ;trans_ctrl.c: 1007: case FEEDER1_OFF:
  5917                           
  5918                           
  5919                           ;trans_ctrl.c: 1008: if (activ_unit == FEEDER1) activ_unit = FEEDER2;
  5920  0834  0020               	movlb	0	; select bank0
  5921  0835  08B8               	movf	_activ_unit,f
  5922  0836  1D03               	skipz
  5923  0837  283A               	goto	l773
  5924  0838  01B8               	clrf	_activ_unit
  5925  0839  0AB8               	incf	_activ_unit,f
  5926  083A                     l773:	
  5927                           
  5928                           ;trans_ctrl.c: 1009: if ((taster_flags1.b2 == 1) && (timer_flags2.b6 == 1)) {
  5929  083A  1963               	btfsc	_taster_flags1,2
  5930  083B  1F68               	btfss	_timer_flags2,6
  5931  083C  284A               	goto	l4610
  5932                           
  5933                           ;trans_ctrl.c: 1010: SetTimer(FEEDER1_CONTROL_DELAY_TMR, 100);
  5934  083D  3009               	movlw	9
  5935  083E  00F2               	movwf	SetTimer@timer_for_setup
  5936  083F  3000               	movlw	0
  5937  0840  00F3               	movwf	SetTimer@timer_for_setup+1
  5938  0841  3064               	movlw	100
  5939  0842  00F4               	movwf	SetTimer@period
  5940  0843  3000               	movlw	0
  5941  0844  00F5               	movwf	SetTimer@period+1
  5942  0845  3187  2744         	fcall	_SetTimer
  5943                           
  5944                           ;trans_ctrl.c: 1011: feeder1_state = FEEDER1_DISCHARGING;
  5945  0847  0020               	movlb	0	; select bank0
  5946  0848  01C7               	clrf	_feeder1_state
  5947  0849  0AC7               	incf	_feeder1_state,f
  5948  084A                     l4610:	
  5949                           
  5950                           ;trans_ctrl.c: 1012: }
  5951                           ;trans_ctrl.c: 1013: (output_0_7.b1 = 0);
  5952  084A  10DB               	bcf	_output_0_7,1
  5953                           
  5954                           ;trans_ctrl.c: 1014: feeder1_flags1._byte = 0x00;
  5955  084B  01C5               	clrf	_feeder1_flags1
  5956                           
  5957                           ;trans_ctrl.c: 1015: break;
  5958  084C  0008               	return
  5959  084D                     l776:	
  5960                           ;trans_ctrl.c: 1017: case FEEDER1_DISCHARGING:
  5961                           
  5962                           
  5963                           ;trans_ctrl.c: 1018: if ((taster_flags1.b2 == 1) && (timer_flags2.b6 == 1)) {
  5964  084D  1963               	btfsc	_taster_flags1,2
  5965  084E  1F68               	btfss	_timer_flags2,6
  5966  084F  285D               	goto	l4620
  5967                           
  5968                           ;trans_ctrl.c: 1019: SetTimer(FEEDER1_CONTROL_DELAY_TMR, 100);
  5969  0850  3009               	movlw	9
  5970  0851  00F2               	movwf	SetTimer@timer_for_setup
  5971  0852  3000               	movlw	0
  5972  0853  00F3               	movwf	SetTimer@timer_for_setup+1
  5973  0854  3064               	movlw	100
  5974  0855  00F4               	movwf	SetTimer@period
  5975  0856  3000               	movlw	0
  5976  0857  00F5               	movwf	SetTimer@period+1
  5977  0858  3187  2744  3188   	fcall	_SetTimer
  5978                           
  5979                           ;trans_ctrl.c: 1020: feeder1_state = FEEDER1_OFF;
  5980  085B  0020               	movlb	0	; select bank0
  5981  085C  01C7               	clrf	_feeder1_state
  5982  085D                     l4620:	
  5983                           
  5984                           ;trans_ctrl.c: 1021: }
  5985                           ;trans_ctrl.c: 1022: if ((input_8_15.b6 == 0) && !(input_8_15.b7 == 0) && (timer_flags1.
      +                          b2 == 1)) {
  5986  085D  1F5A               	btfss	_input_8_15,6
  5987  085E  1FDA               	btfss	_input_8_15,7
  5988  085F  2867               	goto	l4628
  5989  0860  1D7A               	btfss	_timer_flags1,2
  5990  0861  2867               	goto	l4628
  5991                           
  5992                           ;trans_ctrl.c: 1023: feeder1_state = FEEDER1_CHARGING;
  5993  0862  3002               	movlw	2
  5994  0863  00F6               	movwf	??_ProcessFeeder1
  5995  0864  0876               	movf	??_ProcessFeeder1,w
  5996  0865  00C7               	movwf	_feeder1_state
  5997                           
  5998                           ;trans_ctrl.c: 1024: } else if (activ_unit == FEEDER1) activ_unit = FEEDER2;
  5999  0866  286C               	goto	l4632
  6000  0867                     l4628:	
  6001  0867  08B8               	movf	_activ_unit,f
  6002  0868  1D03               	skipz
  6003  0869  286C               	goto	l4632
  6004  086A  01B8               	clrf	_activ_unit
  6005  086B  0AB8               	incf	_activ_unit,f
  6006  086C                     l4632:	
  6007                           
  6008                           ;trans_ctrl.c: 1025: feeder1_pcnt = 0;
  6009  086C  01C6               	clrf	_feeder1_pcnt
  6010                           
  6011                           ;trans_ctrl.c: 1026: break;
  6012  086D  0008               	return
  6013  086E                     l781:	
  6014                           ;trans_ctrl.c: 1028: case FEEDER1_CHARGING:
  6015                           
  6016                           
  6017                           ;trans_ctrl.c: 1029: if ((taster_flags1.b2 == 1) && (timer_flags2.b6 == 1)) {
  6018  086E  1963               	btfsc	_taster_flags1,2
  6019  086F  1F68               	btfss	_timer_flags2,6
  6020  0870  287E               	goto	l4640
  6021                           
  6022                           ;trans_ctrl.c: 1030: SetTimer(FEEDER1_CONTROL_DELAY_TMR, 100);
  6023  0871  3009               	movlw	9
  6024  0872  00F2               	movwf	SetTimer@timer_for_setup
  6025  0873  3000               	movlw	0
  6026  0874  00F3               	movwf	SetTimer@timer_for_setup+1
  6027  0875  3064               	movlw	100
  6028  0876  00F4               	movwf	SetTimer@period
  6029  0877  3000               	movlw	0
  6030  0878  00F5               	movwf	SetTimer@period+1
  6031  0879  3187  2744  3188   	fcall	_SetTimer
  6032                           
  6033                           ;trans_ctrl.c: 1031: feeder1_state = FEEDER1_OFF;
  6034  087C  0020               	movlb	0	; select bank0
  6035  087D  01C7               	clrf	_feeder1_state
  6036  087E                     l4640:	
  6037                           
  6038                           ;trans_ctrl.c: 1032: }
  6039                           ;trans_ctrl.c: 1033: if (activ_unit != FEEDER1) {
  6040  087E  0838               	movf	_activ_unit,w
  6041  087F  1D03               	skipz
  6042                           
  6043                           ;trans_ctrl.c: 1035: } else if (feeder1_pcnt == 0) {
  6044                           
  6045                           ;trans_ctrl.c: 1034: break;
  6046  0880  0008               	return
  6047  0881  08C6               	movf	_feeder1_pcnt,f
  6048  0882  1D03               	skipz
  6049  0883  288A               	goto	l4652
  6050                           
  6051                           ;trans_ctrl.c: 1036: (vacum_pump1_flags1.b4 = 1);
  6052  0884  167B               	bsf	_vacum_pump1_flags1,4
  6053                           
  6054                           ;trans_ctrl.c: 1037: ++feeder1_pcnt;
  6055  0885  3001               	movlw	1
  6056  0886  00F6               	movwf	??_ProcessFeeder1
  6057  0887  0876               	movf	??_ProcessFeeder1,w
  6058  0888  07C6               	addwf	_feeder1_pcnt,f
  6059                           
  6060                           ;trans_ctrl.c: 1038: } else if ((feeder1_pcnt == 1) && (vacum_pump1_flags1.b3 == 1)) {
  6061  0889  0008               	return
  6062  088A                     l4652:	
  6063  088A  0846               	movf	_feeder1_pcnt,w
  6064  088B  3A01               	xorlw	1
  6065  088C  1903               	btfsc	3,2
  6066  088D  1DFB               	btfss	_vacum_pump1_flags1,3
  6067  088E  28A0               	goto	l4662
  6068                           
  6069                           ;trans_ctrl.c: 1039: (output_0_7.b1 = 1);
  6070  088F  14DB               	bsf	_output_0_7,1
  6071                           
  6072                           ;trans_ctrl.c: 1040: SetTimer(PISTON_TMR, 100);
  6073  0890  3002               	movlw	2
  6074  0891  00F2               	movwf	SetTimer@timer_for_setup
  6075  0892  3000               	movlw	0
  6076  0893  00F3               	movwf	SetTimer@timer_for_setup+1
  6077  0894  3064               	movlw	100
  6078  0895  00F4               	movwf	SetTimer@period
  6079  0896  3000               	movlw	0
  6080  0897  00F5               	movwf	SetTimer@period+1
  6081  0898  3187  2744         	fcall	_SetTimer
  6082                           
  6083                           ;trans_ctrl.c: 1041: ++feeder1_pcnt;
  6084  089A  3001               	movlw	1
  6085  089B  00F6               	movwf	??_ProcessFeeder1
  6086  089C  0876               	movf	??_ProcessFeeder1,w
  6087  089D  0020               	movlb	0	; select bank0
  6088  089E  07C6               	addwf	_feeder1_pcnt,f
  6089                           
  6090                           ;trans_ctrl.c: 1042: } else if ((feeder1_pcnt == 2) && (timer_flags1.b3 == 1)) {
  6091  089F  0008               	return
  6092  08A0                     l4662:	
  6093  08A0  0846               	movf	_feeder1_pcnt,w
  6094  08A1  3A02               	xorlw	2
  6095  08A2  1903               	btfsc	3,2
  6096  08A3  1DFA               	btfss	_timer_flags1,3
  6097  08A4  28B7               	goto	l4670
  6098                           
  6099                           ;trans_ctrl.c: 1043: SetTimer(MAX_CHARGING_TMR, max_charging_time);
  6100  08A5  3003               	movlw	3
  6101  08A6  00F2               	movwf	SetTimer@timer_for_setup
  6102  08A7  3000               	movlw	0
  6103  08A8  00F3               	movwf	SetTimer@timer_for_setup+1
  6104  08A9  0827               	movf	_max_charging_time+1,w
  6105  08AA  01F5               	clrf	SetTimer@period+1
  6106  08AB  07F5               	addwf	SetTimer@period+1,f
  6107  08AC  0826               	movf	_max_charging_time,w
  6108  08AD  01F4               	clrf	SetTimer@period
  6109  08AE  07F4               	addwf	SetTimer@period,f
  6110  08AF  3187  2744         	fcall	_SetTimer
  6111                           
  6112                           ;trans_ctrl.c: 1044: ++feeder1_pcnt;
  6113  08B1  3001               	movlw	1
  6114  08B2  00F6               	movwf	??_ProcessFeeder1
  6115  08B3  0876               	movf	??_ProcessFeeder1,w
  6116  08B4  0020               	movlb	0	; select bank0
  6117  08B5  07C6               	addwf	_feeder1_pcnt,f
  6118                           
  6119                           ;trans_ctrl.c: 1045: } else if (feeder1_pcnt == 3) {
  6120  08B6  0008               	return
  6121  08B7                     l4670:	
  6122  08B7  0846               	movf	_feeder1_pcnt,w
  6123  08B8  3A03               	xorlw	3
  6124  08B9  1D03               	skipz
  6125  08BA  0008               	return
  6126                           
  6127                           ;trans_ctrl.c: 1046: if ((input_8_15.b7 == 0) || !(vacum_pump1_flags1.b3 == 1)) {
  6128  08BB  1FDA               	btfss	_input_8_15,7
  6129  08BC  28BF               	goto	l794
  6130  08BD  19FB               	btfsc	_vacum_pump1_flags1,3
  6131  08BE  28D0               	goto	l792
  6132  08BF                     l794:	
  6133                           
  6134                           ;trans_ctrl.c: 1047: (output_0_7.b1 = 0);
  6135  08BF  10DB               	bcf	_output_0_7,1
  6136                           
  6137                           ;trans_ctrl.c: 1048: (feeder1_flags1.b0 = 0);
  6138  08C0  1045               	bcf	_feeder1_flags1,0
  6139                           
  6140                           ;trans_ctrl.c: 1049: SetTimer(FEEDER_STATE_CHANGE_TMR, 500);
  6141  08C1  3007               	movlw	7
  6142  08C2  00F2               	movwf	SetTimer@timer_for_setup
  6143  08C3  3000               	movlw	0
  6144  08C4  00F3               	movwf	SetTimer@timer_for_setup+1
  6145  08C5  30F4               	movlw	244
  6146  08C6  00F4               	movwf	SetTimer@period
  6147  08C7  3001               	movlw	1
  6148  08C8  00F5               	movwf	SetTimer@period+1
  6149  08C9  3187  2744         	fcall	_SetTimer
  6150                           
  6151                           ;trans_ctrl.c: 1050: feeder1_state = FEEDER1_DISCHARGING;
  6152  08CB  0020               	movlb	0	; select bank0
  6153  08CC  01C7               	clrf	_feeder1_state
  6154  08CD  0AC7               	incf	_feeder1_state,f
  6155                           
  6156                           ;trans_ctrl.c: 1051: feeder1_pcnt = 0;
  6157  08CE  01C6               	clrf	_feeder1_pcnt
  6158                           
  6159                           ;trans_ctrl.c: 1052: } else if (!(input_8_15.b6 == 0)) {
  6160  08CF  0008               	return
  6161  08D0                     l792:	
  6162  08D0  1F5A               	btfss	_input_8_15,6
  6163  08D1  28D9               	goto	l796
  6164                           
  6165                           ;trans_ctrl.c: 1053: (output_0_7.b1 = 0);
  6166  08D2  10DB               	bcf	_output_0_7,1
  6167                           
  6168                           ;trans_ctrl.c: 1054: (feeder1_flags1.b1 = 1);
  6169  08D3  14C5               	bsf	_feeder1_flags1,1
  6170                           
  6171                           ;trans_ctrl.c: 1055: feeder1_state = FEEDER1_ERROR;
  6172  08D4  3003               	movlw	3
  6173  08D5  00F6               	movwf	??_ProcessFeeder1
  6174  08D6  0876               	movf	??_ProcessFeeder1,w
  6175  08D7  00C7               	movwf	_feeder1_state
  6176                           
  6177                           ;trans_ctrl.c: 1056: } else if ((timer_flags1.b4 == 1)) {
  6178  08D8  0008               	return
  6179  08D9                     l796:	
  6180  08D9  1E7A               	btfss	_timer_flags1,4
  6181  08DA  0008               	return
  6182                           
  6183                           ;trans_ctrl.c: 1057: (output_0_7.b1 = 0);
  6184  08DB  10DB               	bcf	_output_0_7,1
  6185                           
  6186                           ;trans_ctrl.c: 1058: (feeder1_flags1.b0 = 1);
  6187  08DC  1445               	bsf	_feeder1_flags1,0
  6188                           
  6189                           ;trans_ctrl.c: 1059: SetTimer(FEEDER_STATE_CHANGE_TMR, 500);
  6190  08DD  3007               	movlw	7
  6191  08DE  00F2               	movwf	SetTimer@timer_for_setup
  6192  08DF  3000               	movlw	0
  6193  08E0  00F3               	movwf	SetTimer@timer_for_setup+1
  6194  08E1  30F4               	movlw	244
  6195  08E2  00F4               	movwf	SetTimer@period
  6196  08E3  3001               	movlw	1
  6197  08E4  00F5               	movwf	SetTimer@period+1
  6198  08E5  3187  2744         	fcall	_SetTimer
  6199                           
  6200                           ;trans_ctrl.c: 1060: feeder1_state = FEEDER1_DISCHARGING;
  6201  08E7  0020               	movlb	0	; select bank0
  6202  08E8  01C7               	clrf	_feeder1_state
  6203  08E9  0AC7               	incf	_feeder1_state,f
  6204                           
  6205                           ;trans_ctrl.c: 1061: feeder1_pcnt = 0;
  6206  08EA  01C6               	clrf	_feeder1_pcnt
  6207                           
  6208                           ;trans_ctrl.c: 1062: }
  6209                           ;trans_ctrl.c: 1063: }
  6210                           ;trans_ctrl.c: 1064: break;
  6211  08EB  0008               	return
  6212  08EC                     l4694:	
  6213                           ;trans_ctrl.c: 1066: case FEEDER1_ERROR:
  6214                           
  6215                           
  6216                           ;trans_ctrl.c: 1067: if (activ_unit == FEEDER1) activ_unit = FEEDER2;
  6217  08EC  08B8               	movf	_activ_unit,f
  6218  08ED  1D03               	skipz
  6219  08EE  28F1               	goto	l800
  6220  08EF  01B8               	clrf	_activ_unit
  6221  08F0  0AB8               	incf	_activ_unit,f
  6222  08F1                     l800:	
  6223                           
  6224                           ;trans_ctrl.c: 1068: if ((taster_flags1.b2 == 1) && (timer_flags2.b6 == 1)) {
  6225  08F1  1963               	btfsc	_taster_flags1,2
  6226  08F2  1F68               	btfss	_timer_flags2,6
  6227  08F3  2900               	goto	l4704
  6228                           
  6229                           ;trans_ctrl.c: 1069: SetTimer(FEEDER1_CONTROL_DELAY_TMR, 100);
  6230  08F4  3009               	movlw	9
  6231  08F5  00F2               	movwf	SetTimer@timer_for_setup
  6232  08F6  3000               	movlw	0
  6233  08F7  00F3               	movwf	SetTimer@timer_for_setup+1
  6234  08F8  3064               	movlw	100
  6235  08F9  00F4               	movwf	SetTimer@period
  6236  08FA  3000               	movlw	0
  6237  08FB  00F5               	movwf	SetTimer@period+1
  6238  08FC  3187  2744         	fcall	_SetTimer
  6239                           
  6240                           ;trans_ctrl.c: 1070: feeder1_state = FEEDER1_OFF;
  6241  08FE  0020               	movlb	0	; select bank0
  6242  08FF  01C7               	clrf	_feeder1_state
  6243  0900                     l4704:	
  6244                           
  6245                           ;trans_ctrl.c: 1071: }
  6246                           ;trans_ctrl.c: 1072: (output_0_7.b1 = 0);
  6247  0900  10DB               	bcf	_output_0_7,1
  6248                           
  6249                           ;trans_ctrl.c: 1074: }
  6250                           
  6251                           ;trans_ctrl.c: 1073: break;
  6252  0901  0008               	return
  6253  0902                     l4708:	
  6254  0902  0020               	movlb	0	; select bank0
  6255  0903  0847               	movf	_feeder1_state,w
  6256                           
  6257                           ; Switch size 1, requested type "space"
  6258                           ; Number of cases is 4, Range of values is 0 to 3
  6259                           ; switch strategies available:
  6260                           ; Name         Instructions Cycles
  6261                           ; simple_byte           13     7 (average)
  6262                           ; direct_byte           14     6 (fixed)
  6263                           ; jumptable            260     6 (fixed)
  6264                           ;	Chosen strategy is simple_byte
  6265  0904  3A00               	xorlw	0	; case 0
  6266  0905  1903               	skipnz
  6267  0906  2834               	goto	l4600
  6268  0907  3A01               	xorlw	1	; case 1
  6269  0908  1903               	skipnz
  6270  0909  284D               	goto	l776
  6271  090A  3A03               	xorlw	3	; case 2
  6272  090B  1903               	skipnz
  6273  090C  286E               	goto	l781
  6274  090D  3A01               	xorlw	1	; case 3
  6275  090E  1903               	skipnz
  6276  090F  28EC               	goto	l4694
  6277  0910  2911               	goto	l802
  6278  0911                     l802:	
  6279  0911  0008               	return
  6280  0912                     __end_of_ProcessFeeder1:	
  6281                           
  6282                           	psect	text11
  6283  080B                     __ptext11:	
  6284 ;; *************** function _ProcessCyclon1 *****************
  6285 ;; Defined at:
  6286 ;;		line 1475 in file "trans_ctrl.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;		None
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;		None
  6291 ;; Return value:  Size  Location     Type
  6292 ;;		None               void
  6293 ;; Registers used:
  6294 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6300 ;;      Params:         0       0       0       0       0       0       0       0
  6301 ;;      Locals:         0       0       0       0       0       0       0       0
  6302 ;;      Temps:          1       0       0       0       0       0       0       0
  6303 ;;      Totals:         1       0       0       0       0       0       0       0
  6304 ;;Total ram usage:        1 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:    3
  6307 ;; This function calls:
  6308 ;;		_SetTimer
  6309 ;; This function is called by:
  6310 ;;		_main
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           
  6315                           ;psect for function _ProcessCyclon1
  6316  080B                     _ProcessCyclon1:	
  6317                           
  6318                           ;trans_ctrl.c: 1476: if (cyc1_pcnt == 0) {
  6319                           
  6320                           ;incstack = 0
  6321                           ; Regs used in _ProcessCyclon1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6322  080B  0020               	movlb	0	; select bank0
  6323  080C  08C0               	movf	_cyc1_pcnt,f
  6324  080D  1D03               	skipz
  6325  080E  2826               	goto	l5350
  6326                           
  6327                           ;trans_ctrl.c: 1477: if ((input_0_7.b5 == 0)) {
  6328  080F  1AD7               	btfsc	_input_0_7,5
  6329  0810  2824               	goto	l988
  6330                           
  6331                           ;trans_ctrl.c: 1478: SetTimer(MILL_SHUTDOWN_DELAY_TMR, mill_shutdown_delay);
  6332  0811  3001               	movlw	1
  6333  0812  00F2               	movwf	SetTimer@timer_for_setup
  6334  0813  3000               	movlw	0
  6335  0814  00F3               	movwf	SetTimer@timer_for_setup+1
  6336  0815  0829               	movf	_mill_shutdown_delay+1,w
  6337  0816  01F5               	clrf	SetTimer@period+1
  6338  0817  07F5               	addwf	SetTimer@period+1,f
  6339  0818  0828               	movf	_mill_shutdown_delay,w
  6340  0819  01F4               	clrf	SetTimer@period
  6341  081A  07F4               	addwf	SetTimer@period,f
  6342  081B  3187  2744         	fcall	_SetTimer
  6343                           
  6344                           ;trans_ctrl.c: 1479: (cyclon_flags1.b0 = 1);
  6345  081D  0020               	movlb	0	; select bank0
  6346  081E  1441               	bsf	_cyclon_flags1,0
  6347                           
  6348                           ;trans_ctrl.c: 1480: ++cyc1_pcnt;
  6349  081F  3001               	movlw	1
  6350  0820  00F6               	movwf	??_ProcessCyclon1
  6351  0821  0876               	movf	??_ProcessCyclon1,w
  6352  0822  07C0               	addwf	_cyc1_pcnt,f
  6353                           
  6354                           ;trans_ctrl.c: 1481: } else (output_8_15.b5 = 1);
  6355  0823  0008               	return
  6356  0824                     l988:	
  6357  0824  16DC               	bsf	_output_8_15,5
  6358                           
  6359                           ;trans_ctrl.c: 1482: } else if (cyc1_pcnt == 1) {
  6360  0825  0008               	return
  6361  0826                     l5350:	
  6362  0826  0840               	movf	_cyc1_pcnt,w
  6363  0827  3A01               	xorlw	1
  6364  0828  1D03               	skipz
  6365  0829  0008               	return
  6366                           
  6367                           ;trans_ctrl.c: 1483: if (!(input_0_7.b5 == 0)) {
  6368  082A  1ED7               	btfss	_input_0_7,5
  6369  082B  282F               	goto	l992
  6370                           
  6371                           ;trans_ctrl.c: 1484: (cyclon_flags1.b0 = 0);
  6372  082C  1041               	bcf	_cyclon_flags1,0
  6373                           
  6374                           ;trans_ctrl.c: 1485: cyc1_pcnt = 0;
  6375  082D  01C0               	clrf	_cyc1_pcnt
  6376                           
  6377                           ;trans_ctrl.c: 1486: } else if (timer_flags1.b1) (output_8_15.b5 = 0);
  6378  082E  0008               	return
  6379  082F                     l992:	
  6380  082F  1CFA               	btfss	_timer_flags1,1
  6381  0830  0008               	return
  6382  0831  12DC               	bcf	_output_8_15,5
  6383  0832  0008               	return
  6384  0833                     __end_of_ProcessCyclon1:	
  6385                           
  6386                           	psect	text12
  6387  0744                     __ptext12:	
  6388 ;; *************** function _SetTimer *****************
  6389 ;; Defined at:
  6390 ;;		line 847 in file "trans_ctrl.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;  timer_for_se    2    2[COMMON] int 
  6393 ;;  period          2    4[COMMON] unsigned int 
  6394 ;; Auto vars:     Size  Location     Type
  6395 ;;		None
  6396 ;; Return value:  Size  Location     Type
  6397 ;;		None               void
  6398 ;; Registers used:
  6399 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6400 ;; Tracked objects:
  6401 ;;		On entry : 0/0
  6402 ;;		On exit  : 0/0
  6403 ;;		Unchanged: 0/0
  6404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6405 ;;      Params:         4       0       0       0       0       0       0       0
  6406 ;;      Locals:         0       0       0       0       0       0       0       0
  6407 ;;      Temps:          0       0       0       0       0       0       0       0
  6408 ;;      Totals:         4       0       0       0       0       0       0       0
  6409 ;;Total ram usage:        4 bytes
  6410 ;; Hardware stack levels used:    1
  6411 ;; Hardware stack levels required when called:    2
  6412 ;; This function calls:
  6413 ;;		Nothing
  6414 ;; This function is called by:
  6415 ;;		_SetSignalOutput
  6416 ;;		_ProcessFeeder1
  6417 ;;		_ProcessFeeder2
  6418 ;;		_ProcessFeeder3
  6419 ;;		_ProcessFeeder4
  6420 ;;		_ProcessFeeder5
  6421 ;;		_ProcessFeederCoex
  6422 ;;		_ProcessCyclon1
  6423 ;;		_ProcessVacumPump1
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           
  6428                           ;psect for function _SetTimer
  6429  0744                     _SetTimer:	
  6430                           
  6431                           ;trans_ctrl.c: 849: switch (timer_for_setup) {
  6432                           
  6433                           ;incstack = 0
  6434                           ; Regs used in _SetTimer: [wreg-fsr0h+status,2+status,0]
  6435  0744  2FD3               	goto	l4246
  6436  0745                     l4184:	
  6437                           ;trans_ctrl.c: 851: case VP1_TMR:
  6438                           
  6439                           
  6440                           ;trans_ctrl.c: 852: vp1_tmr = period;
  6441  0745  0875               	movf	SetTimer@period+1,w
  6442  0746  0020               	movlb	0	; select bank0
  6443  0747  01B7               	clrf	_vp1_tmr+1
  6444  0748  07B7               	addwf	_vp1_tmr+1,f
  6445  0749  0874               	movf	SetTimer@period,w
  6446  074A  01B6               	clrf	_vp1_tmr
  6447  074B  07B6               	addwf	_vp1_tmr,f
  6448                           
  6449                           ;trans_ctrl.c: 853: timer_flags1.b0 = 0;
  6450  074C  107A               	bcf	_timer_flags1,0
  6451                           
  6452                           ;trans_ctrl.c: 854: break;
  6453  074D  0008               	return
  6454  074E                     l4188:	
  6455                           ;trans_ctrl.c: 856: case PISTON_TMR:
  6456                           
  6457                           
  6458                           ;trans_ctrl.c: 857: piston_tmr = period;
  6459  074E  0875               	movf	SetTimer@period+1,w
  6460  074F  0020               	movlb	0	; select bank0
  6461  0750  01AD               	clrf	_piston_tmr+1
  6462  0751  07AD               	addwf	_piston_tmr+1,f
  6463  0752  0874               	movf	SetTimer@period,w
  6464  0753  01AC               	clrf	_piston_tmr
  6465  0754  07AC               	addwf	_piston_tmr,f
  6466                           
  6467                           ;trans_ctrl.c: 858: timer_flags1.b3 = 0;
  6468  0755  11FA               	bcf	_timer_flags1,3
  6469                           
  6470                           ;trans_ctrl.c: 859: break;
  6471  0756  0008               	return
  6472  0757                     l4192:	
  6473                           ;trans_ctrl.c: 861: case MAX_CHARGING_TMR:
  6474                           
  6475                           
  6476                           ;trans_ctrl.c: 862: max_charging_tmr = period;
  6477  0757  0875               	movf	SetTimer@period+1,w
  6478  0758  0021               	movlb	1	; select bank1
  6479  0759  01B5               	clrf	(_max_charging_tmr+1)^(0+128)
  6480  075A  07B5               	addwf	(_max_charging_tmr+1)^(0+128),f
  6481  075B  0874               	movf	SetTimer@period,w
  6482  075C  01B4               	clrf	_max_charging_tmr^(0+128)
  6483  075D  07B4               	addwf	_max_charging_tmr^(0+128),f
  6484                           
  6485                           ;trans_ctrl.c: 863: timer_flags1.b4 = 0;
  6486  075E  127A               	bcf	_timer_flags1,4
  6487                           
  6488                           ;trans_ctrl.c: 864: break;
  6489  075F  0008               	return
  6490  0760                     l4196:	
  6491                           ;trans_ctrl.c: 866: case ERROR_DISPLAY_TMR:
  6492                           
  6493                           
  6494                           ;trans_ctrl.c: 867: error_display_tmr = period;
  6495  0760  0875               	movf	SetTimer@period+1,w
  6496  0761  0021               	movlb	1	; select bank1
  6497  0762  01A1               	clrf	(_error_display_tmr+1)^(0+128)
  6498  0763  07A1               	addwf	(_error_display_tmr+1)^(0+128),f
  6499  0764  0874               	movf	SetTimer@period,w
  6500  0765  01A0               	clrf	_error_display_tmr^(0+128)
  6501  0766  07A0               	addwf	_error_display_tmr^(0+128),f
  6502                           
  6503                           ;trans_ctrl.c: 868: timer_flags1.b5 = 0;
  6504  0767  12FA               	bcf	_timer_flags1,5
  6505                           
  6506                           ;trans_ctrl.c: 869: break;
  6507  0768  0008               	return
  6508  0769                     l4200:	
  6509                           ;trans_ctrl.c: 871: case FEEDER4_CHARGING_TMR:
  6510                           
  6511                           
  6512                           ;trans_ctrl.c: 872: feeder4_charging_tmr = period;
  6513  0769  0875               	movf	SetTimer@period+1,w
  6514  076A  0021               	movlb	1	; select bank1
  6515  076B  01AB               	clrf	(_feeder4_charging_tmr+1)^(0+128)
  6516  076C  07AB               	addwf	(_feeder4_charging_tmr+1)^(0+128),f
  6517  076D  0874               	movf	SetTimer@period,w
  6518  076E  01AA               	clrf	_feeder4_charging_tmr^(0+128)
  6519  076F  07AA               	addwf	_feeder4_charging_tmr^(0+128),f
  6520                           
  6521                           ;trans_ctrl.c: 873: timer_flags1.b6 = 0;
  6522  0770  137A               	bcf	_timer_flags1,6
  6523                           
  6524                           ;trans_ctrl.c: 874: break;
  6525  0771  0008               	return
  6526  0772                     l4204:	
  6527                           ;trans_ctrl.c: 876: case MILL_SHUTDOWN_DELAY_TMR:
  6528                           
  6529                           
  6530                           ;trans_ctrl.c: 877: mill_shutdown_delay_tmr = period;
  6531  0772  0875               	movf	SetTimer@period+1,w
  6532  0773  0020               	movlb	0	; select bank0
  6533  0774  01AB               	clrf	_mill_shutdown_delay_tmr+1
  6534  0775  07AB               	addwf	_mill_shutdown_delay_tmr+1,f
  6535  0776  0874               	movf	SetTimer@period,w
  6536  0777  01AA               	clrf	_mill_shutdown_delay_tmr
  6537  0778  07AA               	addwf	_mill_shutdown_delay_tmr,f
  6538                           
  6539                           ;trans_ctrl.c: 878: timer_flags1.b1 = 0;
  6540  0779  10FA               	bcf	_timer_flags1,1
  6541                           
  6542                           ;trans_ctrl.c: 879: break;
  6543  077A  0008               	return
  6544  077B                     l4208:	
  6545                           ;trans_ctrl.c: 881: case FEEDER2_CLEANING_PISTON_TMR:
  6546                           
  6547                           
  6548                           ;trans_ctrl.c: 882: feeder2_cleaning_piston_tmr = period;
  6549  077B  0875               	movf	SetTimer@period+1,w
  6550  077C  0021               	movlb	1	; select bank1
  6551  077D  01A5               	clrf	(_feeder2_cleaning_piston_tmr+1)^(0+128)
  6552  077E  07A5               	addwf	(_feeder2_cleaning_piston_tmr+1)^(0+128),f
  6553  077F  0874               	movf	SetTimer@period,w
  6554  0780  01A4               	clrf	_feeder2_cleaning_piston_tmr^(0+128)
  6555  0781  07A4               	addwf	_feeder2_cleaning_piston_tmr^(0+128),f
  6556                           
  6557                           ;trans_ctrl.c: 883: timer_flags1.b7 = 0;
  6558  0782  13FA               	bcf	_timer_flags1,7
  6559                           
  6560                           ;trans_ctrl.c: 884: break;
  6561  0783  0008               	return
  6562  0784                     l4212:	
  6563                           ;trans_ctrl.c: 886: case FEEDER_STATE_CHANGE_TMR:
  6564                           
  6565                           
  6566                           ;trans_ctrl.c: 887: feeder_state_change_tmr = period;
  6567  0784  0875               	movf	SetTimer@period+1,w
  6568  0785  0021               	movlb	1	; select bank1
  6569  0786  01B3               	clrf	(_feeder_state_change_tmr+1)^(0+128)
  6570  0787  07B3               	addwf	(_feeder_state_change_tmr+1)^(0+128),f
  6571  0788  0874               	movf	SetTimer@period,w
  6572  0789  01B2               	clrf	_feeder_state_change_tmr^(0+128)
  6573  078A  07B2               	addwf	_feeder_state_change_tmr^(0+128),f
  6574                           
  6575                           ;trans_ctrl.c: 888: timer_flags1.b2 = 0;
  6576  078B  117A               	bcf	_timer_flags1,2
  6577                           
  6578                           ;trans_ctrl.c: 889: break;
  6579  078C  0008               	return
  6580  078D                     l4216:	
  6581                           ;trans_ctrl.c: 891: case VP1_CONTROL_DELAY_TMR:
  6582                           
  6583                           
  6584                           ;trans_ctrl.c: 892: vp1_control_delay_tmr = period;
  6585  078D  0875               	movf	SetTimer@period+1,w
  6586  078E  0021               	movlb	1	; select bank1
  6587  078F  01B9               	clrf	(_vp1_control_delay_tmr+1)^(0+128)
  6588  0790  07B9               	addwf	(_vp1_control_delay_tmr+1)^(0+128),f
  6589  0791  0874               	movf	SetTimer@period,w
  6590  0792  01B8               	clrf	_vp1_control_delay_tmr^(0+128)
  6591  0793  07B8               	addwf	_vp1_control_delay_tmr^(0+128),f
  6592                           
  6593                           ;trans_ctrl.c: 893: timer_flags2.b5 = 0;
  6594  0794  0020               	movlb	0	; select bank0
  6595  0795  12E8               	bcf	_timer_flags2,5
  6596                           
  6597                           ;trans_ctrl.c: 894: break;
  6598  0796  0008               	return
  6599  0797                     l4220:	
  6600                           ;trans_ctrl.c: 896: case FEEDER1_CONTROL_DELAY_TMR:
  6601                           
  6602                           
  6603                           ;trans_ctrl.c: 897: feeder1_control_delay_tmr = period;
  6604  0797  0875               	movf	SetTimer@period+1,w
  6605  0798  0021               	movlb	1	; select bank1
  6606  0799  01A3               	clrf	(_feeder1_control_delay_tmr+1)^(0+128)
  6607  079A  07A3               	addwf	(_feeder1_control_delay_tmr+1)^(0+128),f
  6608  079B  0874               	movf	SetTimer@period,w
  6609  079C  01A2               	clrf	_feeder1_control_delay_tmr^(0+128)
  6610  079D  07A2               	addwf	_feeder1_control_delay_tmr^(0+128),f
  6611                           
  6612                           ;trans_ctrl.c: 898: timer_flags2.b6 = 0;
  6613  079E  0020               	movlb	0	; select bank0
  6614  079F  1368               	bcf	_timer_flags2,6
  6615                           
  6616                           ;trans_ctrl.c: 899: break;
  6617  07A0  0008               	return
  6618  07A1                     l4224:	
  6619                           ;trans_ctrl.c: 901: case FEEDER2_CONTROL_DELAY_TMR:
  6620                           
  6621                           
  6622                           ;trans_ctrl.c: 902: feeder2_control_delay_tmr = period;
  6623  07A1  0875               	movf	SetTimer@period+1,w
  6624  07A2  0021               	movlb	1	; select bank1
  6625  07A3  01A7               	clrf	(_feeder2_control_delay_tmr+1)^(0+128)
  6626  07A4  07A7               	addwf	(_feeder2_control_delay_tmr+1)^(0+128),f
  6627  07A5  0874               	movf	SetTimer@period,w
  6628  07A6  01A6               	clrf	_feeder2_control_delay_tmr^(0+128)
  6629  07A7  07A6               	addwf	_feeder2_control_delay_tmr^(0+128),f
  6630                           
  6631                           ;trans_ctrl.c: 903: timer_flags2.b7 = 0;
  6632  07A8  0020               	movlb	0	; select bank0
  6633  07A9  13E8               	bcf	_timer_flags2,7
  6634                           
  6635                           ;trans_ctrl.c: 904: break;
  6636  07AA  0008               	return
  6637  07AB                     l4228:	
  6638                           ;trans_ctrl.c: 906: case FEEDER3_CONTROL_DELAY_TMR:
  6639                           
  6640                           
  6641                           ;trans_ctrl.c: 907: feeder3_control_delay_tmr = period;
  6642  07AB  0875               	movf	SetTimer@period+1,w
  6643  07AC  0021               	movlb	1	; select bank1
  6644  07AD  01A9               	clrf	(_feeder3_control_delay_tmr+1)^(0+128)
  6645  07AE  07A9               	addwf	(_feeder3_control_delay_tmr+1)^(0+128),f
  6646  07AF  0874               	movf	SetTimer@period,w
  6647  07B0  01A8               	clrf	_feeder3_control_delay_tmr^(0+128)
  6648  07B1  07A8               	addwf	_feeder3_control_delay_tmr^(0+128),f
  6649                           
  6650                           ;trans_ctrl.c: 908: timer_flags3.b0 = 0;
  6651  07B2  0020               	movlb	0	; select bank0
  6652  07B3  1069               	bcf	_timer_flags3,0
  6653                           
  6654                           ;trans_ctrl.c: 909: break;
  6655  07B4  0008               	return
  6656  07B5                     l4232:	
  6657                           ;trans_ctrl.c: 911: case FEEDER4_CONTROL_DELAY_TMR:
  6658                           
  6659                           
  6660                           ;trans_ctrl.c: 912: feeder4_control_delay_tmr = period;
  6661  07B5  0875               	movf	SetTimer@period+1,w
  6662  07B6  0021               	movlb	1	; select bank1
  6663  07B7  01AD               	clrf	(_feeder4_control_delay_tmr+1)^(0+128)
  6664  07B8  07AD               	addwf	(_feeder4_control_delay_tmr+1)^(0+128),f
  6665  07B9  0874               	movf	SetTimer@period,w
  6666  07BA  01AC               	clrf	_feeder4_control_delay_tmr^(0+128)
  6667  07BB  07AC               	addwf	_feeder4_control_delay_tmr^(0+128),f
  6668                           
  6669                           ;trans_ctrl.c: 913: timer_flags3.b1 = 0;
  6670  07BC  0020               	movlb	0	; select bank0
  6671  07BD  10E9               	bcf	_timer_flags3,1
  6672                           
  6673                           ;trans_ctrl.c: 914: break;
  6674  07BE  0008               	return
  6675  07BF                     l4236:	
  6676                           ;trans_ctrl.c: 916: case FEEDER5_CONTROL_DELAY_TMR:
  6677                           
  6678                           
  6679                           ;trans_ctrl.c: 917: feeder5_control_delay_tmr = period;
  6680  07BF  0875               	movf	SetTimer@period+1,w
  6681  07C0  0021               	movlb	1	; select bank1
  6682  07C1  01AF               	clrf	(_feeder5_control_delay_tmr+1)^(0+128)
  6683  07C2  07AF               	addwf	(_feeder5_control_delay_tmr+1)^(0+128),f
  6684  07C3  0874               	movf	SetTimer@period,w
  6685  07C4  01AE               	clrf	_feeder5_control_delay_tmr^(0+128)
  6686  07C5  07AE               	addwf	_feeder5_control_delay_tmr^(0+128),f
  6687                           
  6688                           ;trans_ctrl.c: 918: timer_flags3.b2 = 0;
  6689  07C6  0020               	movlb	0	; select bank0
  6690  07C7  1169               	bcf	_timer_flags3,2
  6691                           
  6692                           ;trans_ctrl.c: 919: break;
  6693  07C8  0008               	return
  6694  07C9                     l4240:	
  6695                           ;trans_ctrl.c: 921: case FEEDER_COEX_CONTROL_DELAY_TMR:
  6696                           
  6697                           
  6698                           ;trans_ctrl.c: 922: feeder_coex_control_delay_tmr = period;
  6699  07C9  0875               	movf	SetTimer@period+1,w
  6700  07CA  0021               	movlb	1	; select bank1
  6701  07CB  01B1               	clrf	(_feeder_coex_control_delay_tmr+1)^(0+128)
  6702  07CC  07B1               	addwf	(_feeder_coex_control_delay_tmr+1)^(0+128),f
  6703  07CD  0874               	movf	SetTimer@period,w
  6704  07CE  01B0               	clrf	_feeder_coex_control_delay_tmr^(0+128)
  6705  07CF  07B0               	addwf	_feeder_coex_control_delay_tmr^(0+128),f
  6706                           
  6707                           ;trans_ctrl.c: 923: timer_flags3.b3 = 0;
  6708  07D0  0020               	movlb	0	; select bank0
  6709  07D1  11E9               	bcf	_timer_flags3,3
  6710                           
  6711                           ;trans_ctrl.c: 925: }
  6712                           
  6713                           ;trans_ctrl.c: 924: break;
  6714  07D2  0008               	return
  6715  07D3                     l4246:	
  6716                           
  6717                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6718                           ; Switch size 1, requested type "space"
  6719                           ; Number of cases is 1, Range of values is 0 to 0
  6720                           ; switch strategies available:
  6721                           ; Name         Instructions Cycles
  6722                           ; simple_byte            4     3 (average)
  6723                           ; direct_byte            8     6 (fixed)
  6724                           ; jumptable            260     6 (fixed)
  6725                           ;	Chosen strategy is simple_byte
  6726  07D3  0873               	movf	SetTimer@timer_for_setup+1,w
  6727  07D4  3A00               	xorlw	0	; case 0
  6728  07D5  1903               	skipnz
  6729  07D6  2FD8               	goto	l6938
  6730  07D7  2FE2               	goto	l720
  6731  07D8                     l6938:	
  6732                           
  6733                           ; Switch size 1, requested type "space"
  6734                           ; Number of cases is 15, Range of values is 0 to 14
  6735                           ; switch strategies available:
  6736                           ; Name         Instructions Cycles
  6737                           ; direct_byte           36     6 (fixed)
  6738                           ; simple_byte           46    24 (average)
  6739                           ; jumptable            260     6 (fixed)
  6740                           ;	Chosen strategy is direct_byte
  6741  07D8  0872               	movf	SetTimer@timer_for_setup,w
  6742  07D9  0084               	movwf	4
  6743  07DA  300F               	movlw	15
  6744  07DB  0204               	subwf	4,w
  6745  07DC  1803               	skipnc
  6746  07DD  0008               	return
  6747  07DE  3190               	movlp	high S6940
  6748  07DF  3504               	lslf	4,w
  6749  07E0  3E00               	addlw	low S6940
  6750  07E1  0082               	movwf	2
  6751  07E2                     l720:	
  6752  07E2  0008               	return
  6753  07E3                     __end_of_SetTimer:	
  6754                           
  6755                           	psect	swtext3
  6756  1000                     __pswtext3:	
  6757  1000                     S6940:	
  6758  1000  3187  2F45         	ljmp	l4184
  6759  1002  3187  2F72         	ljmp	l4204
  6760  1004  3187  2F4E         	ljmp	l4188
  6761  1006  3187  2F57         	ljmp	l4192
  6762  1008  3187  2F60         	ljmp	l4196
  6763  100A  3187  2F69         	ljmp	l4200
  6764  100C  3187  2F7B         	ljmp	l4208
  6765  100E  3187  2F84         	ljmp	l4212
  6766  1010  3187  2F8D         	ljmp	l4216
  6767  1012  3187  2F97         	ljmp	l4220
  6768  1014  3187  2FA1         	ljmp	l4224
  6769  1016  3187  2FAB         	ljmp	l4228
  6770  1018  3187  2FB5         	ljmp	l4232
  6771  101A  3187  2FBF         	ljmp	l4236
  6772  101C  3187  2FC9         	ljmp	l4240
  6773                           
  6774                           	psect	text13
  6775  16CA                     __ptext13:	
  6776 ;; *************** function _InitSYS *****************
  6777 ;; Defined at:
  6778 ;;		line 135 in file "trans_ctrl.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;		None
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;		None
  6783 ;; Return value:  Size  Location     Type
  6784 ;;		None               void
  6785 ;; Registers used:
  6786 ;;		wreg, status,2, status,0, pclath, cstack
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6792 ;;      Params:         0       0       0       0       0       0       0       0
  6793 ;;      Locals:         0       0       0       0       0       0       0       0
  6794 ;;      Temps:          1       0       0       0       0       0       0       0
  6795 ;;      Totals:         1       0       0       0       0       0       0       0
  6796 ;;Total ram usage:        1 bytes
  6797 ;; Hardware stack levels used:    1
  6798 ;; Hardware stack levels required when called:    4
  6799 ;; This function calls:
  6800 ;;		_CheckAnalogInput
  6801 ;;		_DelayS
  6802 ;;		_HC595_Shift
  6803 ;; This function is called by:
  6804 ;;		_main
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           
  6809                           ;psect for function _InitSYS
  6810  16CA                     _InitSYS:	
  6811                           
  6812                           ;trans_ctrl.c: 136: (LATA = 0x00, TRISA = 0xff, ANSELA = 0xff);
  6813                           
  6814                           ;incstack = 0
  6815                           ; Regs used in _InitSYS: [wreg+status,2+status,0+pclath+cstack]
  6816  16CA  0022               	movlb	2	; select bank2
  6817  16CB  018C               	clrf	12	;volatile
  6818  16CC  30FF               	movlw	255
  6819  16CD  0021               	movlb	1	; select bank1
  6820  16CE  008C               	movwf	12	;volatile
  6821  16CF  30FF               	movlw	255
  6822  16D0  0023               	movlb	3	; select bank3
  6823  16D1  008C               	movwf	12	;volatile
  6824                           
  6825                           ;trans_ctrl.c: 137: (LATB = 0x00, TRISB = 0x00, ANSELB = 0x00);
  6826  16D2  0022               	movlb	2	; select bank2
  6827  16D3  018D               	clrf	13	;volatile
  6828  16D4  0021               	movlb	1	; select bank1
  6829  16D5  018D               	clrf	13	;volatile
  6830  16D6  0023               	movlb	3	; select bank3
  6831  16D7  018D               	clrf	13	;volatile
  6832                           
  6833                           ;trans_ctrl.c: 138: (LATC = 0x00, TRISC = 0x80, ANSELC = 0x00);
  6834  16D8  0022               	movlb	2	; select bank2
  6835  16D9  018E               	clrf	14	;volatile
  6836  16DA  3080               	movlw	128
  6837  16DB  0021               	movlb	1	; select bank1
  6838  16DC  008E               	movwf	14	;volatile
  6839  16DD  0023               	movlb	3	; select bank3
  6840  16DE  018E               	clrf	14	;volatile
  6841                           
  6842                           ;trans_ctrl.c: 139: (PORTD = 0x00, TRISD = 0xff, ANSELD = 0x00);
  6843  16DF  0020               	movlb	0	; select bank0
  6844  16E0  018F               	clrf	15	;volatile
  6845  16E1  30FF               	movlw	255
  6846  16E2  0021               	movlb	1	; select bank1
  6847  16E3  008F               	movwf	15	;volatile
  6848  16E4  0023               	movlb	3	; select bank3
  6849  16E5  018F               	clrf	15	;volatile
  6850                           
  6851                           ;trans_ctrl.c: 140: (LATE = 0x00, TRISE = 0xff, ANSELE = 0x03);
  6852  16E6  0022               	movlb	2	; select bank2
  6853  16E7  0190               	clrf	16	;volatile
  6854  16E8  30FF               	movlw	255
  6855  16E9  0021               	movlb	1	; select bank1
  6856  16EA  0090               	movwf	16	;volatile
  6857  16EB  3003               	movlw	3
  6858  16EC  0023               	movlb	3	; select bank3
  6859  16ED  0090               	movwf	16	;volatile
  6860                           
  6861                           ;trans_ctrl.c: 141: (hc595_shift.b0 = 1, HC595_Shift());
  6862  16EE  0020               	movlb	0	; select bank0
  6863  16EF  146E               	bsf	_hc595_shift,0
  6864  16F0  3195  25F5  3196   	fcall	_HC595_Shift
  6865                           
  6866                           ;trans_ctrl.c: 142: (hc595_shift.b1 = 1, HC595_Shift());
  6867  16F3  0020               	movlb	0	; select bank0
  6868  16F4  14EE               	bsf	_hc595_shift,1
  6869  16F5  3195  25F5  3196   	fcall	_HC595_Shift
  6870                           
  6871                           ;trans_ctrl.c: 143: (hc595_shift.b2 = 1, HC595_Shift());
  6872  16F8  0020               	movlb	0	; select bank0
  6873  16F9  156E               	bsf	_hc595_shift,2
  6874  16FA  3195  25F5  3196   	fcall	_HC595_Shift
  6875                           
  6876                           ;trans_ctrl.c: 144: (hc595_shift.b3 = 1, HC595_Shift());
  6877  16FD  0020               	movlb	0	; select bank0
  6878  16FE  15EE               	bsf	_hc595_shift,3
  6879  16FF  3195  25F5  3196   	fcall	_HC595_Shift
  6880                           
  6881                           ;trans_ctrl.c: 145: (PR2 = 0xff, CCPR1L = 0, CCPR2L = 0, CCP1CON = 0x0c, CCP2CON = 0x0c,
      +                           T2CON = 0x07);
  6882  1702  30FF               	movlw	255
  6883  1703  0020               	movlb	0	; select bank0
  6884  1704  009B               	movwf	27	;volatile
  6885  1705  0025               	movlb	5	; select bank5
  6886  1706  0191               	clrf	17	;volatile
  6887  1707  0198               	clrf	24	;volatile
  6888  1708  300C               	movlw	12
  6889  1709  0093               	movwf	19	;volatile
  6890  170A  300C               	movlw	12
  6891  170B  009A               	movwf	26	;volatile
  6892  170C  3007               	movlw	7
  6893  170D  0020               	movlb	0	; select bank0
  6894  170E  009C               	movwf	28	;volatile
  6895                           
  6896                           ;trans_ctrl.c: 146: (FVRCON = 0xb2);
  6897  170F  30B2               	movlw	178
  6898  1710  0022               	movlb	2	; select bank2
  6899  1711  0097               	movwf	23	;volatile
  6900                           
  6901                           ;trans_ctrl.c: 147: (T1CON = 0x11, TMR1IF = 1, TMR1IE = 1);
  6902  1712  3011               	movlw	17
  6903  1713  0020               	movlb	0	; select bank0
  6904  1714  0098               	movwf	24	;volatile
  6905  1715  1411               	bsf	17,0	;volatile
  6906  1716  0021               	movlb	1	; select bank1
  6907  1717  1411               	bsf	17,0	;volatile
  6908                           
  6909                           ;trans_ctrl.c: 148: (PEIE = 0);
  6910  1718  130B               	bcf	11,6	;volatile
  6911                           
  6912                           ;trans_ctrl.c: 151: (GIE = 1);
  6913  1719  178B               	bsf	11,7	;volatile
  6914                           
  6915                           ;trans_ctrl.c: 152: if (!RA4) (vacum_pump1_flags1.b5 = 0);
  6916  171A  0020               	movlb	0	; select bank0
  6917  171B  1A0C               	btfsc	12,4	;volatile
  6918  171C  2F1F               	goto	l373
  6919  171D  12FB               	bcf	_vacum_pump1_flags1,5
  6920  171E  2F20               	goto	l6804
  6921  171F                     l373:	
  6922                           
  6923                           ;trans_ctrl.c: 153: else (vacum_pump1_flags1.b5 = 1);
  6924  171F  16FB               	bsf	_vacum_pump1_flags1,5
  6925  1720                     l6804:	
  6926                           
  6927                           ;trans_ctrl.c: 154: an_in_pcnt = 0;
  6928  1720  01B9               	clrf	_an_in_pcnt
  6929                           
  6930                           ;trans_ctrl.c: 155: (timer_flags2.b4 = 1);
  6931  1721  1668               	bsf	_timer_flags2,4
  6932                           
  6933                           ;trans_ctrl.c: 156: for (temp = 0; temp != 7; temp++) {
  6934  1722  01E5               	clrf	_temp
  6935  1723  0865               	movf	_temp,w
  6936  1724  3A07               	xorlw	7
  6937  1725  1903               	btfsc	3,2
  6938  1726  2F33               	goto	l376
  6939  1727                     l6812:	
  6940                           
  6941                           ;trans_ctrl.c: 157: CheckAnalogInput();
  6942  1727  3183  237A  3196   	fcall	_CheckAnalogInput
  6943  172A  3001               	movlw	1
  6944  172B  00F8               	movwf	??_InitSYS
  6945  172C  0878               	movf	??_InitSYS,w
  6946  172D  0020               	movlb	0	; select bank0
  6947  172E  07E5               	addwf	_temp,f
  6948  172F  0865               	movf	_temp,w
  6949  1730  3A07               	xorlw	7
  6950  1731  1D03               	skipz
  6951  1732  2F27               	goto	l6812
  6952  1733                     l376:	
  6953                           
  6954                           ;trans_ctrl.c: 158: }
  6955                           ;trans_ctrl.c: 159: (PEIE = 1);
  6956  1733  170B               	bsf	11,6	;volatile
  6957                           
  6958                           ;trans_ctrl.c: 160: ((systeml_flags1._byte &= 0x0f),systeml_flags1.b4 = 1);
  6959  1734  300F               	movlw	15
  6960  1735  00F8               	movwf	??_InitSYS
  6961  1736  0878               	movf	??_InitSYS,w
  6962  1737  05F9               	andwf	_systeml_flags1,f
  6963  1738  1679               	bsf	_systeml_flags1,4
  6964                           
  6965                           ;trans_ctrl.c: 161: DelayS(5);
  6966  1739  3005               	movlw	5
  6967  173A  3195  2509         	fcall	_DelayS
  6968  173C  0008               	return
  6969  173D                     __end_of_InitSYS:	
  6970                           
  6971                           	psect	text14
  6972  1509                     __ptext14:	
  6973 ;; *************** function _DelayS *****************
  6974 ;; Defined at:
  6975 ;;		line 78 in file "delay.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;  cnt             1    wreg     unsigned char 
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;  cnt             1    6[COMMON] unsigned char 
  6980 ;;  i               1    7[COMMON] unsigned char 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;		None               void
  6983 ;; Registers used:
  6984 ;;		wreg, status,2, status,0, pclath, cstack
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/0
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6990 ;;      Params:         0       0       0       0       0       0       0       0
  6991 ;;      Locals:         2       0       0       0       0       0       0       0
  6992 ;;      Temps:          1       0       0       0       0       0       0       0
  6993 ;;      Totals:         3       0       0       0       0       0       0       0
  6994 ;;Total ram usage:        3 bytes
  6995 ;; Hardware stack levels used:    1
  6996 ;; Hardware stack levels required when called:    3
  6997 ;; This function calls:
  6998 ;;		_DelayMs
  6999 ;; This function is called by:
  7000 ;;		_InitSYS
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           
  7005                           ;psect for function _DelayS
  7006  1509                     _DelayS:	
  7007                           
  7008                           ;incstack = 0
  7009                           ; Regs used in _DelayS: [wreg+status,2+status,0+pclath+cstack]
  7010                           ;DelayS@cnt stored from wreg
  7011  1509  00F6               	movwf	DelayS@cnt
  7012  150A                     l326:	
  7013                           ;delay.c: 79: unsigned char i;
  7014                           ;delay.c: 80: do {
  7015                           
  7016                           
  7017                           ;delay.c: 81: i = 4;
  7018  150A  3004               	movlw	4
  7019  150B  00F5               	movwf	??_DelayS
  7020  150C  0875               	movf	??_DelayS,w
  7021  150D  00F7               	movwf	DelayS@i
  7022  150E                     l4052:	
  7023                           ;delay.c: 82: do {
  7024                           
  7025                           
  7026                           ;delay.c: 83: DelayMs(250);
  7027  150E  30FA               	movlw	250
  7028  150F  3195  2532  3195   	fcall	_DelayMs
  7029  1512  0064               	clrwdt	;# 
  7030                           
  7031                           ;delay.c: 85: } while (--i);
  7032  1513  3001               	movlw	1
  7033  1514  02F7               	subwf	DelayS@i,f
  7034  1515  1D03               	btfss	3,2
  7035  1516  2D0E               	goto	l4052
  7036                           
  7037                           ;delay.c: 86: } while (--cnt);
  7038  1517  3001               	movlw	1
  7039  1518  02F6               	subwf	DelayS@cnt,f
  7040  1519  1903               	btfsc	3,2
  7041  151A  0008               	return
  7042  151B  2D0A               	goto	l326
  7043  151C                     __end_of_DelayS:	
  7044                           
  7045                           	psect	text15
  7046  1532                     __ptext15:	
  7047 ;; *************** function _DelayMs *****************
  7048 ;; Defined at:
  7049 ;;		line 44 in file "delay.c"
  7050 ;; Parameters:    Size  Location     Type
  7051 ;;  cnt             1    wreg     unsigned char 
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;  cnt             1    3[COMMON] unsigned char 
  7054 ;;  i               1    4[COMMON] unsigned char 
  7055 ;; Return value:  Size  Location     Type
  7056 ;;		None               void
  7057 ;; Registers used:
  7058 ;;		wreg, status,2, status,0
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7064 ;;      Params:         0       0       0       0       0       0       0       0
  7065 ;;      Locals:         2       0       0       0       0       0       0       0
  7066 ;;      Temps:          1       0       0       0       0       0       0       0
  7067 ;;      Totals:         3       0       0       0       0       0       0       0
  7068 ;;Total ram usage:        3 bytes
  7069 ;; Hardware stack levels used:    1
  7070 ;; Hardware stack levels required when called:    2
  7071 ;; This function calls:
  7072 ;;		Nothing
  7073 ;; This function is called by:
  7074 ;;		_DelayS
  7075 ;; This function uses a non-reentrant model
  7076 ;;
  7077                           
  7078                           
  7079                           ;psect for function _DelayMs
  7080  1532                     _DelayMs:	
  7081                           
  7082                           ;incstack = 0
  7083                           ; Regs used in _DelayMs: [wreg+status,2+status,0]
  7084                           ;DelayMs@cnt stored from wreg
  7085  1532  00F3               	movwf	DelayMs@cnt
  7086  1533                     l305:	
  7087                           ;delay.c: 45: unsigned char i;
  7088                           ;delay.c: 46: do {
  7089                           
  7090                           
  7091                           ;delay.c: 47: i = 4;
  7092  1533  3004               	movlw	4
  7093  1534  00F2               	movwf	??_DelayMs
  7094  1535  0872               	movf	??_DelayMs,w
  7095  1536  00F4               	movwf	DelayMs@i
  7096  1537                     l306:	
  7097                           ;delay.c: 48: do {
  7098                           
  7099                           
  7100                           ;delay.c: 49: { delayus_variable=(unsigned char)(250/2); asm("nop"); } asm("decfsz _dela
      +                          yus_variable,f"); asm("goto $ - 2");;
  7101  1537  307D               	movlw	125
  7102  1538  00F2               	movwf	??_DelayMs
  7103  1539  0872               	movf	??_DelayMs,w
  7104  153A  0020               	movlb	0	; select bank0
  7105  153B  00C2               	movwf	_delayus_variable
  7106  153C  0000               	nop	;# 
  7107  153D  0BC2               	decfsz	_delayus_variable,f	;# 
  7108  153E  2D30               	goto	($+-2)	;# 
  7109  153F  0064               	clrwdt	;# 
  7110                           
  7111                           ;delay.c: 51: } while (--i);
  7112  1540  3001               	movlw	1
  7113  1541  02F4               	subwf	DelayMs@i,f
  7114  1542  1D03               	btfss	3,2
  7115  1543  2D37               	goto	l306
  7116                           
  7117                           ;delay.c: 52: } while (--cnt);
  7118  1544  3001               	movlw	1
  7119  1545  02F3               	subwf	DelayMs@cnt,f
  7120  1546  1903               	btfsc	3,2
  7121  1547  0008               	return
  7122  1548  2D33               	goto	l305
  7123  1549                     __end_of_DelayMs:	
  7124                           
  7125                           	psect	text16
  7126  037A                     __ptext16:	
  7127 ;; *************** function _CheckAnalogInput *****************
  7128 ;; Defined at:
  7129 ;;		line 316 in file "trans_ctrl.c"
  7130 ;; Parameters:    Size  Location     Type
  7131 ;;		None
  7132 ;; Auto vars:     Size  Location     Type
  7133 ;;		None
  7134 ;; Return value:  Size  Location     Type
  7135 ;;		None               void
  7136 ;; Registers used:
  7137 ;;		wreg, status,2, status,0, pclath, cstack
  7138 ;; Tracked objects:
  7139 ;;		On entry : 0/0
  7140 ;;		On exit  : 0/0
  7141 ;;		Unchanged: 0/0
  7142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7143 ;;      Params:         0       0       0       0       0       0       0       0
  7144 ;;      Locals:         0       0       0       0       0       0       0       0
  7145 ;;      Temps:          0       0       2       0       0       0       0       0
  7146 ;;      Totals:         0       0       2       0       0       0       0       0
  7147 ;;Total ram usage:        2 bytes
  7148 ;; Hardware stack levels used:    1
  7149 ;; Hardware stack levels required when called:    3
  7150 ;; This function calls:
  7151 ;;		___wmul
  7152 ;; This function is called by:
  7153 ;;		_main
  7154 ;;		_InitSYS
  7155 ;; This function uses a non-reentrant model
  7156 ;;
  7157                           
  7158                           
  7159                           ;psect for function _CheckAnalogInput
  7160  037A                     _CheckAnalogInput:	
  7161                           
  7162                           ;trans_ctrl.c: 318: if (!(timer_flags2.b4 == 1)) return;
  7163                           
  7164                           ;incstack = 0
  7165                           ; Regs used in _CheckAnalogInput: [wreg+status,2+status,0+pclath+cstack]
  7166  037A  0020               	movlb	0	; select bank0
  7167  037B  1E68               	btfss	_timer_flags2,4
  7168  037C  0008               	return
  7169                           
  7170                           ;trans_ctrl.c: 320: (PEIE = 0);
  7171  037D  130B               	bcf	11,6	;volatile
  7172                           
  7173                           ;trans_ctrl.c: 321: if (an_in_pcnt == 0) {
  7174  037E  08B9               	movf	_an_in_pcnt,f
  7175  037F  1D03               	skipz
  7176  0380  2BE6               	goto	l6658
  7177                           
  7178                           ;trans_ctrl.c: 322: (ADCON0 = 0b00000001, ADCON1 = 0xe0);
  7179  0381  3001               	movlw	1
  7180  0382  0021               	movlb	1	; select bank1
  7181  0383  009D               	movwf	29	;volatile
  7182  0384  30E0               	movlw	224
  7183  0385  009E               	movwf	30	;volatile
  7184                           
  7185                           ;trans_ctrl.c: 323: { delayus_variable=(unsigned char)(4/2); asm("nop"); } asm("decfsz _
      +                          delayus_variable,f"); asm("goto $ - 2");;
  7186  0386  3002               	movlw	2
  7187  0387  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7188  0388  083A               	movf	??_CheckAnalogInput^(0+128),w
  7189  0389  0020               	movlb	0	; select bank0
  7190  038A  00C2               	movwf	_delayus_variable
  7191  038B  0000               	nop	;# 
  7192  038C  0BC2               	decfsz	_delayus_variable,f	;# 
  7193  038D  2B78               	goto	($+-2)	;# 
  7194                           
  7195                           ;trans_ctrl.c: 324: (GO_nDONE = 1);
  7196  038E  0021               	movlb	1	; select bank1
  7197  038F  149D               	bsf	29,1	;volatile
  7198  0390                     l453:	
  7199                           ;trans_ctrl.c: 325: while ((GO_nDONE == 1)) continue;
  7200                           
  7201  0390  189D               	btfsc	29,1	;volatile
  7202  0391  2B90               	goto	l453
  7203                           
  7204                           ;trans_ctrl.c: 326: vp1_delay_time = ADRESH;
  7205  0392  081C               	movf	28,w	;volatile
  7206  0393  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7207  0394  01BB               	clrf	(??_CheckAnalogInput^(0+128)+1)
  7208  0395  083A               	movf	??_CheckAnalogInput^(0+128),w
  7209  0396  0020               	movlb	0	; select bank0
  7210  0397  00B0               	movwf	_vp1_delay_time
  7211  0398  0021               	movlb	1	; select bank1
  7212  0399  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7213  039A  0020               	movlb	0	; select bank0
  7214  039B  00B1               	movwf	_vp1_delay_time+1
  7215                           
  7216                           ;trans_ctrl.c: 327: vp1_delay_time = vp1_delay_time << 8;
  7217  039C  0830               	movf	_vp1_delay_time,w
  7218  039D  0021               	movlb	1	; select bank1
  7219  039E  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7220  039F  01BA               	clrf	??_CheckAnalogInput^(0+128)
  7221  03A0  083A               	movf	??_CheckAnalogInput^(0+128),w
  7222  03A1  0020               	movlb	0	; select bank0
  7223  03A2  00B0               	movwf	_vp1_delay_time
  7224  03A3  0021               	movlb	1	; select bank1
  7225  03A4  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7226  03A5  0020               	movlb	0	; select bank0
  7227  03A6  00B1               	movwf	_vp1_delay_time+1
  7228                           
  7229                           ;trans_ctrl.c: 328: vp1_delay_time += ADRESL;
  7230  03A7  0021               	movlb	1	; select bank1
  7231  03A8  081B               	movf	27,w	;volatile
  7232  03A9  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7233  03AA  01BB               	clrf	(??_CheckAnalogInput^(0+128)+1)
  7234  03AB  083A               	movf	??_CheckAnalogInput^(0+128),w
  7235  03AC  0020               	movlb	0	; select bank0
  7236  03AD  07B0               	addwf	_vp1_delay_time,f
  7237  03AE  0021               	movlb	1	; select bank1
  7238  03AF  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7239  03B0  0020               	movlb	0	; select bank0
  7240  03B1  3DB1               	addwfc	_vp1_delay_time+1,f
  7241                           
  7242                           ;trans_ctrl.c: 329: vp1_delay_time = (1023 - vp1_delay_time);
  7243  03B2  0930               	comf	_vp1_delay_time,w
  7244  03B3  0021               	movlb	1	; select bank1
  7245  03B4  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7246  03B5  0020               	movlb	0	; select bank0
  7247  03B6  0931               	comf	_vp1_delay_time+1,w
  7248  03B7  0021               	movlb	1	; select bank1
  7249  03B8  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7250  03B9  0ABA               	incf	??_CheckAnalogInput^(0+128),f
  7251  03BA  1903               	skipnz
  7252  03BB  0ABB               	incf	(??_CheckAnalogInput^(0+128)+1),f
  7253  03BC  083A               	movf	??_CheckAnalogInput^(0+128),w
  7254  03BD  3EFF               	addlw	255
  7255  03BE  0020               	movlb	0	; select bank0
  7256  03BF  00B0               	movwf	_vp1_delay_time
  7257  03C0  3003               	movlw	3
  7258  03C1  0021               	movlb	1	; select bank1
  7259  03C2  3D3B               	addwfc	(??_CheckAnalogInput+1)^(0+128),w
  7260  03C3  0020               	movlb	0	; select bank0
  7261  03C4  00B1               	movwf	_vp1_delay_time+1
  7262                           
  7263                           ;trans_ctrl.c: 330: if ((vacum_pump1_flags1.b5 == 0)) vp1_delay_time = vp1_delay_time * 
      +                          6;
  7264  03C5  1AFB               	btfsc	_vacum_pump1_flags1,5
  7265  03C6  2BCF               	goto	l456
  7266  03C7  0831               	movf	_vp1_delay_time+1,w
  7267  03C8  01F3               	clrf	___wmul@multiplier+1
  7268  03C9  07F3               	addwf	___wmul@multiplier+1,f
  7269  03CA  0830               	movf	_vp1_delay_time,w
  7270  03CB  01F2               	clrf	___wmul@multiplier
  7271  03CC  07F2               	addwf	___wmul@multiplier,f
  7272  03CD  3006               	movlw	6
  7273  03CE  2BD8               	goto	L40
  7274  03CF                     l456:	
  7275                           
  7276                           ;trans_ctrl.c: 331: else if ((vacum_pump1_flags1.b5 == 1)) vp1_delay_time = vp1_delay_ti
      +                          me * 60;
  7277  03CF  1EFB               	btfss	_vacum_pump1_flags1,5
  7278  03D0  2D9F               	goto	l6724
  7279  03D1  0831               	movf	_vp1_delay_time+1,w
  7280  03D2  01F3               	clrf	___wmul@multiplier+1
  7281  03D3  07F3               	addwf	___wmul@multiplier+1,f
  7282  03D4  0830               	movf	_vp1_delay_time,w
  7283  03D5  01F2               	clrf	___wmul@multiplier
  7284  03D6  07F2               	addwf	___wmul@multiplier,f
  7285  03D7  303C               	movlw	60
  7286  03D8                     L40:	
  7287  03D8  00F4               	movwf	___wmul@multiplicand
  7288  03D9  3000               	movlw	0
  7289  03DA  00F5               	movwf	___wmul@multiplicand+1
  7290  03DB  3187  27E3  3183   	fcall	___wmul
  7291  03DE  0873               	movf	?___wmul+1,w
  7292  03DF  0020               	movlb	0	; select bank0
  7293  03E0  01B1               	clrf	_vp1_delay_time+1
  7294  03E1  07B1               	addwf	_vp1_delay_time+1,f
  7295  03E2  0872               	movf	?___wmul,w
  7296  03E3  01B0               	clrf	_vp1_delay_time
  7297  03E4  07B0               	addwf	_vp1_delay_time,f
  7298  03E5  2D9F               	goto	l6724
  7299  03E6                     l6658:	
  7300                           ;trans_ctrl.c: 333: } else if (an_in_pcnt == 1) {
  7301                           
  7302                           ;trans_ctrl.c: 332: ++an_in_pcnt;
  7303                           
  7304  03E6  0839               	movf	_an_in_pcnt,w
  7305  03E7  3A01               	xorlw	1
  7306  03E8  1D03               	skipz
  7307  03E9  2C30               	goto	l6670
  7308                           
  7309                           ;trans_ctrl.c: 334: (ADCON0 = 0b00000101, ADCON1 = 0xe0);
  7310  03EA  3005               	movlw	5
  7311  03EB  0021               	movlb	1	; select bank1
  7312  03EC  009D               	movwf	29	;volatile
  7313  03ED  30E0               	movlw	224
  7314  03EE  009E               	movwf	30	;volatile
  7315                           
  7316                           ;trans_ctrl.c: 335: { delayus_variable=(unsigned char)(4/2); asm("nop"); } asm("decfsz _
      +                          delayus_variable,f"); asm("goto $ - 2");;
  7317  03EF  3002               	movlw	2
  7318  03F0  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7319  03F1  083A               	movf	??_CheckAnalogInput^(0+128),w
  7320  03F2  0020               	movlb	0	; select bank0
  7321  03F3  00C2               	movwf	_delayus_variable
  7322  03F4  0000               	nop	;# 
  7323  03F5  3183  0BC2         	decfsz	_delayus_variable,f	;# 
  7324  03F7  2B78               	goto	($+-2)	;# 
  7325                           
  7326                           ;trans_ctrl.c: 336: (GO_nDONE = 1);
  7327  03F8  0021               	movlb	1	; select bank1
  7328  03F9  149D               	bsf	29,1	;volatile
  7329  03FA                     l461:	
  7330                           ;trans_ctrl.c: 337: while ((GO_nDONE == 1)) continue;
  7331                           
  7332  03FA  189D               	btfsc	29,1	;volatile
  7333  03FB  2BFA               	goto	l461
  7334                           
  7335                           ;trans_ctrl.c: 338: vp1_production_speed = ADRESH;
  7336  03FC  081C               	movf	28,w	;volatile
  7337  03FD  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7338  03FE  01BB               	clrf	(??_CheckAnalogInput^(0+128)+1)
  7339  03FF  083A               	movf	??_CheckAnalogInput^(0+128),w
  7340  0400  0020               	movlb	0	; select bank0
  7341  0401  00B4               	movwf	_vp1_production_speed
  7342  0402  0021               	movlb	1	; select bank1
  7343  0403  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7344  0404  0020               	movlb	0	; select bank0
  7345  0405  00B5               	movwf	_vp1_production_speed+1
  7346                           
  7347                           ;trans_ctrl.c: 339: vp1_production_speed = vp1_production_speed << 8;
  7348  0406  0834               	movf	_vp1_production_speed,w
  7349  0407  0021               	movlb	1	; select bank1
  7350  0408  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7351  0409  01BA               	clrf	??_CheckAnalogInput^(0+128)
  7352  040A  083A               	movf	??_CheckAnalogInput^(0+128),w
  7353  040B  0020               	movlb	0	; select bank0
  7354  040C  00B4               	movwf	_vp1_production_speed
  7355  040D  0021               	movlb	1	; select bank1
  7356  040E  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7357  040F  0020               	movlb	0	; select bank0
  7358  0410  00B5               	movwf	_vp1_production_speed+1
  7359                           
  7360                           ;trans_ctrl.c: 340: vp1_production_speed += ADRESL;
  7361  0411  0021               	movlb	1	; select bank1
  7362  0412  081B               	movf	27,w	;volatile
  7363  0413  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7364  0414  01BB               	clrf	(??_CheckAnalogInput^(0+128)+1)
  7365  0415  083A               	movf	??_CheckAnalogInput^(0+128),w
  7366  0416  0020               	movlb	0	; select bank0
  7367  0417  07B4               	addwf	_vp1_production_speed,f
  7368  0418  0021               	movlb	1	; select bank1
  7369  0419  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7370  041A  0020               	movlb	0	; select bank0
  7371  041B  3DB5               	addwfc	_vp1_production_speed+1,f
  7372                           
  7373                           ;trans_ctrl.c: 341: vp1_production_speed = (1023 - vp1_production_speed);
  7374  041C  0934               	comf	_vp1_production_speed,w
  7375  041D  0021               	movlb	1	; select bank1
  7376  041E  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7377  041F  0020               	movlb	0	; select bank0
  7378  0420  0935               	comf	_vp1_production_speed+1,w
  7379  0421  0021               	movlb	1	; select bank1
  7380  0422  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7381  0423  0ABA               	incf	??_CheckAnalogInput^(0+128),f
  7382  0424  1903               	skipnz
  7383  0425  0ABB               	incf	(??_CheckAnalogInput^(0+128)+1),f
  7384  0426  083A               	movf	??_CheckAnalogInput^(0+128),w
  7385  0427  3EFF               	addlw	255
  7386  0428  0020               	movlb	0	; select bank0
  7387  0429  00B4               	movwf	_vp1_production_speed
  7388  042A  3003               	movlw	3
  7389  042B  0021               	movlb	1	; select bank1
  7390  042C  3D3B               	addwfc	(??_CheckAnalogInput+1)^(0+128),w
  7391  042D  0020               	movlb	0	; select bank0
  7392  042E  00B5               	movwf	_vp1_production_speed+1
  7393  042F  2D9F               	goto	l6724
  7394  0430                     l6670:	
  7395                           ;trans_ctrl.c: 343: } else if (an_in_pcnt == 2) {
  7396                           
  7397                           ;trans_ctrl.c: 342: ++an_in_pcnt;
  7398                           
  7399  0430  0839               	movf	_an_in_pcnt,w
  7400  0431  3A02               	xorlw	2
  7401  0432  1D03               	skipz
  7402  0433  2C87               	goto	l6684
  7403                           
  7404                           ;trans_ctrl.c: 344: (ADCON0 = 0b00001001, ADCON1 = 0xe0);
  7405  0434  3009               	movlw	9
  7406  0435  0021               	movlb	1	; select bank1
  7407  0436  009D               	movwf	29	;volatile
  7408  0437  30E0               	movlw	224
  7409  0438  009E               	movwf	30	;volatile
  7410                           
  7411                           ;trans_ctrl.c: 345: { delayus_variable=(unsigned char)(4/2); asm("nop"); } asm("decfsz _
      +                          delayus_variable,f"); asm("goto $ - 2");;
  7412  0439  3002               	movlw	2
  7413  043A  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7414  043B  083A               	movf	??_CheckAnalogInput^(0+128),w
  7415  043C  0020               	movlb	0	; select bank0
  7416  043D  00C2               	movwf	_delayus_variable
  7417  043E  0000               	nop	;# 
  7418  043F  0BC2               	decfsz	_delayus_variable,f	;# 
  7419  0440  2B78               	goto	($+-2)	;# 
  7420                           
  7421                           ;trans_ctrl.c: 346: (GO_nDONE = 1);
  7422  0441  0021               	movlb	1	; select bank1
  7423  0442  149D               	bsf	29,1	;volatile
  7424  0443                     l466:	
  7425                           ;trans_ctrl.c: 347: while ((GO_nDONE == 1)) continue;
  7426                           
  7427  0443  189D               	btfsc	29,1	;volatile
  7428  0444  2C43               	goto	l466
  7429                           
  7430                           ;trans_ctrl.c: 348: vp1_idle_speed = ADRESH;
  7431  0445  081C               	movf	28,w	;volatile
  7432  0446  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7433  0447  01BB               	clrf	(??_CheckAnalogInput^(0+128)+1)
  7434  0448  083A               	movf	??_CheckAnalogInput^(0+128),w
  7435  0449  0020               	movlb	0	; select bank0
  7436  044A  00B2               	movwf	_vp1_idle_speed
  7437  044B  0021               	movlb	1	; select bank1
  7438  044C  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7439  044D  0020               	movlb	0	; select bank0
  7440  044E  00B3               	movwf	_vp1_idle_speed+1
  7441                           
  7442                           ;trans_ctrl.c: 349: vp1_idle_speed = vp1_idle_speed << 8;
  7443  044F  0832               	movf	_vp1_idle_speed,w
  7444  0450  0021               	movlb	1	; select bank1
  7445  0451  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7446  0452  01BA               	clrf	??_CheckAnalogInput^(0+128)
  7447  0453  083A               	movf	??_CheckAnalogInput^(0+128),w
  7448  0454  0020               	movlb	0	; select bank0
  7449  0455  00B2               	movwf	_vp1_idle_speed
  7450  0456  0021               	movlb	1	; select bank1
  7451  0457  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7452  0458  0020               	movlb	0	; select bank0
  7453  0459  00B3               	movwf	_vp1_idle_speed+1
  7454                           
  7455                           ;trans_ctrl.c: 350: vp1_idle_speed += ADRESL;
  7456  045A  0021               	movlb	1	; select bank1
  7457  045B  081B               	movf	27,w	;volatile
  7458  045C  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7459  045D  01BB               	clrf	(??_CheckAnalogInput^(0+128)+1)
  7460  045E  083A               	movf	??_CheckAnalogInput^(0+128),w
  7461  045F  0020               	movlb	0	; select bank0
  7462  0460  07B2               	addwf	_vp1_idle_speed,f
  7463  0461  0021               	movlb	1	; select bank1
  7464  0462  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7465  0463  0020               	movlb	0	; select bank0
  7466  0464  3DB3               	addwfc	_vp1_idle_speed+1,f
  7467                           
  7468                           ;trans_ctrl.c: 351: vp1_idle_speed = (1023 - vp1_idle_speed);
  7469  0465  0932               	comf	_vp1_idle_speed,w
  7470  0466  0021               	movlb	1	; select bank1
  7471  0467  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7472  0468  0020               	movlb	0	; select bank0
  7473  0469  0933               	comf	_vp1_idle_speed+1,w
  7474  046A  0021               	movlb	1	; select bank1
  7475  046B  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7476  046C  0ABA               	incf	??_CheckAnalogInput^(0+128),f
  7477  046D  1903               	skipnz
  7478  046E  0ABB               	incf	(??_CheckAnalogInput^(0+128)+1),f
  7479  046F  083A               	movf	??_CheckAnalogInput^(0+128),w
  7480  0470  3EFF               	addlw	255
  7481  0471  0020               	movlb	0	; select bank0
  7482  0472  00B2               	movwf	_vp1_idle_speed
  7483  0473  3003               	movlw	3
  7484  0474  0021               	movlb	1	; select bank1
  7485  0475  3D3B               	addwfc	(??_CheckAnalogInput+1)^(0+128),w
  7486  0476  0020               	movlb	0	; select bank0
  7487  0477  00B3               	movwf	_vp1_idle_speed+1
  7488                           
  7489                           ;trans_ctrl.c: 352: if(vp1_idle_speed > vp1_production_speed) vp1_idle_speed = vp1_produ
      +                          ction_speed;
  7490  0478  0833               	movf	_vp1_idle_speed+1,w
  7491  0479  0235               	subwf	_vp1_production_speed+1,w
  7492  047A  1D03               	skipz
  7493  047B  2C7E               	goto	u10305
  7494  047C  0832               	movf	_vp1_idle_speed,w
  7495  047D  0234               	subwf	_vp1_production_speed,w
  7496  047E                     u10305:	
  7497  047E  1803               	skipnc
  7498  047F  2D9F               	goto	l6724
  7499  0480  0835               	movf	_vp1_production_speed+1,w
  7500  0481  01B3               	clrf	_vp1_idle_speed+1
  7501  0482  07B3               	addwf	_vp1_idle_speed+1,f
  7502  0483  0834               	movf	_vp1_production_speed,w
  7503  0484  01B2               	clrf	_vp1_idle_speed
  7504  0485  07B2               	addwf	_vp1_idle_speed,f
  7505  0486  2D9F               	goto	l6724
  7506  0487                     l6684:	
  7507                           ;trans_ctrl.c: 354: } else if (an_in_pcnt == 3) {
  7508                           
  7509                           ;trans_ctrl.c: 353: ++an_in_pcnt;
  7510                           
  7511  0487  0839               	movf	_an_in_pcnt,w
  7512  0488  3A03               	xorlw	3
  7513  0489  1D03               	skipz
  7514  048A  2CE4               	goto	l6698
  7515                           
  7516                           ;trans_ctrl.c: 355: (ADCON0 = 0b00001101, ADCON1 = 0xe0);
  7517  048B  300D               	movlw	13
  7518  048C  0021               	movlb	1	; select bank1
  7519  048D  009D               	movwf	29	;volatile
  7520  048E  30E0               	movlw	224
  7521  048F  009E               	movwf	30	;volatile
  7522                           
  7523                           ;trans_ctrl.c: 356: { delayus_variable=(unsigned char)(4/2); asm("nop"); } asm("decfsz _
      +                          delayus_variable,f"); asm("goto $ - 2");;
  7524  0490  3002               	movlw	2
  7525  0491  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7526  0492  083A               	movf	??_CheckAnalogInput^(0+128),w
  7527  0493  0020               	movlb	0	; select bank0
  7528  0494  00C2               	movwf	_delayus_variable
  7529  0495  0000               	nop	;# 
  7530  0496  0BC2               	decfsz	_delayus_variable,f	;# 
  7531  0497  2B78               	goto	($+-2)	;# 
  7532                           
  7533                           ;trans_ctrl.c: 357: (GO_nDONE = 1);
  7534  0498  0021               	movlb	1	; select bank1
  7535  0499  149D               	bsf	29,1	;volatile
  7536  049A                     l472:	
  7537                           ;trans_ctrl.c: 358: while ((GO_nDONE == 1)) continue;
  7538                           
  7539  049A  189D               	btfsc	29,1	;volatile
  7540  049B  2C9A               	goto	l472
  7541                           
  7542                           ;trans_ctrl.c: 359: max_charging_time = ADRESH;
  7543  049C  081C               	movf	28,w	;volatile
  7544  049D  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7545  049E  01BB               	clrf	(??_CheckAnalogInput^(0+128)+1)
  7546  049F  083A               	movf	??_CheckAnalogInput^(0+128),w
  7547  04A0  0020               	movlb	0	; select bank0
  7548  04A1  00A6               	movwf	_max_charging_time
  7549  04A2  0021               	movlb	1	; select bank1
  7550  04A3  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7551  04A4  0020               	movlb	0	; select bank0
  7552  04A5  00A7               	movwf	_max_charging_time+1
  7553                           
  7554                           ;trans_ctrl.c: 360: max_charging_time = max_charging_time << 8;
  7555  04A6  0826               	movf	_max_charging_time,w
  7556  04A7  0021               	movlb	1	; select bank1
  7557  04A8  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7558  04A9  01BA               	clrf	??_CheckAnalogInput^(0+128)
  7559  04AA  083A               	movf	??_CheckAnalogInput^(0+128),w
  7560  04AB  0020               	movlb	0	; select bank0
  7561  04AC  00A6               	movwf	_max_charging_time
  7562  04AD  0021               	movlb	1	; select bank1
  7563  04AE  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7564  04AF  0020               	movlb	0	; select bank0
  7565  04B0  00A7               	movwf	_max_charging_time+1
  7566                           
  7567                           ;trans_ctrl.c: 361: max_charging_time += ADRESL;
  7568  04B1  0021               	movlb	1	; select bank1
  7569  04B2  081B               	movf	27,w	;volatile
  7570  04B3  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7571  04B4  01BB               	clrf	(??_CheckAnalogInput^(0+128)+1)
  7572  04B5  083A               	movf	??_CheckAnalogInput^(0+128),w
  7573  04B6  0020               	movlb	0	; select bank0
  7574  04B7  07A6               	addwf	_max_charging_time,f
  7575  04B8  0021               	movlb	1	; select bank1
  7576  04B9  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7577  04BA  0020               	movlb	0	; select bank0
  7578  04BB  3DA7               	addwfc	_max_charging_time+1,f
  7579                           
  7580                           ;trans_ctrl.c: 362: max_charging_time = (1023 - max_charging_time);
  7581  04BC  0926               	comf	_max_charging_time,w
  7582  04BD  0021               	movlb	1	; select bank1
  7583  04BE  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7584  04BF  0020               	movlb	0	; select bank0
  7585  04C0  0927               	comf	_max_charging_time+1,w
  7586  04C1  0021               	movlb	1	; select bank1
  7587  04C2  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7588  04C3  0ABA               	incf	??_CheckAnalogInput^(0+128),f
  7589  04C4  1903               	skipnz
  7590  04C5  0ABB               	incf	(??_CheckAnalogInput^(0+128)+1),f
  7591  04C6  083A               	movf	??_CheckAnalogInput^(0+128),w
  7592  04C7  3EFF               	addlw	255
  7593  04C8  0020               	movlb	0	; select bank0
  7594  04C9  00A6               	movwf	_max_charging_time
  7595  04CA  3003               	movlw	3
  7596  04CB  0021               	movlb	1	; select bank1
  7597  04CC  3D3B               	addwfc	(??_CheckAnalogInput+1)^(0+128),w
  7598  04CD  0020               	movlb	0	; select bank0
  7599  04CE  00A7               	movwf	_max_charging_time+1
  7600                           
  7601                           ;trans_ctrl.c: 363: max_charging_time = max_charging_time * 30;
  7602  04CF  0827               	movf	_max_charging_time+1,w
  7603  04D0  01F3               	clrf	___wmul@multiplier+1
  7604  04D1  07F3               	addwf	___wmul@multiplier+1,f
  7605  04D2  0826               	movf	_max_charging_time,w
  7606  04D3  01F2               	clrf	___wmul@multiplier
  7607  04D4  07F2               	addwf	___wmul@multiplier,f
  7608  04D5  301E               	movlw	30
  7609  04D6  00F4               	movwf	___wmul@multiplicand
  7610  04D7  3000               	movlw	0
  7611  04D8  00F5               	movwf	___wmul@multiplicand+1
  7612  04D9  3187  27E3  3183   	fcall	___wmul
  7613  04DC  0873               	movf	?___wmul+1,w
  7614  04DD  0020               	movlb	0	; select bank0
  7615  04DE  01A7               	clrf	_max_charging_time+1
  7616  04DF  07A7               	addwf	_max_charging_time+1,f
  7617  04E0  0872               	movf	?___wmul,w
  7618  04E1  01A6               	clrf	_max_charging_time
  7619  04E2  07A6               	addwf	_max_charging_time,f
  7620  04E3  2D9F               	goto	l6724
  7621  04E4                     l6698:	
  7622                           ;trans_ctrl.c: 365: } else if (an_in_pcnt == 4) {
  7623                           
  7624                           ;trans_ctrl.c: 364: ++an_in_pcnt;
  7625                           
  7626  04E4  0839               	movf	_an_in_pcnt,w
  7627  04E5  3A04               	xorlw	4
  7628  04E6  1D03               	skipz
  7629  04E7  2D42               	goto	l6712
  7630                           
  7631                           ;trans_ctrl.c: 366: (ADCON0 = 0b00010001, ADCON1 = 0xe0);
  7632  04E8  3011               	movlw	17
  7633  04E9  0021               	movlb	1	; select bank1
  7634  04EA  009D               	movwf	29	;volatile
  7635  04EB  30E0               	movlw	224
  7636  04EC  009E               	movwf	30	;volatile
  7637                           
  7638                           ;trans_ctrl.c: 367: { delayus_variable=(unsigned char)(4/2); asm("nop"); } asm("decfsz _
      +                          delayus_variable,f"); asm("goto $ - 2");;
  7639  04ED  3002               	movlw	2
  7640  04EE  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7641  04EF  083A               	movf	??_CheckAnalogInput^(0+128),w
  7642  04F0  0020               	movlb	0	; select bank0
  7643  04F1  00C2               	movwf	_delayus_variable
  7644  04F2  0000               	nop	;# 
  7645  04F3  3183  0BC2         	decfsz	_delayus_variable,f	;# 
  7646  04F5  2B78               	goto	($+-2)	;# 
  7647                           
  7648                           ;trans_ctrl.c: 368: (GO_nDONE = 1);
  7649  04F6  0021               	movlb	1	; select bank1
  7650  04F7  149D               	bsf	29,1	;volatile
  7651  04F8                     l477:	
  7652                           ;trans_ctrl.c: 369: while ((GO_nDONE == 1)) continue;
  7653                           
  7654  04F8  189D               	btfsc	29,1	;volatile
  7655  04F9  2CF8               	goto	l477
  7656                           
  7657                           ;trans_ctrl.c: 370: mill_shutdown_delay = ADRESH;
  7658  04FA  081C               	movf	28,w	;volatile
  7659  04FB  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7660  04FC  01BB               	clrf	(??_CheckAnalogInput^(0+128)+1)
  7661  04FD  083A               	movf	??_CheckAnalogInput^(0+128),w
  7662  04FE  0020               	movlb	0	; select bank0
  7663  04FF  00A8               	movwf	_mill_shutdown_delay
  7664  0500  0021               	movlb	1	; select bank1
  7665  0501  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7666  0502  0020               	movlb	0	; select bank0
  7667  0503  00A9               	movwf	_mill_shutdown_delay+1
  7668                           
  7669                           ;trans_ctrl.c: 371: mill_shutdown_delay = mill_shutdown_delay << 8;
  7670  0504  0828               	movf	_mill_shutdown_delay,w
  7671  0505  0021               	movlb	1	; select bank1
  7672  0506  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7673  0507  01BA               	clrf	??_CheckAnalogInput^(0+128)
  7674  0508  083A               	movf	??_CheckAnalogInput^(0+128),w
  7675  0509  0020               	movlb	0	; select bank0
  7676  050A  00A8               	movwf	_mill_shutdown_delay
  7677  050B  0021               	movlb	1	; select bank1
  7678  050C  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7679  050D  0020               	movlb	0	; select bank0
  7680  050E  00A9               	movwf	_mill_shutdown_delay+1
  7681                           
  7682                           ;trans_ctrl.c: 372: mill_shutdown_delay += ADRESL;
  7683  050F  0021               	movlb	1	; select bank1
  7684  0510  081B               	movf	27,w	;volatile
  7685  0511  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7686  0512  01BB               	clrf	(??_CheckAnalogInput^(0+128)+1)
  7687  0513  083A               	movf	??_CheckAnalogInput^(0+128),w
  7688  0514  0020               	movlb	0	; select bank0
  7689  0515  07A8               	addwf	_mill_shutdown_delay,f
  7690  0516  0021               	movlb	1	; select bank1
  7691  0517  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7692  0518  0020               	movlb	0	; select bank0
  7693  0519  3DA9               	addwfc	_mill_shutdown_delay+1,f
  7694                           
  7695                           ;trans_ctrl.c: 373: mill_shutdown_delay = (1023 - mill_shutdown_delay);
  7696  051A  0928               	comf	_mill_shutdown_delay,w
  7697  051B  0021               	movlb	1	; select bank1
  7698  051C  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7699  051D  0020               	movlb	0	; select bank0
  7700  051E  0929               	comf	_mill_shutdown_delay+1,w
  7701  051F  0021               	movlb	1	; select bank1
  7702  0520  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7703  0521  0ABA               	incf	??_CheckAnalogInput^(0+128),f
  7704  0522  1903               	skipnz
  7705  0523  0ABB               	incf	(??_CheckAnalogInput^(0+128)+1),f
  7706  0524  083A               	movf	??_CheckAnalogInput^(0+128),w
  7707  0525  3EFF               	addlw	255
  7708  0526  0020               	movlb	0	; select bank0
  7709  0527  00A8               	movwf	_mill_shutdown_delay
  7710  0528  3003               	movlw	3
  7711  0529  0021               	movlb	1	; select bank1
  7712  052A  3D3B               	addwfc	(??_CheckAnalogInput+1)^(0+128),w
  7713  052B  0020               	movlb	0	; select bank0
  7714  052C  00A9               	movwf	_mill_shutdown_delay+1
  7715                           
  7716                           ;trans_ctrl.c: 374: mill_shutdown_delay = mill_shutdown_delay * 30;
  7717  052D  0829               	movf	_mill_shutdown_delay+1,w
  7718  052E  01F3               	clrf	___wmul@multiplier+1
  7719  052F  07F3               	addwf	___wmul@multiplier+1,f
  7720  0530  0828               	movf	_mill_shutdown_delay,w
  7721  0531  01F2               	clrf	___wmul@multiplier
  7722  0532  07F2               	addwf	___wmul@multiplier,f
  7723  0533  301E               	movlw	30
  7724  0534  00F4               	movwf	___wmul@multiplicand
  7725  0535  3000               	movlw	0
  7726  0536  00F5               	movwf	___wmul@multiplicand+1
  7727  0537  3187  27E3  3183   	fcall	___wmul
  7728  053A  0873               	movf	?___wmul+1,w
  7729  053B  0020               	movlb	0	; select bank0
  7730  053C  01A9               	clrf	_mill_shutdown_delay+1
  7731  053D  07A9               	addwf	_mill_shutdown_delay+1,f
  7732  053E  0872               	movf	?___wmul,w
  7733  053F  01A8               	clrf	_mill_shutdown_delay
  7734  0540  07A8               	addwf	_mill_shutdown_delay,f
  7735  0541  2D9F               	goto	l6724
  7736  0542                     l6712:	
  7737                           ;trans_ctrl.c: 376: } else if (an_in_pcnt == 5) {
  7738                           
  7739                           ;trans_ctrl.c: 375: ++an_in_pcnt;
  7740                           
  7741  0542  0839               	movf	_an_in_pcnt,w
  7742  0543  3A05               	xorlw	5
  7743  0544  1D03               	skipz
  7744  0545  2DA6               	goto	l6726
  7745                           
  7746                           ;trans_ctrl.c: 377: (ADCON0 = 0b00010101, ADCON1 = 0xe0);
  7747  0546  3015               	movlw	21
  7748  0547  0021               	movlb	1	; select bank1
  7749  0548  009D               	movwf	29	;volatile
  7750  0549  30E0               	movlw	224
  7751  054A  009E               	movwf	30	;volatile
  7752                           
  7753                           ;trans_ctrl.c: 378: { delayus_variable=(unsigned char)(4/2); asm("nop"); } asm("decfsz _
      +                          delayus_variable,f"); asm("goto $ - 2");;
  7754  054B  3002               	movlw	2
  7755  054C  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7756  054D  083A               	movf	??_CheckAnalogInput^(0+128),w
  7757  054E  0020               	movlb	0	; select bank0
  7758  054F  00C2               	movwf	_delayus_variable
  7759  0550  0000               	nop	;# 
  7760  0551  3183  0BC2         	decfsz	_delayus_variable,f	;# 
  7761  0553  2B78               	goto	($+-2)	;# 
  7762                           
  7763                           ;trans_ctrl.c: 379: (GO_nDONE = 1);
  7764  0554  0021               	movlb	1	; select bank1
  7765  0555  149D               	bsf	29,1	;volatile
  7766  0556                     l482:	
  7767                           ;trans_ctrl.c: 380: while ((GO_nDONE == 1)) continue;
  7768                           
  7769  0556  189D               	btfsc	29,1	;volatile
  7770  0557  2D56               	goto	l482
  7771                           
  7772                           ;trans_ctrl.c: 381: feeder4_charging_time = ADRESH;
  7773  0558  081C               	movf	28,w	;volatile
  7774  0559  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7775  055A  01BB               	clrf	(??_CheckAnalogInput^(0+128)+1)
  7776  055B  083A               	movf	??_CheckAnalogInput^(0+128),w
  7777  055C  0020               	movlb	0	; select bank0
  7778  055D  00A4               	movwf	_feeder4_charging_time
  7779  055E  0021               	movlb	1	; select bank1
  7780  055F  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7781  0560  0020               	movlb	0	; select bank0
  7782  0561  00A5               	movwf	_feeder4_charging_time+1
  7783                           
  7784                           ;trans_ctrl.c: 382: feeder4_charging_time = feeder4_charging_time << 8;
  7785  0562  0824               	movf	_feeder4_charging_time,w
  7786  0563  0021               	movlb	1	; select bank1
  7787  0564  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7788  0565  01BA               	clrf	??_CheckAnalogInput^(0+128)
  7789  0566  083A               	movf	??_CheckAnalogInput^(0+128),w
  7790  0567  0020               	movlb	0	; select bank0
  7791  0568  00A4               	movwf	_feeder4_charging_time
  7792  0569  0021               	movlb	1	; select bank1
  7793  056A  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7794  056B  0020               	movlb	0	; select bank0
  7795  056C  00A5               	movwf	_feeder4_charging_time+1
  7796                           
  7797                           ;trans_ctrl.c: 383: feeder4_charging_time += ADRESL;
  7798  056D  0021               	movlb	1	; select bank1
  7799  056E  081B               	movf	27,w	;volatile
  7800  056F  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7801  0570  01BB               	clrf	(??_CheckAnalogInput^(0+128)+1)
  7802  0571  083A               	movf	??_CheckAnalogInput^(0+128),w
  7803  0572  0020               	movlb	0	; select bank0
  7804  0573  07A4               	addwf	_feeder4_charging_time,f
  7805  0574  0021               	movlb	1	; select bank1
  7806  0575  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7807  0576  0020               	movlb	0	; select bank0
  7808  0577  3DA5               	addwfc	_feeder4_charging_time+1,f
  7809                           
  7810                           ;trans_ctrl.c: 384: feeder4_charging_time = (1023 - feeder4_charging_time);
  7811  0578  0924               	comf	_feeder4_charging_time,w
  7812  0579  0021               	movlb	1	; select bank1
  7813  057A  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7814  057B  0020               	movlb	0	; select bank0
  7815  057C  0925               	comf	_feeder4_charging_time+1,w
  7816  057D  0021               	movlb	1	; select bank1
  7817  057E  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7818  057F  0ABA               	incf	??_CheckAnalogInput^(0+128),f
  7819  0580  1903               	skipnz
  7820  0581  0ABB               	incf	(??_CheckAnalogInput^(0+128)+1),f
  7821  0582  083A               	movf	??_CheckAnalogInput^(0+128),w
  7822  0583  3EFF               	addlw	255
  7823  0584  0020               	movlb	0	; select bank0
  7824  0585  00A4               	movwf	_feeder4_charging_time
  7825  0586  3003               	movlw	3
  7826  0587  0021               	movlb	1	; select bank1
  7827  0588  3D3B               	addwfc	(??_CheckAnalogInput+1)^(0+128),w
  7828  0589  0020               	movlb	0	; select bank0
  7829  058A  00A5               	movwf	_feeder4_charging_time+1
  7830                           
  7831                           ;trans_ctrl.c: 385: feeder4_charging_time = feeder4_charging_time * 18;
  7832  058B  0825               	movf	_feeder4_charging_time+1,w
  7833  058C  01F3               	clrf	___wmul@multiplier+1
  7834  058D  07F3               	addwf	___wmul@multiplier+1,f
  7835  058E  0824               	movf	_feeder4_charging_time,w
  7836  058F  01F2               	clrf	___wmul@multiplier
  7837  0590  07F2               	addwf	___wmul@multiplier,f
  7838  0591  3012               	movlw	18
  7839  0592  00F4               	movwf	___wmul@multiplicand
  7840  0593  3000               	movlw	0
  7841  0594  00F5               	movwf	___wmul@multiplicand+1
  7842  0595  3187  27E3  3183   	fcall	___wmul
  7843  0598  0873               	movf	?___wmul+1,w
  7844  0599  0020               	movlb	0	; select bank0
  7845  059A  01A5               	clrf	_feeder4_charging_time+1
  7846  059B  07A5               	addwf	_feeder4_charging_time+1,f
  7847  059C  0872               	movf	?___wmul,w
  7848  059D  01A4               	clrf	_feeder4_charging_time
  7849  059E  07A4               	addwf	_feeder4_charging_time,f
  7850  059F                     l6724:	
  7851                           
  7852                           ;trans_ctrl.c: 386: ++an_in_pcnt;
  7853  059F  3001               	movlw	1
  7854  05A0  0021               	movlb	1	; select bank1
  7855  05A1  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7856  05A2  083A               	movf	??_CheckAnalogInput^(0+128),w
  7857  05A3  0020               	movlb	0	; select bank0
  7858  05A4  07B9               	addwf	_an_in_pcnt,f
  7859                           
  7860                           ;trans_ctrl.c: 387: } else if (an_in_pcnt == 6) {
  7861  05A5  2E00               	goto	l6740
  7862  05A6                     l6726:	
  7863  05A6  0839               	movf	_an_in_pcnt,w
  7864  05A7  3A06               	xorlw	6
  7865  05A8  1D03               	skipz
  7866  05A9  2E00               	goto	l6740
  7867                           
  7868                           ;trans_ctrl.c: 388: (ADCON0 = 0b00011001, ADCON1 = 0xe0);
  7869  05AA  3019               	movlw	25
  7870  05AB  0021               	movlb	1	; select bank1
  7871  05AC  009D               	movwf	29	;volatile
  7872  05AD  30E0               	movlw	224
  7873  05AE  009E               	movwf	30	;volatile
  7874                           
  7875                           ;trans_ctrl.c: 389: { delayus_variable=(unsigned char)(4/2); asm("nop"); } asm("decfsz _
      +                          delayus_variable,f"); asm("goto $ - 2");;
  7876  05AF  3002               	movlw	2
  7877  05B0  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7878  05B1  083A               	movf	??_CheckAnalogInput^(0+128),w
  7879  05B2  0020               	movlb	0	; select bank0
  7880  05B3  00C2               	movwf	_delayus_variable
  7881  05B4  0000               	nop	;# 
  7882  05B5  3183  0BC2         	decfsz	_delayus_variable,f	;# 
  7883  05B7  2B78               	goto	($+-2)	;# 
  7884                           
  7885                           ;trans_ctrl.c: 390: (GO_nDONE = 1);
  7886  05B8  0021               	movlb	1	; select bank1
  7887  05B9  149D               	bsf	29,1	;volatile
  7888  05BA                     l487:	
  7889                           ;trans_ctrl.c: 391: while ((GO_nDONE == 1)) continue;
  7890                           
  7891  05BA  189D               	btfsc	29,1	;volatile
  7892  05BB  2DBA               	goto	l487
  7893                           
  7894                           ;trans_ctrl.c: 392: vp1_cleaning_cycles = ADRESH;
  7895  05BC  081C               	movf	28,w	;volatile
  7896  05BD  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7897  05BE  01BB               	clrf	(??_CheckAnalogInput^(0+128)+1)
  7898  05BF  083A               	movf	??_CheckAnalogInput^(0+128),w
  7899  05C0  0020               	movlb	0	; select bank0
  7900  05C1  00AE               	movwf	_vp1_cleaning_cycles
  7901  05C2  0021               	movlb	1	; select bank1
  7902  05C3  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7903  05C4  0020               	movlb	0	; select bank0
  7904  05C5  00AF               	movwf	_vp1_cleaning_cycles+1
  7905                           
  7906                           ;trans_ctrl.c: 393: vp1_cleaning_cycles = vp1_cleaning_cycles << 8;
  7907  05C6  082E               	movf	_vp1_cleaning_cycles,w
  7908  05C7  0021               	movlb	1	; select bank1
  7909  05C8  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7910  05C9  01BA               	clrf	??_CheckAnalogInput^(0+128)
  7911  05CA  083A               	movf	??_CheckAnalogInput^(0+128),w
  7912  05CB  0020               	movlb	0	; select bank0
  7913  05CC  00AE               	movwf	_vp1_cleaning_cycles
  7914  05CD  0021               	movlb	1	; select bank1
  7915  05CE  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7916  05CF  0020               	movlb	0	; select bank0
  7917  05D0  00AF               	movwf	_vp1_cleaning_cycles+1
  7918                           
  7919                           ;trans_ctrl.c: 394: vp1_cleaning_cycles += ADRESL;
  7920  05D1  0021               	movlb	1	; select bank1
  7921  05D2  081B               	movf	27,w	;volatile
  7922  05D3  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7923  05D4  01BB               	clrf	(??_CheckAnalogInput^(0+128)+1)
  7924  05D5  083A               	movf	??_CheckAnalogInput^(0+128),w
  7925  05D6  0020               	movlb	0	; select bank0
  7926  05D7  07AE               	addwf	_vp1_cleaning_cycles,f
  7927  05D8  0021               	movlb	1	; select bank1
  7928  05D9  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7929  05DA  0020               	movlb	0	; select bank0
  7930  05DB  3DAF               	addwfc	_vp1_cleaning_cycles+1,f
  7931                           
  7932                           ;trans_ctrl.c: 395: vp1_cleaning_cycles = (1023 - vp1_cleaning_cycles);
  7933  05DC  092E               	comf	_vp1_cleaning_cycles,w
  7934  05DD  0021               	movlb	1	; select bank1
  7935  05DE  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7936  05DF  0020               	movlb	0	; select bank0
  7937  05E0  092F               	comf	_vp1_cleaning_cycles+1,w
  7938  05E1  0021               	movlb	1	; select bank1
  7939  05E2  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7940  05E3  0ABA               	incf	??_CheckAnalogInput^(0+128),f
  7941  05E4  1903               	skipnz
  7942  05E5  0ABB               	incf	(??_CheckAnalogInput^(0+128)+1),f
  7943  05E6  083A               	movf	??_CheckAnalogInput^(0+128),w
  7944  05E7  3EFF               	addlw	255
  7945  05E8  0020               	movlb	0	; select bank0
  7946  05E9  00AE               	movwf	_vp1_cleaning_cycles
  7947  05EA  3003               	movlw	3
  7948  05EB  0021               	movlb	1	; select bank1
  7949  05EC  3D3B               	addwfc	(??_CheckAnalogInput+1)^(0+128),w
  7950  05ED  0020               	movlb	0	; select bank0
  7951  05EE  00AF               	movwf	_vp1_cleaning_cycles+1
  7952                           
  7953                           ;trans_ctrl.c: 396: vp1_cleaning_cycles = (vp1_cleaning_cycles / 2);
  7954  05EF  082F               	movf	_vp1_cleaning_cycles+1,w
  7955  05F0  0021               	movlb	1	; select bank1
  7956  05F1  00BB               	movwf	(??_CheckAnalogInput^(0+128)+1)
  7957  05F2  0020               	movlb	0	; select bank0
  7958  05F3  082E               	movf	_vp1_cleaning_cycles,w
  7959  05F4  0021               	movlb	1	; select bank1
  7960  05F5  00BA               	movwf	??_CheckAnalogInput^(0+128)
  7961  05F6  36BB               	lsrf	(??_CheckAnalogInput^(0+128)+1),f
  7962  05F7  0CBA               	rrf	??_CheckAnalogInput^(0+128),f
  7963  05F8  083A               	movf	??_CheckAnalogInput^(0+128),w
  7964  05F9  0020               	movlb	0	; select bank0
  7965  05FA  00AE               	movwf	_vp1_cleaning_cycles
  7966  05FB  0021               	movlb	1	; select bank1
  7967  05FC  083B               	movf	(??_CheckAnalogInput+1)^(0+128),w
  7968  05FD  0020               	movlb	0	; select bank0
  7969  05FE  00AF               	movwf	_vp1_cleaning_cycles+1
  7970                           
  7971                           ;trans_ctrl.c: 397: an_in_pcnt = 0;
  7972  05FF  01B9               	clrf	_an_in_pcnt
  7973  0600                     l6740:	
  7974                           
  7975                           ;trans_ctrl.c: 398: }
  7976                           ;trans_ctrl.c: 399: (PEIE = 1);
  7977  0600  170B               	bsf	11,6	;volatile
  7978  0601  0008               	return
  7979  0602                     __end_of_CheckAnalogInput:	
  7980                           
  7981                           	psect	text17
  7982  07E3                     __ptext17:	
  7983 ;; *************** function ___wmul *****************
  7984 ;; Defined at:
  7985 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;  multiplier      2    2[COMMON] unsigned int 
  7988 ;;  multiplicand    2    4[COMMON] unsigned int 
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;  product         2    6[COMMON] unsigned int 
  7991 ;; Return value:  Size  Location     Type
  7992 ;;                  2    2[COMMON] unsigned int 
  7993 ;; Registers used:
  7994 ;;		wreg, status,2, status,0
  7995 ;; Tracked objects:
  7996 ;;		On entry : 0/0
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8000 ;;      Params:         4       0       0       0       0       0       0       0
  8001 ;;      Locals:         2       0       0       0       0       0       0       0
  8002 ;;      Temps:          0       0       0       0       0       0       0       0
  8003 ;;      Totals:         6       0       0       0       0       0       0       0
  8004 ;;Total ram usage:        6 bytes
  8005 ;; Hardware stack levels used:    1
  8006 ;; Hardware stack levels required when called:    2
  8007 ;; This function calls:
  8008 ;;		Nothing
  8009 ;; This function is called by:
  8010 ;;		_CheckAnalogInput
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           
  8015                           ;psect for function ___wmul
  8016  07E3                     ___wmul:	
  8017                           
  8018                           ;incstack = 0
  8019                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8020  07E3  01F6               	clrf	___wmul@product
  8021  07E4  01F7               	clrf	___wmul@product+1
  8022  07E5                     l4040:	
  8023  07E5  1C72               	btfss	___wmul@multiplier,0
  8024  07E6  2FEB               	goto	l1115
  8025  07E7  0874               	movf	___wmul@multiplicand,w
  8026  07E8  07F6               	addwf	___wmul@product,f
  8027  07E9  0875               	movf	___wmul@multiplicand+1,w
  8028  07EA  3DF7               	addwfc	___wmul@product+1,f
  8029  07EB                     l1115:	
  8030  07EB  3001               	movlw	1
  8031  07EC                     u5095:	
  8032  07EC  35F4               	lslf	___wmul@multiplicand,f
  8033  07ED  0DF5               	rlf	___wmul@multiplicand+1,f
  8034  07EE  0B89               	decfsz	9,f
  8035  07EF  2FEC               	goto	u5095
  8036  07F0  3001               	movlw	1
  8037  07F1                     u5105:	
  8038  07F1  36F3               	lsrf	___wmul@multiplier+1,f
  8039  07F2  0CF2               	rrf	___wmul@multiplier,f
  8040  07F3  0B89               	decfsz	9,f
  8041  07F4  2FF1               	goto	u5105
  8042  07F5  0873               	movf	___wmul@multiplier+1,w
  8043  07F6  0472               	iorwf	___wmul@multiplier,w
  8044  07F7  1D03               	skipz
  8045  07F8  2FE5               	goto	l4040
  8046  07F9  0877               	movf	___wmul@product+1,w
  8047  07FA  01F3               	clrf	?___wmul+1
  8048  07FB  07F3               	addwf	?___wmul+1,f
  8049  07FC  0876               	movf	___wmul@product,w
  8050  07FD  01F2               	clrf	?___wmul
  8051  07FE  07F2               	addwf	?___wmul,f
  8052  07FF  0008               	return
  8053  0800                     __end_of___wmul:	
  8054                           
  8055                           	psect	text18
  8056  151C                     __ptext18:	
  8057 ;; *************** function _InitRAM *****************
  8058 ;; Defined at:
  8059 ;;		line 118 in file "trans_ctrl.c"
  8060 ;; Parameters:    Size  Location     Type
  8061 ;;		None
  8062 ;; Auto vars:     Size  Location     Type
  8063 ;;		None
  8064 ;; Return value:  Size  Location     Type
  8065 ;;		None               void
  8066 ;; Registers used:
  8067 ;;		wreg, status,2, status,0
  8068 ;; Tracked objects:
  8069 ;;		On entry : 0/0
  8070 ;;		On exit  : 0/0
  8071 ;;		Unchanged: 0/0
  8072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8073 ;;      Params:         0       0       0       0       0       0       0       0
  8074 ;;      Locals:         0       0       0       0       0       0       0       0
  8075 ;;      Temps:          1       0       0       0       0       0       0       0
  8076 ;;      Totals:         1       0       0       0       0       0       0       0
  8077 ;;Total ram usage:        1 bytes
  8078 ;; Hardware stack levels used:    1
  8079 ;; Hardware stack levels required when called:    2
  8080 ;; This function calls:
  8081 ;;		Nothing
  8082 ;; This function is called by:
  8083 ;;		_main
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           
  8088                           ;psect for function _InitRAM
  8089  151C                     _InitRAM:	
  8090                           
  8091                           ;trans_ctrl.c: 119: vacum_pump1_state = VP1_OFF;
  8092                           
  8093                           ;incstack = 0
  8094                           ; Regs used in _InitRAM: [wreg+status,2+status,0]
  8095  151C  0020               	movlb	0	; select bank0
  8096  151D  01EB               	clrf	_vacum_pump1_state
  8097                           
  8098                           ;trans_ctrl.c: 120: activ_unit = FEEDER1;
  8099  151E  01B8               	clrf	_activ_unit
  8100                           
  8101                           ;trans_ctrl.c: 121: feeder1_state = FEEDER1_OFF;
  8102  151F  01C7               	clrf	_feeder1_state
  8103                           
  8104                           ;trans_ctrl.c: 122: feeder2_state = FEEDER2_OFF;
  8105  1520  01CA               	clrf	_feeder2_state
  8106                           
  8107                           ;trans_ctrl.c: 123: feeder3_state = FEEDER3_OFF;
  8108  1521  01CD               	clrf	_feeder3_state
  8109                           
  8110                           ;trans_ctrl.c: 124: feeder4_state = FEEDER4_OFF;
  8111  1522  01D0               	clrf	_feeder4_state
  8112                           
  8113                           ;trans_ctrl.c: 125: feeder5_state = FEEDER5_OFF;
  8114  1523  01D3               	clrf	_feeder5_state
  8115                           
  8116                           ;trans_ctrl.c: 126: feeder_coex_state = FEEDER_COEX_OFF;
  8117  1524  01D6               	clrf	_feeder_coex_state
  8118                           
  8119                           ;trans_ctrl.c: 127: hc595_shift._byte = 0xcf;
  8120  1525  30CF               	movlw	207
  8121  1526  00F2               	movwf	??_InitRAM
  8122  1527  0872               	movf	??_InitRAM,w
  8123  1528  00EE               	movwf	_hc595_shift
  8124                           
  8125                           ;trans_ctrl.c: 128: (systeml_flags1._byte &= 0x0f);
  8126  1529  300F               	movlw	15
  8127  152A  00F2               	movwf	??_InitRAM
  8128  152B  0872               	movf	??_InitRAM,w
  8129  152C  05F9               	andwf	_systeml_flags1,f
  8130                           
  8131                           ;trans_ctrl.c: 129: an0_out = 0;
  8132  152D  01A0               	clrf	_an0_out
  8133  152E  01A1               	clrf	_an0_out+1
  8134                           
  8135                           ;trans_ctrl.c: 130: an1_out = 0;
  8136  152F  01A2               	clrf	_an1_out
  8137  1530  01A3               	clrf	_an1_out+1
  8138  1531  0008               	return
  8139  1532                     __end_of_InitRAM:	
  8140                           
  8141                           	psect	text19
  8142  173D                     __ptext19:	
  8143 ;; *************** function _CheckTimer *****************
  8144 ;; Defined at:
  8145 ;;		line 166 in file "trans_ctrl.c"
  8146 ;; Parameters:    Size  Location     Type
  8147 ;;		None
  8148 ;; Auto vars:     Size  Location     Type
  8149 ;;		None
  8150 ;; Return value:  Size  Location     Type
  8151 ;;		None               void
  8152 ;; Registers used:
  8153 ;;		wreg
  8154 ;; Tracked objects:
  8155 ;;		On entry : 0/0
  8156 ;;		On exit  : 0/0
  8157 ;;		Unchanged: 0/0
  8158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8159 ;;      Params:         0       0       0       0       0       0       0       0
  8160 ;;      Locals:         0       0       0       0       0       0       0       0
  8161 ;;      Temps:          0       0       0       0       0       0       0       0
  8162 ;;      Totals:         0       0       0       0       0       0       0       0
  8163 ;;Total ram usage:        0 bytes
  8164 ;; Hardware stack levels used:    1
  8165 ;; Hardware stack levels required when called:    2
  8166 ;; This function calls:
  8167 ;;		Nothing
  8168 ;; This function is called by:
  8169 ;;		_main
  8170 ;; This function uses a non-reentrant model
  8171 ;;
  8172                           
  8173                           
  8174                           ;psect for function _CheckTimer
  8175  173D                     _CheckTimer:	
  8176                           
  8177                           ;trans_ctrl.c: 168: if (!(timer_flags2.b4 == 1)) return;
  8178                           
  8179                           ;incstack = 0
  8180                           ; Regs used in _CheckTimer: [wreg]
  8181  173D  0020               	movlb	0	; select bank0
  8182  173E  1E68               	btfss	_timer_flags2,4
  8183  173F  0008               	return
  8184                           
  8185                           ;trans_ctrl.c: 169: else (timer_flags2.b4 = 0);
  8186  1740  1268               	bcf	_timer_flags2,4
  8187                           
  8188                           ;trans_ctrl.c: 171: if (vp1_tmr) {
  8189  1741  0837               	movf	_vp1_tmr+1,w
  8190  1742  0436               	iorwf	_vp1_tmr,w
  8191  1743  1903               	skipnz
  8192  1744  2F4B               	goto	l383
  8193                           
  8194                           ;trans_ctrl.c: 172: --vp1_tmr;
  8195  1745  3001               	movlw	1
  8196  1746  02B6               	subwf	_vp1_tmr,f
  8197  1747  3000               	movlw	0
  8198  1748  3BB7               	subwfb	_vp1_tmr+1,f
  8199                           
  8200                           ;trans_ctrl.c: 173: timer_flags1.b0 = 0;
  8201  1749  107A               	bcf	_timer_flags1,0
  8202                           
  8203                           ;trans_ctrl.c: 174: } else timer_flags1.b0 = 1;
  8204  174A  2F4C               	goto	l4360
  8205  174B                     l383:	
  8206  174B  147A               	bsf	_timer_flags1,0
  8207  174C                     l4360:	
  8208                           
  8209                           ;trans_ctrl.c: 176: if (error_display_tmr) {
  8210  174C  0021               	movlb	1	; select bank1
  8211  174D  0821               	movf	(_error_display_tmr+1)^(0+128),w
  8212  174E  0420               	iorwf	_error_display_tmr^(0+128),w
  8213  174F  1903               	skipnz
  8214  1750  2F57               	goto	l385
  8215                           
  8216                           ;trans_ctrl.c: 177: --error_display_tmr;
  8217  1751  3001               	movlw	1
  8218  1752  02A0               	subwf	_error_display_tmr^(0+128),f
  8219  1753  3000               	movlw	0
  8220  1754  3BA1               	subwfb	(_error_display_tmr+1)^(0+128),f
  8221                           
  8222                           ;trans_ctrl.c: 178: timer_flags1.b5 = 0;
  8223  1755  12FA               	bcf	_timer_flags1,5
  8224                           
  8225                           ;trans_ctrl.c: 179: } else timer_flags1.b5 = 1;
  8226  1756  2F58               	goto	l4366
  8227  1757                     l385:	
  8228  1757  16FA               	bsf	_timer_flags1,5
  8229  1758                     l4366:	
  8230                           
  8231                           ;trans_ctrl.c: 181: if (max_charging_tmr) {
  8232  1758  0835               	movf	(_max_charging_tmr+1)^(0+128),w
  8233  1759  0434               	iorwf	_max_charging_tmr^(0+128),w
  8234  175A  1903               	skipnz
  8235  175B  2F62               	goto	l387
  8236                           
  8237                           ;trans_ctrl.c: 182: --max_charging_tmr;
  8238  175C  3001               	movlw	1
  8239  175D  02B4               	subwf	_max_charging_tmr^(0+128),f
  8240  175E  3000               	movlw	0
  8241  175F  3BB5               	subwfb	(_max_charging_tmr+1)^(0+128),f
  8242                           
  8243                           ;trans_ctrl.c: 183: timer_flags1.b4 = 0;
  8244  1760  127A               	bcf	_timer_flags1,4
  8245                           
  8246                           ;trans_ctrl.c: 184: } else timer_flags1.b4 = 1;
  8247  1761  2F63               	goto	l4372
  8248  1762                     l387:	
  8249  1762  167A               	bsf	_timer_flags1,4
  8250  1763                     l4372:	
  8251                           
  8252                           ;trans_ctrl.c: 186: if (piston_tmr) {
  8253  1763  0020               	movlb	0	; select bank0
  8254  1764  082D               	movf	_piston_tmr+1,w
  8255  1765  042C               	iorwf	_piston_tmr,w
  8256  1766  1903               	skipnz
  8257  1767  2F6E               	goto	l389
  8258                           
  8259                           ;trans_ctrl.c: 187: --piston_tmr;
  8260  1768  3001               	movlw	1
  8261  1769  02AC               	subwf	_piston_tmr,f
  8262  176A  3000               	movlw	0
  8263  176B  3BAD               	subwfb	_piston_tmr+1,f
  8264                           
  8265                           ;trans_ctrl.c: 188: timer_flags1.b3 = 0;
  8266  176C  11FA               	bcf	_timer_flags1,3
  8267                           
  8268                           ;trans_ctrl.c: 189: } else timer_flags1.b3 = 1;
  8269  176D  2F6F               	goto	l4378
  8270  176E                     l389:	
  8271  176E  15FA               	bsf	_timer_flags1,3
  8272  176F                     l4378:	
  8273                           
  8274                           ;trans_ctrl.c: 191: if (feeder4_charging_tmr) {
  8275  176F  0021               	movlb	1	; select bank1
  8276  1770  082B               	movf	(_feeder4_charging_tmr+1)^(0+128),w
  8277  1771  042A               	iorwf	_feeder4_charging_tmr^(0+128),w
  8278  1772  1903               	skipnz
  8279  1773  2F7A               	goto	l391
  8280                           
  8281                           ;trans_ctrl.c: 192: --feeder4_charging_tmr;
  8282  1774  3001               	movlw	1
  8283  1775  02AA               	subwf	_feeder4_charging_tmr^(0+128),f
  8284  1776  3000               	movlw	0
  8285  1777  3BAB               	subwfb	(_feeder4_charging_tmr+1)^(0+128),f
  8286                           
  8287                           ;trans_ctrl.c: 193: timer_flags1.b6 = 0;
  8288  1778  137A               	bcf	_timer_flags1,6
  8289                           
  8290                           ;trans_ctrl.c: 194: } else timer_flags1.b6 = 1;
  8291  1779  2F7B               	goto	l4384
  8292  177A                     l391:	
  8293  177A  177A               	bsf	_timer_flags1,6
  8294  177B                     l4384:	
  8295                           
  8296                           ;trans_ctrl.c: 196: if (mill_shutdown_delay_tmr) {
  8297  177B  0020               	movlb	0	; select bank0
  8298  177C  082B               	movf	_mill_shutdown_delay_tmr+1,w
  8299  177D  042A               	iorwf	_mill_shutdown_delay_tmr,w
  8300  177E  1903               	skipnz
  8301  177F  2F86               	goto	l393
  8302                           
  8303                           ;trans_ctrl.c: 197: --mill_shutdown_delay_tmr;
  8304  1780  3001               	movlw	1
  8305  1781  02AA               	subwf	_mill_shutdown_delay_tmr,f
  8306  1782  3000               	movlw	0
  8307  1783  3BAB               	subwfb	_mill_shutdown_delay_tmr+1,f
  8308                           
  8309                           ;trans_ctrl.c: 198: timer_flags1.b1 = 0;
  8310  1784  10FA               	bcf	_timer_flags1,1
  8311                           
  8312                           ;trans_ctrl.c: 199: } else timer_flags1.b1 = 1;
  8313  1785  2F87               	goto	l4390
  8314  1786                     l393:	
  8315  1786  14FA               	bsf	_timer_flags1,1
  8316  1787                     l4390:	
  8317                           
  8318                           ;trans_ctrl.c: 201: if (feeder2_cleaning_piston_tmr) {
  8319  1787  0021               	movlb	1	; select bank1
  8320  1788  0825               	movf	(_feeder2_cleaning_piston_tmr+1)^(0+128),w
  8321  1789  0424               	iorwf	_feeder2_cleaning_piston_tmr^(0+128),w
  8322  178A  1903               	skipnz
  8323  178B  2F92               	goto	l395
  8324                           
  8325                           ;trans_ctrl.c: 202: --feeder2_cleaning_piston_tmr;
  8326  178C  3001               	movlw	1
  8327  178D  02A4               	subwf	_feeder2_cleaning_piston_tmr^(0+128),f
  8328  178E  3000               	movlw	0
  8329  178F  3BA5               	subwfb	(_feeder2_cleaning_piston_tmr+1)^(0+128),f
  8330                           
  8331                           ;trans_ctrl.c: 203: timer_flags1.b7 = 0;
  8332  1790  13FA               	bcf	_timer_flags1,7
  8333                           
  8334                           ;trans_ctrl.c: 204: } else timer_flags1.b7 = 1;
  8335  1791  2F93               	goto	l4396
  8336  1792                     l395:	
  8337  1792  17FA               	bsf	_timer_flags1,7
  8338  1793                     l4396:	
  8339                           
  8340                           ;trans_ctrl.c: 206: if (feeder_state_change_tmr) {
  8341  1793  0833               	movf	(_feeder_state_change_tmr+1)^(0+128),w
  8342  1794  0432               	iorwf	_feeder_state_change_tmr^(0+128),w
  8343  1795  1903               	skipnz
  8344  1796  2F9D               	goto	l397
  8345                           
  8346                           ;trans_ctrl.c: 207: --feeder_state_change_tmr;
  8347  1797  3001               	movlw	1
  8348  1798  02B2               	subwf	_feeder_state_change_tmr^(0+128),f
  8349  1799  3000               	movlw	0
  8350  179A  3BB3               	subwfb	(_feeder_state_change_tmr+1)^(0+128),f
  8351                           
  8352                           ;trans_ctrl.c: 208: timer_flags1.b2 = 0;
  8353  179B  117A               	bcf	_timer_flags1,2
  8354                           
  8355                           ;trans_ctrl.c: 209: } else timer_flags1.b2 = 1;
  8356  179C  2F9E               	goto	l4402
  8357  179D                     l397:	
  8358  179D  157A               	bsf	_timer_flags1,2
  8359  179E                     l4402:	
  8360                           
  8361                           ;trans_ctrl.c: 211: if (vp1_control_delay_tmr) {
  8362  179E  0839               	movf	(_vp1_control_delay_tmr+1)^(0+128),w
  8363  179F  0438               	iorwf	_vp1_control_delay_tmr^(0+128),w
  8364  17A0  1903               	skipnz
  8365  17A1  2FA9               	goto	l399
  8366                           
  8367                           ;trans_ctrl.c: 212: --vp1_control_delay_tmr;
  8368  17A2  3001               	movlw	1
  8369  17A3  02B8               	subwf	_vp1_control_delay_tmr^(0+128),f
  8370  17A4  3000               	movlw	0
  8371  17A5  3BB9               	subwfb	(_vp1_control_delay_tmr+1)^(0+128),f
  8372                           
  8373                           ;trans_ctrl.c: 213: timer_flags2.b5 = 0;
  8374  17A6  0020               	movlb	0	; select bank0
  8375  17A7  12E8               	bcf	_timer_flags2,5
  8376                           
  8377                           ;trans_ctrl.c: 214: } else timer_flags2.b5 = 1;
  8378  17A8  2FAB               	goto	l4408
  8379  17A9                     l399:	
  8380  17A9  0020               	movlb	0	; select bank0
  8381  17AA  16E8               	bsf	_timer_flags2,5
  8382  17AB                     l4408:	
  8383                           
  8384                           ;trans_ctrl.c: 216: if (feeder1_control_delay_tmr) {
  8385  17AB  0021               	movlb	1	; select bank1
  8386  17AC  0823               	movf	(_feeder1_control_delay_tmr+1)^(0+128),w
  8387  17AD  0422               	iorwf	_feeder1_control_delay_tmr^(0+128),w
  8388  17AE  1903               	skipnz
  8389  17AF  2FB7               	goto	l401
  8390                           
  8391                           ;trans_ctrl.c: 217: --feeder1_control_delay_tmr;
  8392  17B0  3001               	movlw	1
  8393  17B1  02A2               	subwf	_feeder1_control_delay_tmr^(0+128),f
  8394  17B2  3000               	movlw	0
  8395  17B3  3BA3               	subwfb	(_feeder1_control_delay_tmr+1)^(0+128),f
  8396                           
  8397                           ;trans_ctrl.c: 218: timer_flags2.b6 = 0;
  8398  17B4  0020               	movlb	0	; select bank0
  8399  17B5  1368               	bcf	_timer_flags2,6
  8400                           
  8401                           ;trans_ctrl.c: 219: } else timer_flags2.b6 = 1;
  8402  17B6  2FB9               	goto	l4414
  8403  17B7                     l401:	
  8404  17B7  0020               	movlb	0	; select bank0
  8405  17B8  1768               	bsf	_timer_flags2,6
  8406  17B9                     l4414:	
  8407                           
  8408                           ;trans_ctrl.c: 221: if (feeder2_control_delay_tmr) {
  8409  17B9  0021               	movlb	1	; select bank1
  8410  17BA  0827               	movf	(_feeder2_control_delay_tmr+1)^(0+128),w
  8411  17BB  0426               	iorwf	_feeder2_control_delay_tmr^(0+128),w
  8412  17BC  1903               	skipnz
  8413  17BD  2FC5               	goto	l403
  8414                           
  8415                           ;trans_ctrl.c: 222: --feeder2_control_delay_tmr;
  8416  17BE  3001               	movlw	1
  8417  17BF  02A6               	subwf	_feeder2_control_delay_tmr^(0+128),f
  8418  17C0  3000               	movlw	0
  8419  17C1  3BA7               	subwfb	(_feeder2_control_delay_tmr+1)^(0+128),f
  8420                           
  8421                           ;trans_ctrl.c: 223: timer_flags2.b7 = 0;
  8422  17C2  0020               	movlb	0	; select bank0
  8423  17C3  13E8               	bcf	_timer_flags2,7
  8424                           
  8425                           ;trans_ctrl.c: 224: } else timer_flags2.b7 = 1;
  8426  17C4  2FC7               	goto	l4420
  8427  17C5                     l403:	
  8428  17C5  0020               	movlb	0	; select bank0
  8429  17C6  17E8               	bsf	_timer_flags2,7
  8430  17C7                     l4420:	
  8431                           
  8432                           ;trans_ctrl.c: 226: if (feeder3_control_delay_tmr) {
  8433  17C7  0021               	movlb	1	; select bank1
  8434  17C8  0829               	movf	(_feeder3_control_delay_tmr+1)^(0+128),w
  8435  17C9  0428               	iorwf	_feeder3_control_delay_tmr^(0+128),w
  8436  17CA  1903               	skipnz
  8437  17CB  2FD3               	goto	l405
  8438                           
  8439                           ;trans_ctrl.c: 227: --feeder3_control_delay_tmr;
  8440  17CC  3001               	movlw	1
  8441  17CD  02A8               	subwf	_feeder3_control_delay_tmr^(0+128),f
  8442  17CE  3000               	movlw	0
  8443  17CF  3BA9               	subwfb	(_feeder3_control_delay_tmr+1)^(0+128),f
  8444                           
  8445                           ;trans_ctrl.c: 228: timer_flags3.b0 = 0;
  8446  17D0  0020               	movlb	0	; select bank0
  8447  17D1  1069               	bcf	_timer_flags3,0
  8448                           
  8449                           ;trans_ctrl.c: 229: } else timer_flags3.b0 = 1;
  8450  17D2  2FD5               	goto	l4426
  8451  17D3                     l405:	
  8452  17D3  0020               	movlb	0	; select bank0
  8453  17D4  1469               	bsf	_timer_flags3,0
  8454  17D5                     l4426:	
  8455                           
  8456                           ;trans_ctrl.c: 231: if (feeder4_control_delay_tmr) {
  8457  17D5  0021               	movlb	1	; select bank1
  8458  17D6  082D               	movf	(_feeder4_control_delay_tmr+1)^(0+128),w
  8459  17D7  042C               	iorwf	_feeder4_control_delay_tmr^(0+128),w
  8460  17D8  1903               	skipnz
  8461  17D9  2FE1               	goto	l407
  8462                           
  8463                           ;trans_ctrl.c: 232: --feeder4_control_delay_tmr;
  8464  17DA  3001               	movlw	1
  8465  17DB  02AC               	subwf	_feeder4_control_delay_tmr^(0+128),f
  8466  17DC  3000               	movlw	0
  8467  17DD  3BAD               	subwfb	(_feeder4_control_delay_tmr+1)^(0+128),f
  8468                           
  8469                           ;trans_ctrl.c: 233: timer_flags3.b1 = 0;
  8470  17DE  0020               	movlb	0	; select bank0
  8471  17DF  10E9               	bcf	_timer_flags3,1
  8472                           
  8473                           ;trans_ctrl.c: 234: } else timer_flags3.b1 = 1;
  8474  17E0  2FE3               	goto	l4432
  8475  17E1                     l407:	
  8476  17E1  0020               	movlb	0	; select bank0
  8477  17E2  14E9               	bsf	_timer_flags3,1
  8478  17E3                     l4432:	
  8479                           
  8480                           ;trans_ctrl.c: 236: if (feeder5_control_delay_tmr) {
  8481  17E3  0021               	movlb	1	; select bank1
  8482  17E4  082F               	movf	(_feeder5_control_delay_tmr+1)^(0+128),w
  8483  17E5  042E               	iorwf	_feeder5_control_delay_tmr^(0+128),w
  8484  17E6  1903               	skipnz
  8485  17E7  2FEF               	goto	l409
  8486                           
  8487                           ;trans_ctrl.c: 237: --feeder5_control_delay_tmr;
  8488  17E8  3001               	movlw	1
  8489  17E9  02AE               	subwf	_feeder5_control_delay_tmr^(0+128),f
  8490  17EA  3000               	movlw	0
  8491  17EB  3BAF               	subwfb	(_feeder5_control_delay_tmr+1)^(0+128),f
  8492                           
  8493                           ;trans_ctrl.c: 238: timer_flags3.b2 = 0;
  8494  17EC  0020               	movlb	0	; select bank0
  8495  17ED  1169               	bcf	_timer_flags3,2
  8496                           
  8497                           ;trans_ctrl.c: 239: } else timer_flags3.b2 = 1;
  8498  17EE  2FF1               	goto	l4438
  8499  17EF                     l409:	
  8500  17EF  0020               	movlb	0	; select bank0
  8501  17F0  1569               	bsf	_timer_flags3,2
  8502  17F1                     l4438:	
  8503                           
  8504                           ;trans_ctrl.c: 241: if (feeder_coex_control_delay_tmr) {
  8505  17F1  0021               	movlb	1	; select bank1
  8506  17F2  0831               	movf	(_feeder_coex_control_delay_tmr+1)^(0+128),w
  8507  17F3  0430               	iorwf	_feeder_coex_control_delay_tmr^(0+128),w
  8508  17F4  1903               	skipnz
  8509  17F5  2FFD               	goto	l411
  8510                           
  8511                           ;trans_ctrl.c: 242: --feeder_coex_control_delay_tmr;
  8512  17F6  3001               	movlw	1
  8513  17F7  02B0               	subwf	_feeder_coex_control_delay_tmr^(0+128),f
  8514  17F8  3000               	movlw	0
  8515  17F9  3BB1               	subwfb	(_feeder_coex_control_delay_tmr+1)^(0+128),f
  8516                           
  8517                           ;trans_ctrl.c: 243: timer_flags3.b3 = 0;
  8518  17FA  0020               	movlb	0	; select bank0
  8519  17FB  11E9               	bcf	_timer_flags3,3
  8520                           
  8521                           ;trans_ctrl.c: 244: } else timer_flags3.b3 = 1;
  8522  17FC  0008               	return
  8523  17FD                     l411:	
  8524  17FD  0020               	movlb	0	; select bank0
  8525  17FE  15E9               	bsf	_timer_flags3,3
  8526  17FF  0008               	return
  8527  1800                     __end_of_CheckTimer:	
  8528                           
  8529                           	psect	text20
  8530  1675                     __ptext20:	
  8531 ;; *************** function _CheckSafety *****************
  8532 ;; Defined at:
  8533 ;;		line 961 in file "trans_ctrl.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;		None
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;		None
  8538 ;; Return value:  Size  Location     Type
  8539 ;;		None               void
  8540 ;; Registers used:
  8541 ;;		wreg, status,2, status,0
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8547 ;;      Params:         0       0       0       0       0       0       0       0
  8548 ;;      Locals:         0       0       0       0       0       0       0       0
  8549 ;;      Temps:          1       0       0       0       0       0       0       0
  8550 ;;      Totals:         1       0       0       0       0       0       0       0
  8551 ;;Total ram usage:        1 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:    2
  8554 ;; This function calls:
  8555 ;;		Nothing
  8556 ;; This function is called by:
  8557 ;;		_main
  8558 ;; This function uses a non-reentrant model
  8559 ;;
  8560                           
  8561                           
  8562                           ;psect for function _CheckSafety
  8563  1675                     _CheckSafety:	
  8564                           
  8565                           ;trans_ctrl.c: 963: if (!(input_0_7.b4 == 0)) {
  8566                           
  8567                           ;incstack = 0
  8568                           ; Regs used in _CheckSafety: [wreg+status,2+status,0]
  8569  1675  0020               	movlb	0	; select bank0
  8570  1676  1E57               	btfss	_input_0_7,4
  8571  1677  2E8B               	goto	l742
  8572                           
  8573                           ;trans_ctrl.c: 964: vacum_pump1_state = VP1_OFF;
  8574  1678  01EB               	clrf	_vacum_pump1_state
  8575                           
  8576                           ;trans_ctrl.c: 965: feeder1_state = FEEDER1_OFF;
  8577  1679  01C7               	clrf	_feeder1_state
  8578                           
  8579                           ;trans_ctrl.c: 966: feeder2_state = FEEDER2_OFF;
  8580  167A  01CA               	clrf	_feeder2_state
  8581                           
  8582                           ;trans_ctrl.c: 967: feeder3_state = FEEDER3_OFF;
  8583  167B  01CD               	clrf	_feeder3_state
  8584                           
  8585                           ;trans_ctrl.c: 968: feeder4_state = FEEDER4_OFF;
  8586  167C  01D0               	clrf	_feeder4_state
  8587                           
  8588                           ;trans_ctrl.c: 969: feeder5_state = FEEDER5_OFF;
  8589  167D  01D3               	clrf	_feeder5_state
  8590                           
  8591                           ;trans_ctrl.c: 970: feeder_coex_state = FEEDER_COEX_OFF;
  8592  167E  01D6               	clrf	_feeder_coex_state
  8593                           
  8594                           ;trans_ctrl.c: 971: if (systeml_flags1.b3 && systeml_flags1.b2) (output_8_15.b6 = 1);
  8595  167F  19F9               	btfsc	_systeml_flags1,3
  8596  1680  1D79               	btfss	_systeml_flags1,2
  8597  1681  2E84               	goto	l743
  8598  1682  175C               	bsf	_output_8_15,6
  8599  1683  2E85               	goto	l4454
  8600  1684                     l743:	
  8601                           
  8602                           ;trans_ctrl.c: 972: else (output_8_15.b6 = 0);
  8603  1684  135C               	bcf	_output_8_15,6
  8604  1685                     l4454:	
  8605                           
  8606                           ;trans_ctrl.c: 973: ((systeml_flags1._byte &= 0x0f),systeml_flags1.b6 = 1);
  8607  1685  300F               	movlw	15
  8608  1686  00F2               	movwf	??_CheckSafety
  8609  1687  0872               	movf	??_CheckSafety,w
  8610  1688  05F9               	andwf	_systeml_flags1,f
  8611  1689  1779               	bsf	_systeml_flags1,6
  8612                           
  8613                           ;trans_ctrl.c: 974: } else if ((vacum_pump1_flags2.b0 == 1) || (vacum_pump1_flags2.b1 ==
      +                           1) || (vacum_pump1_flags2.b2 == 1) || (feeder1_flags1.b1 == 1) || (feeder2_flags1.b1 ==
      +                           1) || (feeder3_flags1.b1 == 1) || (feeder4_flags1.b0 == 1) || (feeder5_flags1.b1 == 1) 
      +                          || (fe
  8614  168A  2EB5               	goto	l4502
  8615  168B                     l742:	
  8616  168B  1C6A               	btfss	_vacum_pump1_flags2,0
  8617  168C  18EA               	btfsc	_vacum_pump1_flags2,1
  8618  168D  2EA6               	goto	L41
  8619  168E  1D6A               	btfss	_vacum_pump1_flags2,2
  8620  168F  18C5               	btfsc	_feeder1_flags1,1
  8621  1690  2EA6               	goto	L41
  8622  1691  1CC8               	btfss	_feeder2_flags1,1
  8623  1692  18CB               	btfsc	_feeder3_flags1,1
  8624  1693  2EA6               	goto	L41
  8625  1694  1C4E               	btfss	_feeder4_flags1,0
  8626  1695  18D1               	btfsc	_feeder5_flags1,1
  8627  1696  2EA6               	goto	L41
  8628  1697  18D4               	btfsc	_feeder_coex_flags1,1
  8629  1698  2EA6               	goto	L41
  8630                           
  8631                           ;trans_ctrl.c: 979: } else if ((cyclon_flags1.b0 == 1) || (feeder1_flags1.b0 == 1) || (f
      +                          eeder2_flags1.b0 == 1) || (feeder3_flags1.b0 == 1) || (feeder4_flags1.b1 == 1) || (feede
      +                          r5_flags1.b0 == 1) || (feeder_coex_flags1.b0 == 1)) {
  8632                           
  8633                           ;trans_ctrl.c: 978: ((systeml_flags1._byte &= 0x0f),systeml_flags1.b7 = 1);
  8634                           
  8635                           ;trans_ctrl.c: 977: (output_8_15.b6 = 1);
  8636  1699  1C41               	btfss	_cyclon_flags1,0
  8637  169A  1845               	btfsc	_feeder1_flags1,0
  8638  169B  2EA4               	goto	l752
  8639  169C  1C48               	btfss	_feeder2_flags1,0
  8640  169D  184B               	btfsc	_feeder3_flags1,0
  8641  169E  2EA4               	goto	l752
  8642  169F  1CCE               	btfss	_feeder4_flags1,1
  8643  16A0  1851               	btfsc	_feeder5_flags1,0
  8644  16A1  2EA4               	goto	l752
  8645  16A2  1C54               	btfss	_feeder_coex_flags1,0
  8646  16A3  2EAF               	goto	l4496
  8647  16A4                     l752:	
  8648                           
  8649                           ;trans_ctrl.c: 982: if (systeml_flags1.b3) (output_8_15.b6 = 1);
  8650  16A4  1DF9               	btfss	_systeml_flags1,3
  8651  16A5  2EA8               	goto	l753
  8652  16A6                     L41:	
  8653  16A6  175C               	bsf	_output_8_15,6
  8654  16A7  2EA9               	goto	l4492
  8655  16A8                     l753:	
  8656                           
  8657                           ;trans_ctrl.c: 983: else (output_8_15.b6 = 0);
  8658  16A8  135C               	bcf	_output_8_15,6
  8659  16A9                     l4492:	
  8660                           
  8661                           ;trans_ctrl.c: 984: ((systeml_flags1._byte &= 0x0f),systeml_flags1.b7 = 1);
  8662  16A9  300F               	movlw	15
  8663  16AA  00F2               	movwf	??_CheckSafety
  8664  16AB  0872               	movf	??_CheckSafety,w
  8665  16AC  05F9               	andwf	_systeml_flags1,f
  8666  16AD  17F9               	bsf	_systeml_flags1,7
  8667                           
  8668                           ;trans_ctrl.c: 985: } else {
  8669  16AE  2EB5               	goto	l4502
  8670  16AF                     l4496:	
  8671                           
  8672                           ;trans_ctrl.c: 986: ((systeml_flags1._byte &= 0x0f),systeml_flags1.b5 = 1);
  8673  16AF  300F               	movlw	15
  8674  16B0  00F2               	movwf	??_CheckSafety
  8675  16B1  0872               	movf	??_CheckSafety,w
  8676  16B2  05F9               	andwf	_systeml_flags1,f
  8677  16B3  16F9               	bsf	_systeml_flags1,5
  8678                           
  8679                           ;trans_ctrl.c: 987: (output_8_15.b6 = 0);
  8680  16B4  135C               	bcf	_output_8_15,6
  8681  16B5                     l4502:	
  8682                           
  8683                           ;trans_ctrl.c: 988: }
  8684                           ;trans_ctrl.c: 990: if ((feeder1_flags1.b0 == 1) || (feeder1_flags1.b1 == 1)) {
  8685  16B5  1845               	btfsc	_feeder1_flags1,0
  8686  16B6  2EB9               	goto	l758
  8687  16B7  1CC5               	btfss	_feeder1_flags1,1
  8688  16B8  2EBD               	goto	l756
  8689  16B9                     l758:	
  8690                           
  8691                           ;trans_ctrl.c: 991: if (systeml_flags1.b2) (output_8_15.b4 = 1);
  8692  16B9  1D79               	btfss	_systeml_flags1,2
  8693  16BA  2EBD               	goto	l756
  8694  16BB  165C               	bsf	_output_8_15,4
  8695  16BC  2EBE               	goto	l761
  8696  16BD                     l756:	
  8697                           ;trans_ctrl.c: 993: } else (output_8_15.b4 = 0);
  8698                           
  8699                           ;trans_ctrl.c: 992: else (output_8_15.b4 = 0);
  8700                           
  8701  16BD  125C               	bcf	_output_8_15,4
  8702  16BE                     l761:	
  8703                           
  8704                           ;trans_ctrl.c: 995: if ((feeder4_flags1.b0 == 1) || (feeder4_flags1.b1 == 1)) {
  8705  16BE  184E               	btfsc	_feeder4_flags1,0
  8706  16BF  2EC2               	goto	l764
  8707  16C0  1CCE               	btfss	_feeder4_flags1,1
  8708  16C1  2EC8               	goto	l762
  8709  16C2                     l764:	
  8710                           
  8711                           ;trans_ctrl.c: 996: if (systeml_flags1.b2) (output_8_15.b7 = 1);
  8712  16C2  1D79               	btfss	_systeml_flags1,2
  8713  16C3  2EC6               	goto	l765
  8714  16C4  17DC               	bsf	_output_8_15,7
  8715  16C5  0008               	return
  8716  16C6                     l765:	
  8717                           
  8718                           ;trans_ctrl.c: 997: else (output_8_15.b7 = 0);
  8719  16C6  13DC               	bcf	_output_8_15,7
  8720                           
  8721                           ;trans_ctrl.c: 998: } else (output_8_15.b7 = 0);
  8722  16C7  0008               	return
  8723  16C8                     l762:	
  8724  16C8  13DC               	bcf	_output_8_15,7
  8725  16C9  0008               	return
  8726  16CA                     __end_of_CheckSafety:	
  8727                           
  8728                           	psect	text21
  8729  0912                     __ptext21:	
  8730 ;; *************** function _CheckDigitalInput *****************
  8731 ;; Defined at:
  8732 ;;		line 249 in file "trans_ctrl.c"
  8733 ;; Parameters:    Size  Location     Type
  8734 ;;		None
  8735 ;; Auto vars:     Size  Location     Type
  8736 ;;		None
  8737 ;; Return value:  Size  Location     Type
  8738 ;;		None               void
  8739 ;; Registers used:
  8740 ;;		wreg, status,2, status,0, pclath, cstack
  8741 ;; Tracked objects:
  8742 ;;		On entry : 0/0
  8743 ;;		On exit  : 0/0
  8744 ;;		Unchanged: 0/0
  8745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8746 ;;      Params:         0       0       0       0       0       0       0       0
  8747 ;;      Locals:         0       0       0       0       0       0       0       0
  8748 ;;      Temps:          2       0       0       0       0       0       0       0
  8749 ;;      Totals:         2       0       0       0       0       0       0       0
  8750 ;;Total ram usage:        2 bytes
  8751 ;; Hardware stack levels used:    1
  8752 ;; Hardware stack levels required when called:    3
  8753 ;; This function calls:
  8754 ;;		_HC595_Shift
  8755 ;; This function is called by:
  8756 ;;		_main
  8757 ;; This function uses a non-reentrant model
  8758 ;;
  8759                           
  8760                           
  8761                           ;psect for function _CheckDigitalInput
  8762  0912                     _CheckDigitalInput:	
  8763                           
  8764                           ;trans_ctrl.c: 250: (PEIE = 0);
  8765                           
  8766                           ;incstack = 0
  8767                           ; Regs used in _CheckDigitalInput: [wreg+status,2+status,0+pclath+cstack]
  8768  0912  130B               	bcf	11,6	;volatile
  8769                           
  8770                           ;trans_ctrl.c: 251: (TRISD = 0xff);
  8771  0913  30FF               	movlw	255
  8772  0914  0021               	movlb	1	; select bank1
  8773  0915  008F               	movwf	15	;volatile
  8774                           
  8775                           ;trans_ctrl.c: 252: (hc595_shift.b0 = 0, HC595_Shift());
  8776  0916  0020               	movlb	0	; select bank0
  8777  0917  106E               	bcf	_hc595_shift,0
  8778  0918  3195  25F5  3189   	fcall	_HC595_Shift
  8779                           
  8780                           ;trans_ctrl.c: 253: input_0_7._byte = PORTD;
  8781  091B  0020               	movlb	0	; select bank0
  8782  091C  080F               	movf	15,w	;volatile
  8783  091D  00F2               	movwf	??_CheckDigitalInput
  8784  091E  0872               	movf	??_CheckDigitalInput,w
  8785  091F  00D7               	movwf	_input_0_7
  8786                           
  8787                           ;trans_ctrl.c: 254: (hc595_shift.b0 = 1, HC595_Shift());
  8788  0920  146E               	bsf	_hc595_shift,0
  8789  0921  3195  25F5  3189   	fcall	_HC595_Shift
  8790                           
  8791                           ;trans_ctrl.c: 255: (hc595_shift.b1 = 0, HC595_Shift());
  8792  0924  0020               	movlb	0	; select bank0
  8793  0925  10EE               	bcf	_hc595_shift,1
  8794  0926  3195  25F5  3189   	fcall	_HC595_Shift
  8795                           
  8796                           ;trans_ctrl.c: 256: input_8_15._byte = PORTD;
  8797  0929  0020               	movlb	0	; select bank0
  8798  092A  080F               	movf	15,w	;volatile
  8799  092B  00F2               	movwf	??_CheckDigitalInput
  8800  092C  0872               	movf	??_CheckDigitalInput,w
  8801  092D  00DA               	movwf	_input_8_15
  8802                           
  8803                           ;trans_ctrl.c: 257: (hc595_shift.b1 = 1, HC595_Shift());
  8804  092E  14EE               	bsf	_hc595_shift,1
  8805  092F  3195  25F5  3189   	fcall	_HC595_Shift
  8806                           
  8807                           ;trans_ctrl.c: 258: (hc595_shift.b2 = 0, HC595_Shift());
  8808  0932  0020               	movlb	0	; select bank0
  8809  0933  116E               	bcf	_hc595_shift,2
  8810  0934  3195  25F5  3189   	fcall	_HC595_Shift
  8811                           
  8812                           ;trans_ctrl.c: 259: input_16_23._byte = PORTD;
  8813  0937  0020               	movlb	0	; select bank0
  8814  0938  080F               	movf	15,w	;volatile
  8815  0939  00F2               	movwf	??_CheckDigitalInput
  8816  093A  0872               	movf	??_CheckDigitalInput,w
  8817  093B  00D8               	movwf	_input_16_23
  8818                           
  8819                           ;trans_ctrl.c: 260: (hc595_shift.b2 = 1, HC595_Shift());
  8820  093C  156E               	bsf	_hc595_shift,2
  8821  093D  3195  25F5  3189   	fcall	_HC595_Shift
  8822                           
  8823                           ;trans_ctrl.c: 261: (hc595_shift.b3 = 0, HC595_Shift());
  8824  0940  0020               	movlb	0	; select bank0
  8825  0941  11EE               	bcf	_hc595_shift,3
  8826  0942  3195  25F5  3189   	fcall	_HC595_Shift
  8827                           
  8828                           ;trans_ctrl.c: 262: input_24_31._byte = PORTD;
  8829  0945  0020               	movlb	0	; select bank0
  8830  0946  080F               	movf	15,w	;volatile
  8831  0947  00F2               	movwf	??_CheckDigitalInput
  8832  0948  0872               	movf	??_CheckDigitalInput,w
  8833  0949  00D9               	movwf	_input_24_31
  8834                           
  8835                           ;trans_ctrl.c: 263: (hc595_shift.b3 = 1, HC595_Shift());
  8836  094A  15EE               	bsf	_hc595_shift,3
  8837  094B  3195  25F5  3189   	fcall	_HC595_Shift
  8838                           
  8839                           ;trans_ctrl.c: 264: (PEIE = 1);
  8840  094E  170B               	bsf	11,6	;volatile
  8841                           
  8842                           ;trans_ctrl.c: 265: if (system_flags2.b1 != RE2) {
  8843  094F  0020               	movlb	0	; select bank0
  8844  0950  0C62               	rrf	_system_flags2,w
  8845  0951  3901               	andlw	1
  8846  0952  00F2               	movwf	??_CheckDigitalInput
  8847  0953  3000               	movlw	0
  8848  0954  1910               	btfsc	16,2	;volatile
  8849  0955  3001               	movlw	1
  8850  0956  0672               	xorwf	??_CheckDigitalInput,w
  8851  0957  1903               	skipnz
  8852  0958  2962               	goto	l415
  8853                           
  8854                           ;trans_ctrl.c: 266: system_flags2.b1 = RE2;
  8855  0959  10E2               	bcf	_system_flags2,1
  8856  095A  1D10               	btfss	16,2	;volatile
  8857  095B  295D               	goto	u5865
  8858  095C  14E2               	bsf	_system_flags2,1
  8859  095D                     u5865:	
  8860                           
  8861                           ;trans_ctrl.c: 267: if ((RE2 == 1)) (system_flags2.b0 = 1);
  8862  095D  0020               	movlb	0	; select bank0
  8863  095E  1D10               	btfss	16,2	;volatile
  8864  095F  2962               	goto	l415
  8865  0960  1462               	bsf	_system_flags2,0
  8866  0961  2963               	goto	l4556
  8867  0962                     l415:	
  8868                           ;trans_ctrl.c: 269: } else (system_flags2.b0 = 0);
  8869                           
  8870                           ;trans_ctrl.c: 268: else (system_flags2.b0 = 0);
  8871                           
  8872  0962  1062               	bcf	_system_flags2,0
  8873  0963                     l4556:	
  8874                           
  8875                           ;trans_ctrl.c: 271: if (taster_flags2.b0 != input_0_7.b3) {
  8876  0963  0C57               	rrf	_input_0_7,w
  8877  0964  00F2               	movwf	??_CheckDigitalInput
  8878  0965  0CF2               	rrf	??_CheckDigitalInput,f
  8879  0966  0C72               	rrf	??_CheckDigitalInput,w
  8880  0967  3901               	andlw	1
  8881  0968  00F3               	movwf	??_CheckDigitalInput+1
  8882  0969  0864               	movf	_taster_flags2,w
  8883  096A  3901               	andlw	1
  8884  096B  0673               	xorwf	??_CheckDigitalInput+1,w
  8885  096C  1903               	skipnz
  8886  096D  2977               	goto	l419
  8887                           
  8888                           ;trans_ctrl.c: 272: taster_flags2.b0 = input_0_7.b3;
  8889  096E  1064               	bcf	_taster_flags2,0
  8890  096F  1DD7               	btfss	_input_0_7,3
  8891  0970  2972               	goto	u5895
  8892  0971  1464               	bsf	_taster_flags2,0
  8893  0972                     u5895:	
  8894                           
  8895                           ;trans_ctrl.c: 273: if ((input_0_7.b3 == 0)) (taster_flags1.b0 = 1);
  8896  0972  0020               	movlb	0	; select bank0
  8897  0973  19D7               	btfsc	_input_0_7,3
  8898  0974  2977               	goto	l419
  8899  0975  1463               	bsf	_taster_flags1,0
  8900  0976  2978               	goto	l4562
  8901  0977                     l419:	
  8902                           ;trans_ctrl.c: 275: } else (taster_flags1.b0 = 0);
  8903                           
  8904                           ;trans_ctrl.c: 274: else (taster_flags1.b0 = 0);
  8905                           
  8906  0977  1063               	bcf	_taster_flags1,0
  8907  0978                     l4562:	
  8908                           
  8909                           ;trans_ctrl.c: 277: if (taster_flags2.b2 != input_8_15.b1) {
  8910  0978  0C5A               	rrf	_input_8_15,w
  8911  0979  3901               	andlw	1
  8912  097A  00F2               	movwf	??_CheckDigitalInput
  8913  097B  0C64               	rrf	_taster_flags2,w
  8914  097C  0C89               	rrf	9,f
  8915  097D  3901               	andlw	1
  8916  097E  0672               	xorwf	??_CheckDigitalInput,w
  8917  097F  1903               	skipnz
  8918  0980  298A               	goto	l423
  8919                           
  8920                           ;trans_ctrl.c: 278: taster_flags2.b2 = input_8_15.b1;
  8921  0981  1164               	bcf	_taster_flags2,2
  8922  0982  1CDA               	btfss	_input_8_15,1
  8923  0983  2985               	goto	u5925
  8924  0984  1564               	bsf	_taster_flags2,2
  8925  0985                     u5925:	
  8926                           
  8927                           ;trans_ctrl.c: 279: if ((input_8_15.b1 == 0)) (taster_flags1.b2 = 1);
  8928  0985  0020               	movlb	0	; select bank0
  8929  0986  18DA               	btfsc	_input_8_15,1
  8930  0987  298A               	goto	l423
  8931  0988  1563               	bsf	_taster_flags1,2
  8932  0989  298B               	goto	l4568
  8933  098A                     l423:	
  8934                           ;trans_ctrl.c: 281: } else (taster_flags1.b2 = 0);
  8935                           
  8936                           ;trans_ctrl.c: 280: else (taster_flags1.b2 = 0);
  8937                           
  8938  098A  1163               	bcf	_taster_flags1,2
  8939  098B                     l4568:	
  8940                           
  8941                           ;trans_ctrl.c: 283: if (taster_flags2.b3 != input_8_15.b2) {
  8942  098B  0C5A               	rrf	_input_8_15,w
  8943  098C  0C89               	rrf	9,f
  8944  098D  3901               	andlw	1
  8945  098E  00F2               	movwf	??_CheckDigitalInput
  8946  098F  0C64               	rrf	_taster_flags2,w
  8947  0990  00F3               	movwf	??_CheckDigitalInput+1
  8948  0991  0CF3               	rrf	??_CheckDigitalInput+1,f
  8949  0992  0C73               	rrf	??_CheckDigitalInput+1,w
  8950  0993  3901               	andlw	1
  8951  0994  0672               	xorwf	??_CheckDigitalInput,w
  8952  0995  1903               	skipnz
  8953  0996  29A0               	goto	l427
  8954                           
  8955                           ;trans_ctrl.c: 284: taster_flags2.b3 = input_8_15.b2;
  8956  0997  11E4               	bcf	_taster_flags2,3
  8957  0998  1D5A               	btfss	_input_8_15,2
  8958  0999  299B               	goto	u5955
  8959  099A  15E4               	bsf	_taster_flags2,3
  8960  099B                     u5955:	
  8961                           
  8962                           ;trans_ctrl.c: 285: if ((input_8_15.b2 == 0)) (taster_flags1.b3 = 1);
  8963  099B  0020               	movlb	0	; select bank0
  8964  099C  195A               	btfsc	_input_8_15,2
  8965  099D  29A0               	goto	l427
  8966  099E  15E3               	bsf	_taster_flags1,3
  8967  099F  29A1               	goto	l4574
  8968  09A0                     l427:	
  8969                           ;trans_ctrl.c: 287: } else (taster_flags1.b3 = 0);
  8970                           
  8971                           ;trans_ctrl.c: 286: else (taster_flags1.b3 = 0);
  8972                           
  8973  09A0  11E3               	bcf	_taster_flags1,3
  8974  09A1                     l4574:	
  8975                           
  8976                           ;trans_ctrl.c: 289: if (taster_flags2.b4 != input_8_15.b3) {
  8977  09A1  0C5A               	rrf	_input_8_15,w
  8978  09A2  00F2               	movwf	??_CheckDigitalInput
  8979  09A3  0CF2               	rrf	??_CheckDigitalInput,f
  8980  09A4  0C72               	rrf	??_CheckDigitalInput,w
  8981  09A5  3901               	andlw	1
  8982  09A6  00F3               	movwf	??_CheckDigitalInput+1
  8983  09A7  0E64               	swapf	_taster_flags2,w
  8984  09A8  3901               	andlw	1
  8985  09A9  0673               	xorwf	??_CheckDigitalInput+1,w
  8986  09AA  1903               	skipnz
  8987  09AB  29B5               	goto	l431
  8988                           
  8989                           ;trans_ctrl.c: 290: taster_flags2.b4 = input_8_15.b3;
  8990  09AC  1264               	bcf	_taster_flags2,4
  8991  09AD  1DDA               	btfss	_input_8_15,3
  8992  09AE  29B0               	goto	u5985
  8993  09AF  1664               	bsf	_taster_flags2,4
  8994  09B0                     u5985:	
  8995                           
  8996                           ;trans_ctrl.c: 291: if ((input_8_15.b3 == 0)) (taster_flags1.b4 = 1);
  8997  09B0  0020               	movlb	0	; select bank0
  8998  09B1  19DA               	btfsc	_input_8_15,3
  8999  09B2  29B5               	goto	l431
  9000  09B3  1663               	bsf	_taster_flags1,4
  9001  09B4  29B6               	goto	l4580
  9002  09B5                     l431:	
  9003                           ;trans_ctrl.c: 293: } else (taster_flags1.b4 = 0);
  9004                           
  9005                           ;trans_ctrl.c: 292: else (taster_flags1.b4 = 0);
  9006                           
  9007  09B5  1263               	bcf	_taster_flags1,4
  9008  09B6                     l4580:	
  9009                           
  9010                           ;trans_ctrl.c: 295: if (taster_flags2.b5 != input_8_15.b4) {
  9011  09B6  0E5A               	swapf	_input_8_15,w
  9012  09B7  3901               	andlw	1
  9013  09B8  00F2               	movwf	??_CheckDigitalInput
  9014  09B9  0E64               	swapf	_taster_flags2,w
  9015  09BA  0C89               	rrf	9,f
  9016  09BB  3901               	andlw	1
  9017  09BC  0672               	xorwf	??_CheckDigitalInput,w
  9018  09BD  1903               	skipnz
  9019  09BE  29C8               	goto	l435
  9020                           
  9021                           ;trans_ctrl.c: 296: taster_flags2.b5 = input_8_15.b4;
  9022  09BF  12E4               	bcf	_taster_flags2,5
  9023  09C0  1E5A               	btfss	_input_8_15,4
  9024  09C1  29C3               	goto	u6015
  9025  09C2  16E4               	bsf	_taster_flags2,5
  9026  09C3                     u6015:	
  9027                           
  9028                           ;trans_ctrl.c: 297: if ((input_8_15.b4 == 0)) (taster_flags1.b5 = 1);
  9029  09C3  0020               	movlb	0	; select bank0
  9030  09C4  1A5A               	btfsc	_input_8_15,4
  9031  09C5  29C8               	goto	l435
  9032  09C6  16E3               	bsf	_taster_flags1,5
  9033  09C7  29C9               	goto	l4586
  9034  09C8                     l435:	
  9035                           ;trans_ctrl.c: 299: } else (taster_flags1.b5 = 0);
  9036                           
  9037                           ;trans_ctrl.c: 298: else (taster_flags1.b5 = 0);
  9038                           
  9039  09C8  12E3               	bcf	_taster_flags1,5
  9040  09C9                     l4586:	
  9041                           
  9042                           ;trans_ctrl.c: 301: if (taster_flags2.b6 != input_8_15.b5) {
  9043  09C9  0E5A               	swapf	_input_8_15,w
  9044  09CA  0C89               	rrf	9,f
  9045  09CB  3901               	andlw	1
  9046  09CC  00F2               	movwf	??_CheckDigitalInput
  9047  09CD  0E64               	swapf	_taster_flags2,w
  9048  09CE  0C89               	rrf	9,f
  9049  09CF  0C89               	rrf	9,f
  9050  09D0  3901               	andlw	1
  9051  09D1  0672               	xorwf	??_CheckDigitalInput,w
  9052  09D2  1903               	skipnz
  9053  09D3  29DD               	goto	l439
  9054                           
  9055                           ;trans_ctrl.c: 302: taster_flags2.b6 = input_8_15.b5;
  9056  09D4  1364               	bcf	_taster_flags2,6
  9057  09D5  1EDA               	btfss	_input_8_15,5
  9058  09D6  29D8               	goto	u6045
  9059  09D7  1764               	bsf	_taster_flags2,6
  9060  09D8                     u6045:	
  9061                           
  9062                           ;trans_ctrl.c: 303: if ((input_8_15.b5 == 0)) (taster_flags1.b6 = 1);
  9063  09D8  0020               	movlb	0	; select bank0
  9064  09D9  1ADA               	btfsc	_input_8_15,5
  9065  09DA  29DD               	goto	l439
  9066  09DB  1763               	bsf	_taster_flags1,6
  9067  09DC  29DE               	goto	l4592
  9068  09DD                     l439:	
  9069                           ;trans_ctrl.c: 305: } else (taster_flags1.b6 = 0);
  9070                           
  9071                           ;trans_ctrl.c: 304: else (taster_flags1.b6 = 0);
  9072                           
  9073  09DD  1363               	bcf	_taster_flags1,6
  9074  09DE                     l4592:	
  9075                           
  9076                           ;trans_ctrl.c: 307: if (taster_flags2.b1 != input_8_15.b0) {
  9077  09DE  085A               	movf	_input_8_15,w
  9078  09DF  3901               	andlw	1
  9079  09E0  00F2               	movwf	??_CheckDigitalInput
  9080  09E1  0C64               	rrf	_taster_flags2,w
  9081  09E2  3901               	andlw	1
  9082  09E3  0672               	xorwf	??_CheckDigitalInput,w
  9083  09E4  1903               	skipnz
  9084  09E5  29F1               	goto	l443
  9085                           
  9086                           ;trans_ctrl.c: 308: taster_flags2.b1 = input_8_15.b0;
  9087  09E6  10E4               	bcf	_taster_flags2,1
  9088  09E7  1C5A               	btfss	_input_8_15,0
  9089  09E8  29EA               	goto	u6075
  9090  09E9  14E4               	bsf	_taster_flags2,1
  9091  09EA                     u6075:	
  9092                           
  9093                           ;trans_ctrl.c: 309: if ((input_8_15.b0 == 0)) (taster_flags1.b1 = 1);
  9094  09EA  0020               	movlb	0	; select bank0
  9095  09EB  185A               	btfsc	_input_8_15,0
  9096  09EC  29EF               	goto	l444
  9097  09ED  14E3               	bsf	_taster_flags1,1
  9098  09EE  0008               	return
  9099  09EF                     l444:	
  9100                           
  9101                           ;trans_ctrl.c: 310: else (taster_flags1.b1 = 0);
  9102  09EF  10E3               	bcf	_taster_flags1,1
  9103                           
  9104                           ;trans_ctrl.c: 311: } else (taster_flags1.b1 = 0);
  9105  09F0  0008               	return
  9106  09F1                     l443:	
  9107  09F1  10E3               	bcf	_taster_flags1,1
  9108  09F2  0008               	return
  9109  09F3                     __end_of_CheckDigitalInput:	
  9110                           
  9111                           	psect	text22
  9112  15F5                     __ptext22:	
  9113 ;; *************** function _HC595_Shift *****************
  9114 ;; Defined at:
  9115 ;;		line 930 in file "trans_ctrl.c"
  9116 ;; Parameters:    Size  Location     Type
  9117 ;;		None
  9118 ;; Auto vars:     Size  Location     Type
  9119 ;;		None
  9120 ;; Return value:  Size  Location     Type
  9121 ;;		None               void
  9122 ;; Registers used:
  9123 ;;		None
  9124 ;; Tracked objects:
  9125 ;;		On entry : 0/0
  9126 ;;		On exit  : 0/0
  9127 ;;		Unchanged: 0/0
  9128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9129 ;;      Params:         0       0       0       0       0       0       0       0
  9130 ;;      Locals:         0       0       0       0       0       0       0       0
  9131 ;;      Temps:          0       0       0       0       0       0       0       0
  9132 ;;      Totals:         0       0       0       0       0       0       0       0
  9133 ;;Total ram usage:        0 bytes
  9134 ;; Hardware stack levels used:    1
  9135 ;; Hardware stack levels required when called:    2
  9136 ;; This function calls:
  9137 ;;		Nothing
  9138 ;; This function is called by:
  9139 ;;		_InitSYS
  9140 ;;		_CheckDigitalInput
  9141 ;;		_SetRelayOutput
  9142 ;;		_SetSignalOutput
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           
  9147                           ;psect for function _HC595_Shift
  9148  15F5                     _HC595_Shift:	
  9149                           
  9150                           ;trans_ctrl.c: 931: if (hc595_shift.b7) RC5 = 1;
  9151                           
  9152                           ;incstack = 0
  9153                           ; Regs used in _HC595_Shift: []
  9154  15F5  0020               	movlb	0	; select bank0
  9155  15F6  1FEE               	btfss	_hc595_shift,7
  9156  15F7  2DFA               	goto	l723
  9157  15F8  168E               	bsf	14,5	;volatile
  9158  15F9  2DFB               	goto	l724
  9159  15FA                     l723:	
  9160                           
  9161                           ;trans_ctrl.c: 932: else RC5 = 0;
  9162  15FA  128E               	bcf	14,5	;volatile
  9163  15FB                     l724:	
  9164                           
  9165                           ;trans_ctrl.c: 933: (RC3 = 1, RC3 = 0);
  9166  15FB  158E               	bsf	14,3	;volatile
  9167  15FC  118E               	bcf	14,3	;volatile
  9168                           
  9169                           ;trans_ctrl.c: 934: if (hc595_shift.b6) RC5 = 1;
  9170  15FD  1F6E               	btfss	_hc595_shift,6
  9171  15FE  2E01               	goto	l725
  9172  15FF  168E               	bsf	14,5	;volatile
  9173  1600  2E02               	goto	l726
  9174  1601                     l725:	
  9175                           
  9176                           ;trans_ctrl.c: 935: else RC5 = 0;
  9177  1601  128E               	bcf	14,5	;volatile
  9178  1602                     l726:	
  9179                           
  9180                           ;trans_ctrl.c: 936: (RC3 = 1, RC3 = 0);
  9181  1602  158E               	bsf	14,3	;volatile
  9182  1603  118E               	bcf	14,3	;volatile
  9183                           
  9184                           ;trans_ctrl.c: 937: if (hc595_shift.b5) RC5 = 1;
  9185  1604  1EEE               	btfss	_hc595_shift,5
  9186  1605  2E08               	goto	l727
  9187  1606  168E               	bsf	14,5	;volatile
  9188  1607  2E09               	goto	l728
  9189  1608                     l727:	
  9190                           
  9191                           ;trans_ctrl.c: 938: else RC5 = 0;
  9192  1608  128E               	bcf	14,5	;volatile
  9193  1609                     l728:	
  9194                           
  9195                           ;trans_ctrl.c: 939: (RC3 = 1, RC3 = 0);
  9196  1609  158E               	bsf	14,3	;volatile
  9197  160A  118E               	bcf	14,3	;volatile
  9198                           
  9199                           ;trans_ctrl.c: 940: if (hc595_shift.b4) RC5 = 1;
  9200  160B  1E6E               	btfss	_hc595_shift,4
  9201  160C  2E0F               	goto	l729
  9202  160D  168E               	bsf	14,5	;volatile
  9203  160E  2E10               	goto	l730
  9204  160F                     l729:	
  9205                           
  9206                           ;trans_ctrl.c: 941: else RC5 = 0;
  9207  160F  128E               	bcf	14,5	;volatile
  9208  1610                     l730:	
  9209                           
  9210                           ;trans_ctrl.c: 942: (RC3 = 1, RC3 = 0);
  9211  1610  158E               	bsf	14,3	;volatile
  9212  1611  118E               	bcf	14,3	;volatile
  9213                           
  9214                           ;trans_ctrl.c: 943: if (hc595_shift.b3) RC5 = 1;
  9215  1612  1DEE               	btfss	_hc595_shift,3
  9216  1613  2E16               	goto	l731
  9217  1614  168E               	bsf	14,5	;volatile
  9218  1615  2E17               	goto	l732
  9219  1616                     l731:	
  9220                           
  9221                           ;trans_ctrl.c: 944: else RC5 = 0;
  9222  1616  128E               	bcf	14,5	;volatile
  9223  1617                     l732:	
  9224                           
  9225                           ;trans_ctrl.c: 945: (RC3 = 1, RC3 = 0);
  9226  1617  158E               	bsf	14,3	;volatile
  9227  1618  118E               	bcf	14,3	;volatile
  9228                           
  9229                           ;trans_ctrl.c: 946: if (hc595_shift.b2) RC5 = 1;
  9230  1619  1D6E               	btfss	_hc595_shift,2
  9231  161A  2E1D               	goto	l733
  9232  161B  168E               	bsf	14,5	;volatile
  9233  161C  2E1E               	goto	l734
  9234  161D                     l733:	
  9235                           
  9236                           ;trans_ctrl.c: 947: else RC5 = 0;
  9237  161D  128E               	bcf	14,5	;volatile
  9238  161E                     l734:	
  9239                           
  9240                           ;trans_ctrl.c: 948: (RC3 = 1, RC3 = 0);
  9241  161E  158E               	bsf	14,3	;volatile
  9242  161F  118E               	bcf	14,3	;volatile
  9243                           
  9244                           ;trans_ctrl.c: 949: if (hc595_shift.b1) RC5 = 1;
  9245  1620  1CEE               	btfss	_hc595_shift,1
  9246  1621  2E24               	goto	l735
  9247  1622  168E               	bsf	14,5	;volatile
  9248  1623  2E25               	goto	l736
  9249  1624                     l735:	
  9250                           
  9251                           ;trans_ctrl.c: 950: else RC5 = 0;
  9252  1624  128E               	bcf	14,5	;volatile
  9253  1625                     l736:	
  9254                           
  9255                           ;trans_ctrl.c: 951: (RC3 = 1, RC3 = 0);
  9256  1625  158E               	bsf	14,3	;volatile
  9257  1626  118E               	bcf	14,3	;volatile
  9258                           
  9259                           ;trans_ctrl.c: 952: if (hc595_shift.b0) RC5 = 1;
  9260  1627  1C6E               	btfss	_hc595_shift,0
  9261  1628  2E2B               	goto	l737
  9262  1629  168E               	bsf	14,5	;volatile
  9263  162A  2E2C               	goto	l738
  9264  162B                     l737:	
  9265                           
  9266                           ;trans_ctrl.c: 953: else RC5 = 0;
  9267  162B  128E               	bcf	14,5	;volatile
  9268  162C                     l738:	
  9269                           
  9270                           ;trans_ctrl.c: 954: (RC3 = 1, RC3 = 0);
  9271  162C  158E               	bsf	14,3	;volatile
  9272  162D  118E               	bcf	14,3	;volatile
  9273                           
  9274                           ;trans_ctrl.c: 955: (RC4 = 1, RC4 = 0);
  9275  162E  160E               	bsf	14,4	;volatile
  9276  162F  120E               	bcf	14,4	;volatile
  9277                           
  9278                           ;trans_ctrl.c: 956: (RB5 = 0);
  9279  1630  128D               	bcf	13,5	;volatile
  9280  1631  0008               	return
  9281  1632                     __end_of_HC595_Shift:	
  9282                           
  9283                           	psect	intentry
  9284  0004                     __pintentry:	
  9285 ;; *************** function _timer_int *****************
  9286 ;; Defined at:
  9287 ;;		line 37 in file "trans_ctrl.c"
  9288 ;; Parameters:    Size  Location     Type
  9289 ;;		None
  9290 ;; Auto vars:     Size  Location     Type
  9291 ;;		None
  9292 ;; Return value:  Size  Location     Type
  9293 ;;		None               void
  9294 ;; Registers used:
  9295 ;;		wreg, status,2, status,0, pclath, cstack
  9296 ;; Tracked objects:
  9297 ;;		On entry : 0/0
  9298 ;;		On exit  : 0/0
  9299 ;;		Unchanged: 0/0
  9300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9301 ;;      Params:         0       0       0       0       0       0       0       0
  9302 ;;      Locals:         0       0       0       0       0       0       0       0
  9303 ;;      Temps:          2       0       0       0       0       0       0       0
  9304 ;;      Totals:         2       0       0       0       0       0       0       0
  9305 ;;Total ram usage:        2 bytes
  9306 ;; Hardware stack levels used:    1
  9307 ;; Hardware stack levels required when called:    1
  9308 ;; This function calls:
  9309 ;;		i1_HC595_Shift
  9310 ;; This function is called by:
  9311 ;;		Interrupt level 1
  9312 ;; This function uses a non-reentrant model
  9313 ;;
  9314                           
  9315  0004                     _timer_int:	
  9316                           
  9317                           ;incstack = 0
  9318                           ; Regs used in _timer_int: [wreg+status,2+status,0+pclath+cstack]
  9319  0004  147E               	bsf	126,0	;set compiler interrupt flag
  9320  0005  3180               	pagesel	$
  9321  0006  0020               	movlb	0	; select bank0
  9322  0007  087F               	movf	127,w
  9323  0008  00F1               	movwf	??_timer_int+1
  9324                           
  9325                           ;trans_ctrl.c: 38: if (TMR1IE && TMR1IF) {
  9326  0009  0021               	movlb	1	; select bank1
  9327  000A  1C11               	btfss	17,0	;volatile
  9328  000B  2865               	goto	i1l361
  9329  000C  0020               	movlb	0	; select bank0
  9330  000D  1C11               	btfss	17,0	;volatile
  9331  000E  2865               	goto	i1l361
  9332                           
  9333                           ;trans_ctrl.c: 39: TMR1IF = 0;
  9334  000F  1011               	bcf	17,0	;volatile
  9335                           
  9336                           ;trans_ctrl.c: 40: TMR1H = 0xd8;
  9337  0010  30D8               	movlw	216
  9338  0011  0097               	movwf	23	;volatile
  9339                           
  9340                           ;trans_ctrl.c: 41: TMR1L = 0xf2;
  9341  0012  30F2               	movlw	242
  9342  0013  0096               	movwf	22	;volatile
  9343                           
  9344                           ;trans_ctrl.c: 43: (timer_flags2.b4 = 1);
  9345  0014  1668               	bsf	_timer_flags2,4
  9346                           
  9347                           ;trans_ctrl.c: 46: if (++clock_tick_100ms == 10) {
  9348  0015  3001               	movlw	1
  9349  0016  00F0               	movwf	??_timer_int
  9350  0017  0870               	movf	??_timer_int,w
  9351  0018  07BC               	addwf	_clock_tick_100ms,f
  9352  0019  083C               	movf	_clock_tick_100ms,w
  9353  001A  3A0A               	xorlw	10
  9354  001B  1D03               	skipz
  9355  001C  2823               	goto	i1l6426
  9356                           
  9357                           ;trans_ctrl.c: 47: clock_tick_100ms = 0;
  9358  001D  01BC               	clrf	_clock_tick_100ms
  9359                           
  9360                           ;trans_ctrl.c: 48: if (!systeml_flags1.b0) systeml_flags1.b0 = 1;
  9361  001E  1879               	btfsc	_systeml_flags1,0
  9362  001F  2822               	goto	i1l335
  9363  0020  1479               	bsf	_systeml_flags1,0
  9364  0021  2823               	goto	i1l6426
  9365  0022                     i1l335:	
  9366                           
  9367                           ;trans_ctrl.c: 49: else systeml_flags1.b0 = 0;
  9368  0022  1079               	bcf	_systeml_flags1,0
  9369  0023                     i1l6426:	
  9370                           
  9371                           ;trans_ctrl.c: 50: }
  9372                           ;trans_ctrl.c: 53: if (++clock_tick_500ms == 50) {
  9373  0023  3001               	movlw	1
  9374  0024  00F0               	movwf	??_timer_int
  9375  0025  0870               	movf	??_timer_int,w
  9376  0026  07BF               	addwf	_clock_tick_500ms,f
  9377  0027  083F               	movf	_clock_tick_500ms,w
  9378  0028  3A32               	xorlw	50
  9379  0029  1D03               	skipz
  9380  002A  2831               	goto	i1l6434
  9381                           
  9382                           ;trans_ctrl.c: 54: clock_tick_500ms = 0;
  9383  002B  01BF               	clrf	_clock_tick_500ms
  9384                           
  9385                           ;trans_ctrl.c: 55: if (!systeml_flags1.b1) systeml_flags1.b1 = 1;
  9386  002C  18F9               	btfsc	_systeml_flags1,1
  9387  002D  2830               	goto	i1l338
  9388  002E  14F9               	bsf	_systeml_flags1,1
  9389  002F  2831               	goto	i1l6434
  9390  0030                     i1l338:	
  9391                           
  9392                           ;trans_ctrl.c: 56: else systeml_flags1.b1 = 0;
  9393  0030  10F9               	bcf	_systeml_flags1,1
  9394  0031                     i1l6434:	
  9395                           
  9396                           ;trans_ctrl.c: 57: }
  9397                           ;trans_ctrl.c: 60: if (++clock_tick_1s == 100) {
  9398  0031  3001               	movlw	1
  9399  0032  00F0               	movwf	??_timer_int
  9400  0033  0870               	movf	??_timer_int,w
  9401  0034  07BD               	addwf	_clock_tick_1s,f
  9402  0035  083D               	movf	_clock_tick_1s,w
  9403  0036  3A64               	xorlw	100
  9404  0037  1D03               	skipz
  9405  0038  283F               	goto	i1l6442
  9406                           
  9407                           ;trans_ctrl.c: 61: clock_tick_1s = 0;
  9408  0039  01BD               	clrf	_clock_tick_1s
  9409                           
  9410                           ;trans_ctrl.c: 62: if (!systeml_flags1.b2) systeml_flags1.b2 = 1;
  9411  003A  1979               	btfsc	_systeml_flags1,2
  9412  003B  283E               	goto	i1l341
  9413  003C  1579               	bsf	_systeml_flags1,2
  9414  003D  283F               	goto	i1l6442
  9415  003E                     i1l341:	
  9416                           
  9417                           ;trans_ctrl.c: 63: else systeml_flags1.b2 = 0;
  9418  003E  1179               	bcf	_systeml_flags1,2
  9419  003F                     i1l6442:	
  9420                           
  9421                           ;trans_ctrl.c: 64: }
  9422                           ;trans_ctrl.c: 67: if (++clock_tick_2s == 200) {
  9423  003F  3001               	movlw	1
  9424  0040  00F0               	movwf	??_timer_int
  9425  0041  0870               	movf	??_timer_int,w
  9426  0042  07BE               	addwf	_clock_tick_2s,f
  9427  0043  083E               	movf	_clock_tick_2s,w
  9428  0044  3AC8               	xorlw	200
  9429  0045  1D03               	skipz
  9430  0046  284D               	goto	i1l343
  9431                           
  9432                           ;trans_ctrl.c: 68: clock_tick_2s = 0;
  9433  0047  01BE               	clrf	_clock_tick_2s
  9434                           
  9435                           ;trans_ctrl.c: 69: if (!systeml_flags1.b3) systeml_flags1.b3 = 1;
  9436  0048  19F9               	btfsc	_systeml_flags1,3
  9437  0049  284C               	goto	i1l344
  9438  004A  15F9               	bsf	_systeml_flags1,3
  9439  004B  284D               	goto	i1l343
  9440  004C                     i1l344:	
  9441                           
  9442                           ;trans_ctrl.c: 70: else systeml_flags1.b3 = 0;
  9443  004C  11F9               	bcf	_systeml_flags1,3
  9444  004D                     i1l343:	
  9445                           
  9446                           ;trans_ctrl.c: 71: }
  9447                           ;trans_ctrl.c: 74: if (systeml_flags1.b7) {
  9448  004D  1FF9               	btfss	_systeml_flags1,7
  9449  004E  2852               	goto	i1l346
  9450                           
  9451                           ;trans_ctrl.c: 75: if (!systeml_flags1.b0) (hc595_shift.b7 = 0, HC595_Shift());
  9452  004F  1C79               	btfss	_systeml_flags1,0
  9453  0050  2860               	goto	L45
  9454  0051  2862               	goto	i1l359
  9455  0052                     i1l346:	
  9456                           ;trans_ctrl.c: 77: } else if (systeml_flags1.b4) {
  9457                           
  9458                           ;trans_ctrl.c: 76: else (hc595_shift.b7 = 1, HC595_Shift());
  9459                           
  9460  0052  1E79               	btfss	_systeml_flags1,4
  9461  0053  2857               	goto	i1l350
  9462                           
  9463                           ;trans_ctrl.c: 78: if (!systeml_flags1.b1) (hc595_shift.b7 = 0, HC595_Shift());
  9464  0054  1CF9               	btfss	_systeml_flags1,1
  9465  0055  2860               	goto	L45
  9466  0056  2862               	goto	i1l359
  9467  0057                     i1l350:	
  9468                           ;trans_ctrl.c: 80: } else if (systeml_flags1.b6) {
  9469                           
  9470                           ;trans_ctrl.c: 79: else (hc595_shift.b7 = 1, HC595_Shift());
  9471                           
  9472  0057  1F79               	btfss	_systeml_flags1,6
  9473  0058  285C               	goto	i1l354
  9474                           
  9475                           ;trans_ctrl.c: 81: if (!systeml_flags1.b2) (hc595_shift.b7 = 0, HC595_Shift());
  9476  0059  1D79               	btfss	_systeml_flags1,2
  9477  005A  2860               	goto	L45
  9478  005B  2862               	goto	i1l359
  9479  005C                     i1l354:	
  9480                           ;trans_ctrl.c: 83: } else if (systeml_flags1.b5) {
  9481                           
  9482                           ;trans_ctrl.c: 82: else (hc595_shift.b7 = 1, HC595_Shift());
  9483                           
  9484  005C  1EF9               	btfss	_systeml_flags1,5
  9485  005D  2865               	goto	i1l361
  9486                           
  9487                           ;trans_ctrl.c: 84: if (!systeml_flags1.b3) (hc595_shift.b7 = 0, HC595_Shift());
  9488  005E  19F9               	btfsc	_systeml_flags1,3
  9489  005F  2862               	goto	i1l359
  9490  0060                     L45:	
  9491  0060  13EE               	bcf	_hc595_shift,7
  9492  0061  2863               	goto	L42
  9493  0062                     i1l359:	
  9494                           
  9495                           ;trans_ctrl.c: 85: else (hc595_shift.b7 = 1, HC595_Shift());
  9496  0062  17EE               	bsf	_hc595_shift,7
  9497  0063                     L42:	
  9498  0063  3195  25B8         	fcall	i1_HC595_Shift
  9499  0065                     i1l361:	
  9500  0065  0871               	movf	??_timer_int+1,w
  9501  0066  0020               	movlb	0	; select bank0
  9502  0067  00FF               	movwf	127
  9503  0068  107E               	bcf	126,0	;clear compiler interrupt flag
  9504  0069  0009               	retfie
  9505  006A                     __end_of_timer_int:	
  9506                           
  9507                           	psect	text24
  9508  15B8                     __ptext24:	
  9509 ;; *************** function i1_HC595_Shift *****************
  9510 ;; Defined at:
  9511 ;;		line 930 in file "trans_ctrl.c"
  9512 ;; Parameters:    Size  Location     Type
  9513 ;;		None
  9514 ;; Auto vars:     Size  Location     Type
  9515 ;;		None
  9516 ;; Return value:  Size  Location     Type
  9517 ;;		None               void
  9518 ;; Registers used:
  9519 ;;		None
  9520 ;; Tracked objects:
  9521 ;;		On entry : 0/0
  9522 ;;		On exit  : 0/0
  9523 ;;		Unchanged: 0/0
  9524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9525 ;;      Params:         0       0       0       0       0       0       0       0
  9526 ;;      Locals:         0       0       0       0       0       0       0       0
  9527 ;;      Temps:          0       0       0       0       0       0       0       0
  9528 ;;      Totals:         0       0       0       0       0       0       0       0
  9529 ;;Total ram usage:        0 bytes
  9530 ;; Hardware stack levels used:    1
  9531 ;; This function calls:
  9532 ;;		Nothing
  9533 ;; This function is called by:
  9534 ;;		_timer_int
  9535 ;; This function uses a non-reentrant model
  9536 ;;
  9537                           
  9538                           
  9539                           ;psect for function i1_HC595_Shift
  9540  15B8                     i1_HC595_Shift:	
  9541                           
  9542                           ;trans_ctrl.c: 931: if (hc595_shift.b7) RC5 = 1;
  9543                           
  9544                           ;incstack = 0
  9545                           ; Regs used in i1_HC595_Shift: []
  9546  15B8  0020               	movlb	0	; select bank0
  9547  15B9  1FEE               	btfss	_hc595_shift,7
  9548  15BA  2DBD               	goto	i1l723
  9549  15BB  168E               	bsf	14,5	;volatile
  9550  15BC  2DBE               	goto	i1l724
  9551  15BD                     i1l723:	
  9552                           
  9553                           ;trans_ctrl.c: 932: else RC5 = 0;
  9554  15BD  128E               	bcf	14,5	;volatile
  9555  15BE                     i1l724:	
  9556                           
  9557                           ;trans_ctrl.c: 933: (RC3 = 1, RC3 = 0);
  9558  15BE  158E               	bsf	14,3	;volatile
  9559  15BF  118E               	bcf	14,3	;volatile
  9560                           
  9561                           ;trans_ctrl.c: 934: if (hc595_shift.b6) RC5 = 1;
  9562  15C0  1F6E               	btfss	_hc595_shift,6
  9563  15C1  2DC4               	goto	i1l725
  9564  15C2  168E               	bsf	14,5	;volatile
  9565  15C3  2DC5               	goto	i1l726
  9566  15C4                     i1l725:	
  9567                           
  9568                           ;trans_ctrl.c: 935: else RC5 = 0;
  9569  15C4  128E               	bcf	14,5	;volatile
  9570  15C5                     i1l726:	
  9571                           
  9572                           ;trans_ctrl.c: 936: (RC3 = 1, RC3 = 0);
  9573  15C5  158E               	bsf	14,3	;volatile
  9574  15C6  118E               	bcf	14,3	;volatile
  9575                           
  9576                           ;trans_ctrl.c: 937: if (hc595_shift.b5) RC5 = 1;
  9577  15C7  1EEE               	btfss	_hc595_shift,5
  9578  15C8  2DCB               	goto	i1l727
  9579  15C9  168E               	bsf	14,5	;volatile
  9580  15CA  2DCC               	goto	i1l728
  9581  15CB                     i1l727:	
  9582                           
  9583                           ;trans_ctrl.c: 938: else RC5 = 0;
  9584  15CB  128E               	bcf	14,5	;volatile
  9585  15CC                     i1l728:	
  9586                           
  9587                           ;trans_ctrl.c: 939: (RC3 = 1, RC3 = 0);
  9588  15CC  158E               	bsf	14,3	;volatile
  9589  15CD  118E               	bcf	14,3	;volatile
  9590                           
  9591                           ;trans_ctrl.c: 940: if (hc595_shift.b4) RC5 = 1;
  9592  15CE  1E6E               	btfss	_hc595_shift,4
  9593  15CF  2DD2               	goto	i1l729
  9594  15D0  168E               	bsf	14,5	;volatile
  9595  15D1  2DD3               	goto	i1l730
  9596  15D2                     i1l729:	
  9597                           
  9598                           ;trans_ctrl.c: 941: else RC5 = 0;
  9599  15D2  128E               	bcf	14,5	;volatile
  9600  15D3                     i1l730:	
  9601                           
  9602                           ;trans_ctrl.c: 942: (RC3 = 1, RC3 = 0);
  9603  15D3  158E               	bsf	14,3	;volatile
  9604  15D4  118E               	bcf	14,3	;volatile
  9605                           
  9606                           ;trans_ctrl.c: 943: if (hc595_shift.b3) RC5 = 1;
  9607  15D5  1DEE               	btfss	_hc595_shift,3
  9608  15D6  2DD9               	goto	i1l731
  9609  15D7  168E               	bsf	14,5	;volatile
  9610  15D8  2DDA               	goto	i1l732
  9611  15D9                     i1l731:	
  9612                           
  9613                           ;trans_ctrl.c: 944: else RC5 = 0;
  9614  15D9  128E               	bcf	14,5	;volatile
  9615  15DA                     i1l732:	
  9616                           
  9617                           ;trans_ctrl.c: 945: (RC3 = 1, RC3 = 0);
  9618  15DA  158E               	bsf	14,3	;volatile
  9619  15DB  118E               	bcf	14,3	;volatile
  9620                           
  9621                           ;trans_ctrl.c: 946: if (hc595_shift.b2) RC5 = 1;
  9622  15DC  1D6E               	btfss	_hc595_shift,2
  9623  15DD  2DE0               	goto	i1l733
  9624  15DE  168E               	bsf	14,5	;volatile
  9625  15DF  2DE1               	goto	i1l734
  9626  15E0                     i1l733:	
  9627                           
  9628                           ;trans_ctrl.c: 947: else RC5 = 0;
  9629  15E0  128E               	bcf	14,5	;volatile
  9630  15E1                     i1l734:	
  9631                           
  9632                           ;trans_ctrl.c: 948: (RC3 = 1, RC3 = 0);
  9633  15E1  158E               	bsf	14,3	;volatile
  9634  15E2  118E               	bcf	14,3	;volatile
  9635                           
  9636                           ;trans_ctrl.c: 949: if (hc595_shift.b1) RC5 = 1;
  9637  15E3  1CEE               	btfss	_hc595_shift,1
  9638  15E4  2DE7               	goto	i1l735
  9639  15E5  168E               	bsf	14,5	;volatile
  9640  15E6  2DE8               	goto	i1l736
  9641  15E7                     i1l735:	
  9642                           
  9643                           ;trans_ctrl.c: 950: else RC5 = 0;
  9644  15E7  128E               	bcf	14,5	;volatile
  9645  15E8                     i1l736:	
  9646                           
  9647                           ;trans_ctrl.c: 951: (RC3 = 1, RC3 = 0);
  9648  15E8  158E               	bsf	14,3	;volatile
  9649  15E9  118E               	bcf	14,3	;volatile
  9650                           
  9651                           ;trans_ctrl.c: 952: if (hc595_shift.b0) RC5 = 1;
  9652  15EA  1C6E               	btfss	_hc595_shift,0
  9653  15EB  2DEE               	goto	i1l737
  9654  15EC  168E               	bsf	14,5	;volatile
  9655  15ED  2DEF               	goto	i1l738
  9656  15EE                     i1l737:	
  9657                           
  9658                           ;trans_ctrl.c: 953: else RC5 = 0;
  9659  15EE  128E               	bcf	14,5	;volatile
  9660  15EF                     i1l738:	
  9661                           
  9662                           ;trans_ctrl.c: 954: (RC3 = 1, RC3 = 0);
  9663  15EF  158E               	bsf	14,3	;volatile
  9664  15F0  118E               	bcf	14,3	;volatile
  9665                           
  9666                           ;trans_ctrl.c: 955: (RC4 = 1, RC4 = 0);
  9667  15F1  160E               	bsf	14,4	;volatile
  9668  15F2  120E               	bcf	14,4	;volatile
  9669                           
  9670                           ;trans_ctrl.c: 956: (RB5 = 0);
  9671  15F3  128D               	bcf	13,5	;volatile
  9672  15F4  0008               	return
  9673  15F5                     __end_ofi1_HC595_Shift:	
  9674  007E                     btemp	set	126	;btemp
  9675  007E                     pic14e$flags	set	126
  9676  007E                     wtemp	set	126
  9677  007E                     wtemp0	set	126
  9678  0080                     wtemp1	set	128
  9679  0082                     wtemp2	set	130
  9680  0084                     wtemp3	set	132
  9681  0086                     wtemp4	set	134
  9682  0088                     wtemp5	set	136
  9683  007F                     wtemp6	set	127
  9684  007E                     ttemp	set	126
  9685  007E                     ttemp0	set	126
  9686  0081                     ttemp1	set	129
  9687  0084                     ttemp2	set	132
  9688  0087                     ttemp3	set	135
  9689  007F                     ttemp4	set	127
  9690  007E                     ltemp	set	126
  9691  007E                     ltemp0	set	126
  9692  0082                     ltemp1	set	130
  9693  0086                     ltemp2	set	134
  9694  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         107
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      12
    BANK0            80      0      79
    BANK1            80      2      28
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_InitSYS
    _SetSignalOutput->_SetTimer
    _ProcessVacumPump1->_SetTimer
    _ProcessFeederCoex->_SetTimer
    _ProcessFeeder5->_SetTimer
    _ProcessFeeder4->_SetTimer
    _ProcessFeeder3->_SetTimer
    _ProcessFeeder2->_SetTimer
    _ProcessFeeder1->_SetTimer
    _ProcessCyclon1->_SetTimer
    _InitSYS->_DelayS
    _DelayS->_DelayMs
    _CheckAnalogInput->___wmul

Critical Paths under _timer_int in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _timer_int in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_CheckAnalogInput
    _InitSYS->_CheckAnalogInput

Critical Paths under _timer_int in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_int in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _timer_int in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _timer_int in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _timer_int in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _timer_int in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   77832
                   _CheckAnalogInput
                  _CheckDigitalInput
                        _CheckSafety
                         _CheckTimer
                            _InitRAM
                            _InitSYS
                     _ProcessCyclon1
                     _ProcessFeeder1
                     _ProcessFeeder2
                     _ProcessFeeder3
                     _ProcessFeeder4
                     _ProcessFeeder5
                  _ProcessFeederCoex
                  _ProcessVacumPump1
                    _SetAnalogOutput
                     _SetRelayOutput
                    _SetSignalOutput
 ---------------------------------------------------------------------------------
 (1) _SetSignalOutput                                      1     1      0    8522
                                              6 COMMON     1     1      0
                        _HC595_Shift
                           _SetTimer
 ---------------------------------------------------------------------------------
 (1) _SetRelayOutput                                       1     1      0       0
                                              2 COMMON     1     1      0
                        _HC595_Shift
 ---------------------------------------------------------------------------------
 (1) _SetAnalogOutput                                      2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ProcessVacumPump1                                    1     1      0    8522
                                              6 COMMON     1     1      0
                           _SetTimer
 ---------------------------------------------------------------------------------
 (1) _ProcessFeederCoex                                    1     1      0    8522
                                              6 COMMON     1     1      0
                           _SetTimer
 ---------------------------------------------------------------------------------
 (1) _ProcessFeeder5                                       1     1      0    8522
                                              6 COMMON     1     1      0
                           _SetTimer
 ---------------------------------------------------------------------------------
 (1) _ProcessFeeder4                                       1     1      0    8522
                                              6 COMMON     1     1      0
                           _SetTimer
 ---------------------------------------------------------------------------------
 (1) _ProcessFeeder3                                       1     1      0    8522
                                              6 COMMON     1     1      0
                           _SetTimer
 ---------------------------------------------------------------------------------
 (1) _ProcessFeeder2                                       1     1      0    8522
                                              6 COMMON     1     1      0
                           _SetTimer
 ---------------------------------------------------------------------------------
 (1) _ProcessFeeder1                                       1     1      0    8522
                                              6 COMMON     1     1      0
                           _SetTimer
 ---------------------------------------------------------------------------------
 (1) _ProcessCyclon1                                       1     1      0    8522
                                              6 COMMON     1     1      0
                           _SetTimer
 ---------------------------------------------------------------------------------
 (2) _SetTimer                                             4     0      4    8522
                                              2 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) _InitSYS                                              1     1      0     612
                                              8 COMMON     1     1      0
                   _CheckAnalogInput
                             _DelayS
                        _HC595_Shift
 ---------------------------------------------------------------------------------
 (2) _DelayS                                               3     3      0      90
                                              5 COMMON     3     3      0
                            _DelayMs
 ---------------------------------------------------------------------------------
 (3) _DelayMs                                              3     3      0      45
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _CheckAnalogInput                                     2     2      0     522
                                              0 BANK1      2     2      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     522
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _InitRAM                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CheckTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckSafety                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CheckDigitalInput                                    2     2      0       0
                                              2 COMMON     2     2      0
                        _HC595_Shift
 ---------------------------------------------------------------------------------
 (2) _HC595_Shift                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _timer_int                                            2     2      0       0
                                              0 COMMON     2     2      0
                      i1_HC595_Shift
 ---------------------------------------------------------------------------------
 (5) i1_HC595_Shift                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckAnalogInput
     ___wmul
   _CheckDigitalInput
     _HC595_Shift
   _CheckSafety
   _CheckTimer
   _InitRAM
   _InitSYS
     _CheckAnalogInput
       ___wmul
     _DelayS
       _DelayMs
     _HC595_Shift
   _ProcessCyclon1
     _SetTimer
   _ProcessFeeder1
     _SetTimer
   _ProcessFeeder2
     _SetTimer
   _ProcessFeeder3
     _SetTimer
   _ProcessFeeder4
     _SetTimer
   _ProcessFeeder5
     _SetTimer
   _ProcessFeederCoex
     _SetTimer
   _ProcessVacumPump1
     _SetTimer
   _SetAnalogOutput
   _SetRelayOutput
     _HC595_Shift
   _SetSignalOutput
     _HC595_Shift
     _SetTimer

 _timer_int (ROOT)
   i1_HC595_Shift

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      77       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      0      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      2      1C       8       35.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      77      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu May 17 03:47:02 2018

             _feeder_coex_pcnt 0055                              pc 0002                    __CFG_CP$OFF 0000  
          ??_ProcessVacumPump1 0076              _feeder_coex_state 0056            ___wmul@multiplicand 0074  
            ??_SetAnalogOutput 0072             _feeder_coex_flags1 0054                            l401 17B7  
                          l305 1533                            l306 1537                            l411 17FD  
                          l403 17C5                            l405 17D3                            l501 1591  
                          l326 150A                            l502 1593                            l431 09B5  
                          l423 098A                            l415 0962                            l407 17E1  
                          l503 1599                            l409 17EF                            l505 15AD  
                          l521 0DAC                            l506 15AF                            l443 09F1  
                          l435 09C8                            l427 09A0                            l419 0977  
                          l507 15B5                            l611 0E65                            l603 0E45  
                          l531 0DB1                            l523 0DA9                            l444 09EF  
                          l604 0E49                            l532 0DB5                            l364 154F  
                          l461 03FA                            l453 0390                            l373 171F  
                          l621 0E6A                            l613 0E62                            l541 0DCE  
                          l517 0DA2                            l630 0E80                            l622 0E6E  
                          l550 0DDA                            l439 09DD                            l391 177A  
                          l383 174B                            l607 0E5A                            l535 0DC6  
                          l519 0DA3                            l472 049A                            l456 03CF  
                          l376 1733                            l720 07E2                            l800 08F1  
                          l393 1786                            l385 1757                            l641 0E9D  
                          l633 0E83                            l625 0E7F                            l609 0E5B  
                          l553 0DEB                            l537 0DC7                            l730 1610  
                          l482 0556                            l466 0443                            l802 0911  
                          l810 0621                            l626 0E98                            l731 1616  
                          l723 15FA                            l395 1792                            l387 1762  
                          l627 0E80                            l571 0E10                            l555 0DEC  
                          l539 0DD1                            l732 1617                            l724 15FB  
                          l644 0E9E                            l733 161D                            l725 1601  
                          l397 179D                            l389 176E                            l477 04F8  
                          l821 0687                            l573 0E11                            l557 0DF6  
                          l549 0DD6                            l734 161E                            l726 1602  
                          l742 168B                            l638 0E88                            l735 1624  
                          l727 1608                            l743 1684                            l399 17A9  
                          l487 05BA                            l639 0E8C                            l591 0E36  
                          l575 0E1B                            l567 0DFB                            l559 0DF3  
                          l736 1625                            l728 1609                            l752 16A4  
                          l568 0DFF                            l737 162B                            l729 160F  
                          l761 16BE                            l753 16A8                            l841 0707  
                          l593 0E40                            l585 0E20                            l577 0E18  
                          l738 162C                            l762 16C8                            l826 069B  
                          l586 0E24                            l907 0AA6                            l595 0E3D  
                          l764 16C2                            l756 16BD                            l860 0B1B  
                          l916 0AD9                            l940 0C67                            l924 0BE0  
                          l765 16C6                            l781 086E                            l773 083A  
                          l837 06FE                            l909 0A96                            l589 0E35  
                          l758 16B9                            l942 0C56                            l950 0CAB  
                          l839 06ED                            l847 0743                            l871 0B7E  
                          l855 0AF7                            l792 08D0                            l776 084D  
                          l944 0C70                            l873 0B6D                            l881 0BC2  
                          l929 0C04                            l794 08BF                            l875 0B87  
                          l963 0CED                            l796 08D9                            l974 0D50  
                          l958 0CC9                            l895 0A34                            l992 082F  
                          l976 0D3F                            l984 0D94                            l889 0A10  
                          l978 0D59                            _GIE 005F                            l988 0824  
                          _RB1 0069                            _RB2 006A                            _RA4 0064  
                          _RC3 0073                            _RB5 006D                            _RC4 0074  
                          _RC5 0075                            _RE2 0082                            _PR2 001B  
        _feeder4_charging_time 0024                   __CFG_BORV$LO 0000                            wreg 0009  
                 __CFG_FOSC$HS 0000                           S6940 1000                           S6934 0800  
                         S6936 101E                   __CFG_LVP$OFF 0000                  i1_HC595_Shift 15B8  
                   _CheckTimer 173D                    _output_8_15 005C                           l1003 008C  
                         l1004 030B                           l1022 0102                           l1015 00D1  
                         l1050 01B5                           l1115 07EB                           l1036 013C  
                         l1061 01F3                           l1062 01F6                           l1071 024E  
                         l1063 0205                           l1048 019E                           l1083 0288  
                         l1077 026F                           l1078 0272                           l1087 02BF  
                         l4040 07E5                           l4200 0769                           l4052 150E  
                         l4220 0797                           l4212 0784                           l4204 0772  
                         l5006 0A0D                           l4240 07C9                           l4232 07B5  
                         l4224 07A1                           l4216 078D                           l4208 077B  
                         l5024 0A2A                           l5016 0A20                           l5104 0ACA  
                         l5120 0BDD                           l5112 0BCD                           l4402 179E  
                         l5210 0C8B                           l5130 0BF0                           l4420 17C7  
                         l4236 07BF                           l4228 07AB                           l5052 0A53  
                         l5036 0A44                           l5028 0A32                           l5108 0BC4  
                         l4502 16B5                           l4414 17B9                           l4246 07D3  
                         l5070 0A8E                           l5062 0A69                           l5206 0C83  
                         l5150 0C14                           l5142 0C02                           l5222 0C9C  
                         l5230 0CB6                           l6110 0EF8                           l4432 17E3  
                         l4408 17AB                           l4360 174C                           l4192 0757  
                         l4184 0745                           l4600 0834                           l4426 17D5  
                         l4610 084A                           l5090 0AB7                           l5218 0C9A  
                         l5162 0C21                           l5138 0BFA                           l5322 0D6C  
                         l5226 0CAD                           l4372 1763                           l4196 0760  
                         l4188 074E                           l4620 085D                           l5180 0C4E  
                         l5172 0C37                           l5260 0CEB                           l6124 0F04  
                         l6036 0EBA                           l4454 1685                           l4438 17F1  
                         l4390 1787                           l4366 1758                           l5350 0826  
                         l5086 0AAF                           l5334 0D83                           l5326 0D74  
                         l5238 0CC6                           l5406 00BE                           l6310 0FB9  
                         l6230 0F57                           l6214 0F4B                           l4384 177B  
                         l4704 0900                           l4640 087E                           l4632 086C  
                         l4712 0603                           l5280 0D0A                           l5256 0CE3  
                         l5248 0CD9                           l6312 0FBF                           l6152 0F1A  
                         l4562 0978                           l4378 176F                           l5098 0AC6  
                         l5290 0D20                           l5338 0D85                           l5506 0151  
                         l5362 0083                           l6138 0F0F                           l6058 0EC7  
                         l4580 09B6                           l4556 0963                           l4492 16A9  
                         l4396 1793                           l4652 088A                           l4628 0867  
                         l4708 0902                           l4724 061C                           l4716 060C  
                         l5268 0CFD                           l5700 02B1                           l5532 0180  
                         l5524 016D                           l5516 0163                           l5436 00E7  
                         l6076 0ED9                           l4574 09A1                           l4670 08B7  
                         l4662 08A0                           l4910 0B19                           l5614 021F  
                         l5446 00F9                           l5374 009B                           l6326 0FDB  
                         l6262 0F7A                           l6246 0F69                           l4592 09DE  
                         l4568 098B                           l4496 16AF                           l4808 06B8  
                         l5720 02DF                           l5632 023A                           l5624 0231  
                         l5392 00A9                           l6184 0F34                           l6168 0F27  
                         l6096 0EEC                           l6328 0FDD                           l4586 09C9  
                         l4826 06E5                           l4818 06CE                           l4746 063D  
                         l4738 0631                           l4930 0B38                           l4906 0B11  
                         l5298 0D37                           l5706 02C7                           l5538 018C  
                         l5570 01C1                           l5466 0111                           l5458 0105  
                         l4772 067F                           l4756 065C                           l4940 0B4E  
                         l5732 02F3                           l5716 02DC                           l5708 02CE  
                         l5660 026B                           l5580 01D3                           l4694 08EC  
                         l4854 071A                           l4766 066E                           l4758 0661  
                         l4918 0B2B                           l5718 02DD                           l5654 0264  
                         l5478 0124                           l5398 00AF                           l5742 0300  
                         l6294 0F9C                           l6278 0F8A                           l6198 0F3F  
                         l5910 0DB7                           l6712 0542                           l4872 0734  
                         l4880 0AE4                           l5672 0277                           l5648 025E  
                         l5592 01EB                           l5920 0DD8                           l5912 0DC8  
                         l4866 0731                           l4858 0722                           l4786 0692  
                         l5754 0324                           l5906 0DB3                           l6724 059F  
                         l6740 0600                           l6812 1727                           l6804 1720  
                         l4796 06AB                           l4948 0B65                           l4876 0ADB  
                         l5764 033A                           l5668 0275                           l5940 0E12  
                         l5924 0DDC                           l6726 05A6                           l6670 0430  
                         l4974 0B9A                           l4990 0BB3                           l5774 0350  
                         l5686 0292                           l5934 0DFD                           l5926 0DED  
                         l4888 0AF4                           l5784 0366                           l5688 0299  
                         l5952 0E26                           l6658 03E6                           l4986 0BB1  
                         l4978 0BA2                           l4898 0B07                           l4994 09F4  
                         l5874 159B                           l5962 0E47                           l5954 0E37  
                         l5938 0E01                           l6684 0487                           l5980 0E70  
                         l5948 0E22                           l4998 09FD                           l5990 0E8A  
                         l5966 0E4B                           l5976 0E6C                           l5968 0E5C  
                         l6698 04E4                           l6938 07D8                           l5994 0E8E  
                         l5898 0DA4                           _LATA 010C                           _LATB 010D  
                         _LATC 010E                           _LATE 0110                           u5105 07F1  
                         u6015 09C3                           _PEIE 005E                           u6045 09D8  
                         u5095 07EC                           u6075 09EA                           u5925 0985  
                         u5865 095D                           u5955 099B                           u5895 0972  
                         u5985 09B0     __size_of_ProcessFeederCoex 00E9      __end_of_ProcessVacumPump1 037A  
                 __CFG_WRT$OFF 0000                  __CFG_FCMEN$ON 0000                           _main 1549  
                         _temp 0065                           fsr0h 0005                           fsr0l 0004  
                         indf0 0000                           btemp 007E                  __CFG_BOREN$ON 0000  
                         ltemp 007E                           start 006A                           ttemp 007E  
                         wtemp 007E                  __CFG_IESO$OFF 0000                __end_of_DelayMs 1549  
                __CFG_MCLRE$ON 0000                __end_of_InitRAM 1532               ?_SetSignalOutput 0070  
              __end_of_InitSYS 173D      __size_of_CheckAnalogInput 0288                    _CheckSafety 1675  
                        _DC1B0 149C                          _DC1B1 149D                          _DC2B0 14D4  
                        _DC2B1 14D5                          ?_main 0070                  __CFG_WDTE$OFF 0000  
                        u10305 047E                          _T1CON 0018                          _T2CON 001C  
                        i1l341 003E                          i1l350 0057                          i1l343 004D  
                        i1l335 0022                          i1l344 004C                          i1l361 0065  
                        i1l354 005C                          i1l346 0052                          i1l338 0030  
                        i1l359 0062                          i1l730 15D3                          i1l731 15D9  
                        i1l723 15BD                          i1l732 15DA                          i1l724 15BE  
                        i1l733 15E0                          i1l725 15C4                          i1l734 15E1  
                        i1l726 15C5                          i1l735 15E7                          i1l727 15CB  
                        i1l736 15E8                          i1l728 15CC                          i1l737 15EE  
                        i1l729 15D2                          i1l738 15EF                          _TMR1H 0017  
                        _TMR1L 0016                          _PORTD 000F                          _TRISA 008C  
                        _TRISB 008D                          _TRISC 008E                          _TRISD 008F  
                        _TRISE 0090                 ?i1_HC595_Shift 0070                 _systeml_flags1 0079  
                        _timer 0067                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F      _feeder3_control_delay_tmr 00A8                          status 0003  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F            _vp1_cleaning_cycles 002E                __initialization 006C  
                 __end_of_main 157D               _vp1_cleaning_cnt 00B6                 _feeder1_flags1 0045  
               _feeder2_flags1 0048                 __CFG_LPBOR$OFF 0000                 _feeder3_flags1 004B  
               _feeder4_flags1 004E                 _feeder5_flags1 0051                         ??_main 0079  
             __end_of_SetTimer 07E3                  _cyclon_flags1 0041                         _ADCON0 009D  
                       _ADCON1 009E                    ?_CheckTimer 0070                         _ADRESH 009C  
                       _ADRESL 009B                         _CCPR1L 0291                         _CCPR2L 0298  
                       _ANSELA 018C                         _ANSELB 018D                         _ANSELC 018E  
                       _ANSELD 018F                         _ANSELE 0190     __size_of_ProcessVacumPump1 02F8  
                       i1l6442 003F                         i1l6434 0031                         i1l6426 0023  
                       _FVRCON 0117                      ??_DelayMs 0072                         _TMR1IE 0488  
                       _TMR1IF 0088                      ??_InitRAM 0072                      ??_InitSYS 0078  
                       _DelayS 1509                 __CFG_PWRTE$OFF 0000                         ___wmul 07E3  
               __CFG_STVREN$ON 0000              _vacum_pump1_state 006B                ??i1_HC595_Shift 0070  
             ??_SetRelayOutput 0072        __end_of__initialization 007E                _SetAnalogOutput 157D  
               __pcstackCOMMON 0070               _CheckAnalogInput 037A            __size_of_CheckTimer 00C3  
               _vp1_delay_time 0030        __size_of_ProcessFeeder1 00DF        __size_of_ProcessFeeder2 0142  
      __size_of_ProcessFeeder3 00E9        __size_of_ProcessFeeder4 00E7        __size_of_ProcessFeeder5 00E9  
                 _feeder1_pcnt 0046                   _feeder2_pcnt 0049                   _feeder3_pcnt 004C  
                 _feeder4_pcnt 004F                   _feeder5_pcnt 0052        __size_of_ProcessCyclon1 0028  
                ??_HC595_Shift 0072                     __pbssBANK0 0020                     __pbssBANK1 00A0  
               _vp1_idle_speed 0032                     _an_in_pcnt 0039                __CFG_VCAPEN$OFF 0000  
                   _activ_unit 0038                    _hc595_shift 006E                        ?_DelayS 0070  
  _feeder2_cleaning_piston_tmr 00A4                      ?_SetTimer 0072                     __pmaintext 1549  
                      ?___wmul 0072                     __pintentry 0004                   ?_CheckSafety 0070  
                      _CCP1CON 0293                        _CCP2CON 029A                        DelayS@i 0077  
           __size_of_timer_int 0066        __end_of_SetAnalogOutput 15B8                        _DelayMs 1532  
            _error_display_tmr 00A0            __end_of_HC595_Shift 1632                        _InitRAM 151C  
                      _InitSYS 16CA        _mill_shutdown_delay_tmr 002A                __size_of_DelayS 0013  
                   ??_SetTimer 0076                        _an0_out 0020                        _an1_out 0022  
               SetTimer@period 0074                __size_of___wmul 001D                        __ptext1 0D95  
                      __ptext2 1632                        __ptext3 157D                        __ptext4 0082  
                      __ptext5 0CAC                        __ptext6 0BC3                        __ptext7 09F3  
                      __ptext8 0ADA                        __ptext9 0602       __size_of_SetSignalOutput 026B  
                      _vp1_tmr 0036                     _input_8_15 005A             _vacum_pump1_flags1 007B  
           _vacum_pump1_flags2 006A                   ??_CheckTimer 0072                        clrloop0 1504  
                    DelayS@cnt 0076           end_of_initialization 007E                     _relay_pcnt 005D  
    _feeder1_control_delay_tmr 00A2      _feeder4_control_delay_tmr 00AC                     _signal_0_7 005E  
            __end_of_timer_int 006A                     _sigout_tmr 0061                 _ProcessFeeder1 0833  
               _ProcessFeeder2 0602                 _ProcessFeeder3 0ADA                 _ProcessFeeder4 09F3  
               _ProcessFeeder5 0BC3                     _piston_tmr 002C             __end_of_CheckTimer 1800  
      SetTimer@timer_for_setup 0072                 _ProcessCyclon1 080B                    _HC595_Shift 15F5  
     __end_of_CheckAnalogInput 0602               ?_SetAnalogOutput 0070           _feeder4_charging_tmr 00AA  
                   _output_0_7 005B                 __end_of_DelayS 151C         __end_of_ProcessFeeder1 0912  
       __end_of_ProcessFeeder2 0744         __end_of_ProcessFeeder3 0BC3         __end_of_ProcessFeeder4 0ADA  
       __end_of_ProcessFeeder5 0CAC  _feeder_coex_control_delay_tmr 00B0                  _system_flags2 0062  
               __end_of___wmul 0800         __end_of_ProcessCyclon1 0833          _vp1_control_delay_tmr 00B8  
            _max_charging_time 0026           __size_of_CheckSafety 0055               _delayus_variable 0042  
          start_initialization 006C          __end_ofi1_HC595_Shift 15F5              ??_SetSignalOutput 0076  
                _feeder1_state 0047                  _feeder2_state 004A                  _feeder3_state 004D  
                _feeder4_state 0050                  _feeder5_state 0053                       ??_DelayS 0075  
             _clock_tick_100ms 003C               _clock_tick_500ms 003F              __size_of_SetTimer 009F  
                     ??___wmul 0076                ?_ProcessFeeder1 0070                ?_ProcessFeeder2 0070  
              ?_ProcessFeeder3 0070                ?_ProcessFeeder4 0070                ?_ProcessFeeder5 0070  
              ?_ProcessCyclon1 0070              _CheckDigitalInput 0912             ?_CheckDigitalInput 0070  
                  __pbssCOMMON 0079                      ___latbits 0002                  __pcstackBANK1 00BA  
          ??_CheckDigitalInput 0072                       ?_DelayMs 0070                       ?_InitRAM 0070  
                     ?_InitSYS 0070                      __pnvBANK0 006E                      _cyc1_pcnt 0040  
    __end_of_CheckDigitalInput 09F3        __size_of_SetRelayOutput 0043                      _anout_tmr 003B  
                    __pswtext1 0800                      __pswtext2 101E                      __pswtext3 1000  
                    _input_0_7 0057           _vp1_production_speed 0034                 ___wmul@product 0076  
                     DelayMs@i 0074                      clear_ram0 1503                       _GO_nDONE 04E9  
                    _timer_int 0004              ___wmul@multiplier 0072             _error_display_pcnt 0044  
                 ?_HC595_Shift 0070            _mill_shutdown_delay 0028               _max_charging_tmr 00B4  
            ?_CheckAnalogInput 0070                    _vp1_cl_pcnt 006C      _feeder2_control_delay_tmr 00A6  
           ??_CheckAnalogInput 00BA      _feeder5_control_delay_tmr 00AE               __size_of_DelayMs 0017  
             __size_of_InitRAM 0016               __size_of_InitSYS 0073                       _SetTimer 0744  
   __size_of_CheckDigitalInput 00E1                     ?_timer_int 0070                  _taster_flags1 0063  
                _taster_flags2 0064        _feeder_state_change_tmr 00B2                _SetSignalOutput 0D95  
                _clock_tick_1s 003D                  _clock_tick_2s 003E                       _anin_tmr 003A  
                     __ptext10 0833                       __ptext11 080B                       __ptext20 1675  
                     __ptext12 0744                       __ptext21 0912                       __ptext13 16CA  
                     __ptext22 15F5                       __ptext14 1509                       __ptext15 1532  
                     __ptext24 15B8                       __ptext16 037A                       __ptext17 07E3  
                     __ptext18 151C                       __ptext19 173D                    _input_24_31 0059  
                  _input_16_23 0058                       _vp1_pcnt 006D                       _dout_tmr 0043  
                __size_of_main 0034              _ProcessFeederCoex 0CAC               ??_ProcessFeeder1 0076  
             ??_ProcessFeeder2 0076               ??_ProcessFeeder3 0076               ??_ProcessFeeder4 0076  
             ??_ProcessFeeder5 0076             ?_ProcessFeederCoex 0070       __size_of_SetAnalogOutput 003B  
             ??_ProcessCyclon1 0076                 _SetRelayOutput 1632                       _test_cnt 0066  
                ??_CheckSafety 0072            ??_ProcessFeederCoex 0076                     DelayMs@cnt 0073  
                  pic14e$flags 007E                       intlevel1 0000      __end_of_ProcessFeederCoex 0D95  
            __CFG_CLKOUTEN$OFF 0000                    _signal_8_15 005F         __end_of_SetRelayOutput 1675  
      __end_of_SetSignalOutput 1000                   _timer_flags1 007A                   _timer_flags2 0068  
                 _timer_flags3 0069         __size_ofi1_HC595_Shift 003D                    ??_timer_int 0070  
          __end_of_CheckSafety 16CA                    _sigout_pcnt 0060           __size_of_HC595_Shift 003D  
            _ProcessVacumPump1 0082             ?_ProcessVacumPump1 0070                ?_SetRelayOutput 0070  
